
Moteur_Pojet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a38  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08006af0  08006af0  00016af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bcc  08006bcc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006bcc  08006bcc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006bcc  08006bcc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bcc  08006bcc  00016bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bd0  08006bd0  00016bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006bd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c8  20000010  08006be4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  08006be4  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001789a  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039ba  00000000  00000000  00037915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001430  00000000  00000000  0003b2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fb6  00000000  00000000  0003c700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000192e3  00000000  00000000  0003d6b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b228  00000000  00000000  00056999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009aca8  00000000  00000000  00071bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000047dc  00000000  00000000  0010c86c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00111048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006ad8 	.word	0x08006ad8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	08006ad8 	.word	0x08006ad8

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <HAL_GPIO_EXTI_Rising_Callback>:

struct CAPT_BTN_MAP_struct CAPT_BTN_MAP;


void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	0002      	movs	r2, r0
 80003f4:	1dbb      	adds	r3, r7, #6
 80003f6:	801a      	strh	r2, [r3, #0]
	switch (GPIO_Pin)
 80003f8:	1dbb      	adds	r3, r7, #6
 80003fa:	881b      	ldrh	r3, [r3, #0]
 80003fc:	2280      	movs	r2, #128	; 0x80
 80003fe:	0212      	lsls	r2, r2, #8
 8000400:	4293      	cmp	r3, r2
 8000402:	d050      	beq.n	80004a6 <HAL_GPIO_EXTI_Rising_Callback+0xba>
 8000404:	2280      	movs	r2, #128	; 0x80
 8000406:	0212      	lsls	r2, r2, #8
 8000408:	4293      	cmp	r3, r2
 800040a:	dd00      	ble.n	800040e <HAL_GPIO_EXTI_Rising_Callback+0x22>
 800040c:	e081      	b.n	8000512 <HAL_GPIO_EXTI_Rising_Callback+0x126>
 800040e:	2280      	movs	r2, #128	; 0x80
 8000410:	01d2      	lsls	r2, r2, #7
 8000412:	4293      	cmp	r3, r2
 8000414:	d041      	beq.n	800049a <HAL_GPIO_EXTI_Rising_Callback+0xae>
 8000416:	2280      	movs	r2, #128	; 0x80
 8000418:	01d2      	lsls	r2, r2, #7
 800041a:	4293      	cmp	r3, r2
 800041c:	dd00      	ble.n	8000420 <HAL_GPIO_EXTI_Rising_Callback+0x34>
 800041e:	e078      	b.n	8000512 <HAL_GPIO_EXTI_Rising_Callback+0x126>
 8000420:	2280      	movs	r2, #128	; 0x80
 8000422:	0192      	lsls	r2, r2, #6
 8000424:	4293      	cmp	r3, r2
 8000426:	d032      	beq.n	800048e <HAL_GPIO_EXTI_Rising_Callback+0xa2>
 8000428:	2280      	movs	r2, #128	; 0x80
 800042a:	0192      	lsls	r2, r2, #6
 800042c:	4293      	cmp	r3, r2
 800042e:	dd00      	ble.n	8000432 <HAL_GPIO_EXTI_Rising_Callback+0x46>
 8000430:	e06f      	b.n	8000512 <HAL_GPIO_EXTI_Rising_Callback+0x126>
 8000432:	2280      	movs	r2, #128	; 0x80
 8000434:	0092      	lsls	r2, r2, #2
 8000436:	4293      	cmp	r3, r2
 8000438:	d05b      	beq.n	80004f2 <HAL_GPIO_EXTI_Rising_Callback+0x106>
 800043a:	2280      	movs	r2, #128	; 0x80
 800043c:	0092      	lsls	r2, r2, #2
 800043e:	4293      	cmp	r3, r2
 8000440:	dd00      	ble.n	8000444 <HAL_GPIO_EXTI_Rising_Callback+0x58>
 8000442:	e066      	b.n	8000512 <HAL_GPIO_EXTI_Rising_Callback+0x126>
 8000444:	2280      	movs	r2, #128	; 0x80
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	4293      	cmp	r3, r2
 800044a:	d042      	beq.n	80004d2 <HAL_GPIO_EXTI_Rising_Callback+0xe6>
 800044c:	2280      	movs	r2, #128	; 0x80
 800044e:	0052      	lsls	r2, r2, #1
 8000450:	4293      	cmp	r3, r2
 8000452:	dc5e      	bgt.n	8000512 <HAL_GPIO_EXTI_Rising_Callback+0x126>
 8000454:	2b20      	cmp	r3, #32
 8000456:	d031      	beq.n	80004bc <HAL_GPIO_EXTI_Rising_Callback+0xd0>
 8000458:	dc5b      	bgt.n	8000512 <HAL_GPIO_EXTI_Rising_Callback+0x126>
 800045a:	2b10      	cmp	r3, #16
 800045c:	d011      	beq.n	8000482 <HAL_GPIO_EXTI_Rising_Callback+0x96>
 800045e:	dc58      	bgt.n	8000512 <HAL_GPIO_EXTI_Rising_Callback+0x126>
 8000460:	2b01      	cmp	r3, #1
 8000462:	d002      	beq.n	800046a <HAL_GPIO_EXTI_Rising_Callback+0x7e>
 8000464:	2b08      	cmp	r3, #8
 8000466:	d006      	beq.n	8000476 <HAL_GPIO_EXTI_Rising_Callback+0x8a>
			}
		}

		else CAPT_BTN_MAP = CAPT_BTN_MAP_RESET;
	 */
}
 8000468:	e053      	b.n	8000512 <HAL_GPIO_EXTI_Rising_Callback+0x126>
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800046a:	4b2c      	ldr	r3, [pc, #176]	; (800051c <HAL_GPIO_EXTI_Rising_Callback+0x130>)
 800046c:	2110      	movs	r1, #16
 800046e:	0018      	movs	r0, r3
 8000470:	f003 fc2f 	bl	8003cd2 <HAL_GPIO_TogglePin>
		break;
 8000474:	e04d      	b.n	8000512 <HAL_GPIO_EXTI_Rising_Callback+0x126>
		HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8000476:	4b29      	ldr	r3, [pc, #164]	; (800051c <HAL_GPIO_EXTI_Rising_Callback+0x130>)
 8000478:	2102      	movs	r1, #2
 800047a:	0018      	movs	r0, r3
 800047c:	f003 fc29 	bl	8003cd2 <HAL_GPIO_TogglePin>
		break;
 8000480:	e047      	b.n	8000512 <HAL_GPIO_EXTI_Rising_Callback+0x126>
		HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000482:	4b26      	ldr	r3, [pc, #152]	; (800051c <HAL_GPIO_EXTI_Rising_Callback+0x130>)
 8000484:	2108      	movs	r1, #8
 8000486:	0018      	movs	r0, r3
 8000488:	f003 fc23 	bl	8003cd2 <HAL_GPIO_TogglePin>
		break;
 800048c:	e041      	b.n	8000512 <HAL_GPIO_EXTI_Rising_Callback+0x126>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800048e:	4b23      	ldr	r3, [pc, #140]	; (800051c <HAL_GPIO_EXTI_Rising_Callback+0x130>)
 8000490:	2101      	movs	r1, #1
 8000492:	0018      	movs	r0, r3
 8000494:	f003 fc1d 	bl	8003cd2 <HAL_GPIO_TogglePin>
		break;
 8000498:	e03b      	b.n	8000512 <HAL_GPIO_EXTI_Rising_Callback+0x126>
		HAL_GPIO_TogglePin(LED_WHITE_GPIO_Port, LED_WHITE_Pin);
 800049a:	4b20      	ldr	r3, [pc, #128]	; (800051c <HAL_GPIO_EXTI_Rising_Callback+0x130>)
 800049c:	2104      	movs	r1, #4
 800049e:	0018      	movs	r0, r3
 80004a0:	f003 fc17 	bl	8003cd2 <HAL_GPIO_TogglePin>
		break;
 80004a4:	e035      	b.n	8000512 <HAL_GPIO_EXTI_Rising_Callback+0x126>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80004a6:	4b1d      	ldr	r3, [pc, #116]	; (800051c <HAL_GPIO_EXTI_Rising_Callback+0x130>)
 80004a8:	2101      	movs	r1, #1
 80004aa:	0018      	movs	r0, r3
 80004ac:	f003 fc11 	bl	8003cd2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_WHITE_GPIO_Port, LED_WHITE_Pin);
 80004b0:	4b1a      	ldr	r3, [pc, #104]	; (800051c <HAL_GPIO_EXTI_Rising_Callback+0x130>)
 80004b2:	2104      	movs	r1, #4
 80004b4:	0018      	movs	r0, r3
 80004b6:	f003 fc0c 	bl	8003cd2 <HAL_GPIO_TogglePin>
		break;
 80004ba:	e02a      	b.n	8000512 <HAL_GPIO_EXTI_Rising_Callback+0x126>
		HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80004bc:	4b17      	ldr	r3, [pc, #92]	; (800051c <HAL_GPIO_EXTI_Rising_Callback+0x130>)
 80004be:	2108      	movs	r1, #8
 80004c0:	0018      	movs	r0, r3
 80004c2:	f003 fc06 	bl	8003cd2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 80004c6:	4b15      	ldr	r3, [pc, #84]	; (800051c <HAL_GPIO_EXTI_Rising_Callback+0x130>)
 80004c8:	2102      	movs	r1, #2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f003 fc01 	bl	8003cd2 <HAL_GPIO_TogglePin>
		break;
 80004d0:	e01f      	b.n	8000512 <HAL_GPIO_EXTI_Rising_Callback+0x126>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80004d2:	4b12      	ldr	r3, [pc, #72]	; (800051c <HAL_GPIO_EXTI_Rising_Callback+0x130>)
 80004d4:	2101      	movs	r1, #1
 80004d6:	0018      	movs	r0, r3
 80004d8:	f003 fbfb 	bl	8003cd2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_WHITE_GPIO_Port, LED_WHITE_Pin);
 80004dc:	4b0f      	ldr	r3, [pc, #60]	; (800051c <HAL_GPIO_EXTI_Rising_Callback+0x130>)
 80004de:	2104      	movs	r1, #4
 80004e0:	0018      	movs	r0, r3
 80004e2:	f003 fbf6 	bl	8003cd2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80004e6:	4b0d      	ldr	r3, [pc, #52]	; (800051c <HAL_GPIO_EXTI_Rising_Callback+0x130>)
 80004e8:	2108      	movs	r1, #8
 80004ea:	0018      	movs	r0, r3
 80004ec:	f003 fbf1 	bl	8003cd2 <HAL_GPIO_TogglePin>
		break;
 80004f0:	e00f      	b.n	8000512 <HAL_GPIO_EXTI_Rising_Callback+0x126>
		HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 80004f2:	4b0a      	ldr	r3, [pc, #40]	; (800051c <HAL_GPIO_EXTI_Rising_Callback+0x130>)
 80004f4:	2102      	movs	r1, #2
 80004f6:	0018      	movs	r0, r3
 80004f8:	f003 fbeb 	bl	8003cd2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_GREEN_Pin);
 80004fc:	4b07      	ldr	r3, [pc, #28]	; (800051c <HAL_GPIO_EXTI_Rising_Callback+0x130>)
 80004fe:	2110      	movs	r1, #16
 8000500:	0018      	movs	r0, r3
 8000502:	f003 fbe6 	bl	8003cd2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000506:	4b05      	ldr	r3, [pc, #20]	; (800051c <HAL_GPIO_EXTI_Rising_Callback+0x130>)
 8000508:	2108      	movs	r1, #8
 800050a:	0018      	movs	r0, r3
 800050c:	f003 fbe1 	bl	8003cd2 <HAL_GPIO_TogglePin>
		break;
 8000510:	46c0      	nop			; (mov r8, r8)
}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	46bd      	mov	sp, r7
 8000516:	b002      	add	sp, #8
 8000518:	bd80      	pop	{r7, pc}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	50000c00 	.word	0x50000c00

08000520 <codeur_start>:

#include "encoder.h"
uint32_t counter_1,counter_2 = 0;
int16_t pos_1,pos_2 = 0;

void codeur_start(void){
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_ALL);
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <codeur_start+0x20>)
 8000526:	213c      	movs	r1, #60	; 0x3c
 8000528:	0018      	movs	r0, r3
 800052a:	f004 fe27 	bl	800517c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim1,TIM_CHANNEL_ALL);
 800052e:	4b05      	ldr	r3, [pc, #20]	; (8000544 <codeur_start+0x24>)
 8000530:	213c      	movs	r1, #60	; 0x3c
 8000532:	0018      	movs	r0, r3
 8000534:	f004 fe22 	bl	800517c <HAL_TIM_Encoder_Start_IT>
}
 8000538:	46c0      	nop			; (mov r8, r8)
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	200001e4 	.word	0x200001e4
 8000544:	20000198 	.word	0x20000198

08000548 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	if (htim == &htim1){
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	4b10      	ldr	r3, [pc, #64]	; (8000594 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000554:	429a      	cmp	r2, r3
 8000556:	d10a      	bne.n	800056e <HAL_TIM_IC_CaptureCallback+0x26>
		counter_1 = __HAL_TIM_GET_COUNTER(htim);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000560:	601a      	str	r2, [r3, #0]
		pos_1 = counter_1/4;
 8000562:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	089b      	lsrs	r3, r3, #2
 8000568:	b21a      	sxth	r2, r3
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <HAL_TIM_IC_CaptureCallback+0x54>)
 800056c:	801a      	strh	r2, [r3, #0]

	}

	if (htim == &htim3){
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000572:	429a      	cmp	r2, r3
 8000574:	d10a      	bne.n	800058c <HAL_TIM_IC_CaptureCallback+0x44>
			counter_2 = __HAL_TIM_GET_COUNTER(htim);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800057e:	601a      	str	r2, [r3, #0]
			pos_2 = counter_2/4;
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	089b      	lsrs	r3, r3, #2
 8000586:	b21a      	sxth	r2, r3
 8000588:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <HAL_TIM_IC_CaptureCallback+0x60>)
 800058a:	801a      	strh	r2, [r3, #0]

		}


}
 800058c:	46c0      	nop			; (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	b002      	add	sp, #8
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000198 	.word	0x20000198
 8000598:	2000002c 	.word	0x2000002c
 800059c:	20000034 	.word	0x20000034
 80005a0:	200001e4 	.word	0x200001e4
 80005a4:	20000030 	.word	0x20000030
 80005a8:	20000036 	.word	0x20000036

080005ac <pwm_start>:


int aTemp; //variable temporaire pour modifier la valeur du alpha en échelon

int pwm_start(TIM_HandleTypeDef htim, int Channel)
{
 80005ac:	b084      	sub	sp, #16
 80005ae:	b5b0      	push	{r4, r5, r7, lr}
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	2510      	movs	r5, #16
 80005b4:	197c      	adds	r4, r7, r5
 80005b6:	6020      	str	r0, [r4, #0]
 80005b8:	6061      	str	r1, [r4, #4]
 80005ba:	60a2      	str	r2, [r4, #8]
 80005bc:	60e3      	str	r3, [r4, #12]
	return HAL_TIM_PWM_Start(&htim, Channel);
 80005be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80005c0:	197b      	adds	r3, r7, r5
 80005c2:	0011      	movs	r1, r2
 80005c4:	0018      	movs	r0, r3
 80005c6:	f004 fbc1 	bl	8004d4c <HAL_TIM_PWM_Start>
 80005ca:	0003      	movs	r3, r0
}
 80005cc:	0018      	movs	r0, r3
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bcb0      	pop	{r4, r5, r7}
 80005d2:	bc08      	pop	{r3}
 80005d4:	b004      	add	sp, #16
 80005d6:	4718      	bx	r3

080005d8 <pwm_stop>:

int pwm_stop(TIM_HandleTypeDef htim, int Channel)
{
 80005d8:	b084      	sub	sp, #16
 80005da:	b5b0      	push	{r4, r5, r7, lr}
 80005dc:	af00      	add	r7, sp, #0
 80005de:	2510      	movs	r5, #16
 80005e0:	197c      	adds	r4, r7, r5
 80005e2:	6020      	str	r0, [r4, #0]
 80005e4:	6061      	str	r1, [r4, #4]
 80005e6:	60a2      	str	r2, [r4, #8]
 80005e8:	60e3      	str	r3, [r4, #12]
	return HAL_TIM_PWM_Stop(&htim, Channel);
 80005ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80005ec:	197b      	adds	r3, r7, r5
 80005ee:	0011      	movs	r1, r2
 80005f0:	0018      	movs	r0, r3
 80005f2:	f004 fc8f 	bl	8004f14 <HAL_TIM_PWM_Stop>
 80005f6:	0003      	movs	r3, r0
}
 80005f8:	0018      	movs	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bcb0      	pop	{r4, r5, r7}
 80005fe:	bc08      	pop	{r3}
 8000600:	b004      	add	sp, #16
 8000602:	4718      	bx	r3

08000604 <update_motor>:

void update_motor(struct Motor_drv_struct motor)
{
 8000604:	b084      	sub	sp, #16
 8000606:	b5b0      	push	{r4, r5, r7, lr}
 8000608:	af00      	add	r7, sp, #0
 800060a:	250c      	movs	r5, #12
 800060c:	1d2c      	adds	r4, r5, #4
 800060e:	19e4      	adds	r4, r4, r7
 8000610:	6020      	str	r0, [r4, #0]
 8000612:	6061      	str	r1, [r4, #4]
 8000614:	60a2      	str	r2, [r4, #8]
 8000616:	60e3      	str	r3, [r4, #12]
	if (motor.sens == 1)
 8000618:	002a      	movs	r2, r5
 800061a:	1d13      	adds	r3, r2, #4
 800061c:	19db      	adds	r3, r3, r7
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d000      	beq.n	8000626 <update_motor+0x22>
 8000624:	e094      	b.n	8000750 <update_motor+0x14c>
	{
		__HAL_TIM_SetCompare(&motor.Timer_Backward,motor.Channel_Backward,motor.alpha);
 8000626:	1d13      	adds	r3, r2, #4
 8000628:	19db      	adds	r3, r3, r7
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d108      	bne.n	8000642 <update_motor+0x3e>
 8000630:	0011      	movs	r1, r2
 8000632:	1d13      	adds	r3, r2, #4
 8000634:	19db      	adds	r3, r3, r7
 8000636:	68da      	ldr	r2, [r3, #12]
 8000638:	1d0b      	adds	r3, r1, #4
 800063a:	19db      	adds	r3, r3, r7
 800063c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800063e:	635a      	str	r2, [r3, #52]	; 0x34
 8000640:	e044      	b.n	80006cc <update_motor+0xc8>
 8000642:	220c      	movs	r2, #12
 8000644:	1d13      	adds	r3, r2, #4
 8000646:	19db      	adds	r3, r3, r7
 8000648:	685b      	ldr	r3, [r3, #4]
 800064a:	2b04      	cmp	r3, #4
 800064c:	d108      	bne.n	8000660 <update_motor+0x5c>
 800064e:	1d13      	adds	r3, r2, #4
 8000650:	19db      	adds	r3, r3, r7
 8000652:	68d9      	ldr	r1, [r3, #12]
 8000654:	1d13      	adds	r3, r2, #4
 8000656:	19db      	adds	r3, r3, r7
 8000658:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800065a:	000b      	movs	r3, r1
 800065c:	6393      	str	r3, [r2, #56]	; 0x38
 800065e:	e035      	b.n	80006cc <update_motor+0xc8>
 8000660:	220c      	movs	r2, #12
 8000662:	1d13      	adds	r3, r2, #4
 8000664:	19db      	adds	r3, r3, r7
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	2b08      	cmp	r3, #8
 800066a:	d108      	bne.n	800067e <update_motor+0x7a>
 800066c:	1d13      	adds	r3, r2, #4
 800066e:	19db      	adds	r3, r3, r7
 8000670:	68d9      	ldr	r1, [r3, #12]
 8000672:	1d13      	adds	r3, r2, #4
 8000674:	19db      	adds	r3, r3, r7
 8000676:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000678:	000b      	movs	r3, r1
 800067a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800067c:	e026      	b.n	80006cc <update_motor+0xc8>
 800067e:	220c      	movs	r2, #12
 8000680:	1d13      	adds	r3, r2, #4
 8000682:	19db      	adds	r3, r3, r7
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	2b0c      	cmp	r3, #12
 8000688:	d108      	bne.n	800069c <update_motor+0x98>
 800068a:	1d13      	adds	r3, r2, #4
 800068c:	19db      	adds	r3, r3, r7
 800068e:	68d9      	ldr	r1, [r3, #12]
 8000690:	1d13      	adds	r3, r2, #4
 8000692:	19db      	adds	r3, r3, r7
 8000694:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000696:	000b      	movs	r3, r1
 8000698:	6413      	str	r3, [r2, #64]	; 0x40
 800069a:	e017      	b.n	80006cc <update_motor+0xc8>
 800069c:	220c      	movs	r2, #12
 800069e:	1d13      	adds	r3, r2, #4
 80006a0:	19db      	adds	r3, r3, r7
 80006a2:	685b      	ldr	r3, [r3, #4]
 80006a4:	2b10      	cmp	r3, #16
 80006a6:	d108      	bne.n	80006ba <update_motor+0xb6>
 80006a8:	1d13      	adds	r3, r2, #4
 80006aa:	19db      	adds	r3, r3, r7
 80006ac:	68d9      	ldr	r1, [r3, #12]
 80006ae:	1d13      	adds	r3, r2, #4
 80006b0:	19db      	adds	r3, r3, r7
 80006b2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80006b4:	000b      	movs	r3, r1
 80006b6:	6593      	str	r3, [r2, #88]	; 0x58
 80006b8:	e008      	b.n	80006cc <update_motor+0xc8>
 80006ba:	220c      	movs	r2, #12
 80006bc:	1d13      	adds	r3, r2, #4
 80006be:	19db      	adds	r3, r3, r7
 80006c0:	68d9      	ldr	r1, [r3, #12]
 80006c2:	1d13      	adds	r3, r2, #4
 80006c4:	19db      	adds	r3, r3, r7
 80006c6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80006c8:	000b      	movs	r3, r1
 80006ca:	65d3      	str	r3, [r2, #92]	; 0x5c
		__HAL_TIM_SetCompare(&motor.Timer_Forward,motor.Channel_Forward,0);
 80006cc:	220c      	movs	r2, #12
 80006ce:	1d13      	adds	r3, r2, #4
 80006d0:	19db      	adds	r3, r3, r7
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d105      	bne.n	80006e4 <update_motor+0xe0>
 80006d8:	1d13      	adds	r3, r2, #4
 80006da:	19db      	adds	r3, r3, r7
 80006dc:	6a1b      	ldr	r3, [r3, #32]
 80006de:	2200      	movs	r2, #0
 80006e0:	635a      	str	r2, [r3, #52]	; 0x34
 80006e2:	e035      	b.n	8000750 <update_motor+0x14c>
 80006e4:	220c      	movs	r2, #12
 80006e6:	1d13      	adds	r3, r2, #4
 80006e8:	19db      	adds	r3, r3, r7
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b04      	cmp	r3, #4
 80006ee:	d105      	bne.n	80006fc <update_motor+0xf8>
 80006f0:	1d13      	adds	r3, r2, #4
 80006f2:	19db      	adds	r3, r3, r7
 80006f4:	6a1a      	ldr	r2, [r3, #32]
 80006f6:	2300      	movs	r3, #0
 80006f8:	6393      	str	r3, [r2, #56]	; 0x38
 80006fa:	e029      	b.n	8000750 <update_motor+0x14c>
 80006fc:	220c      	movs	r2, #12
 80006fe:	1d13      	adds	r3, r2, #4
 8000700:	19db      	adds	r3, r3, r7
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b08      	cmp	r3, #8
 8000706:	d105      	bne.n	8000714 <update_motor+0x110>
 8000708:	1d13      	adds	r3, r2, #4
 800070a:	19db      	adds	r3, r3, r7
 800070c:	6a1a      	ldr	r2, [r3, #32]
 800070e:	2300      	movs	r3, #0
 8000710:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000712:	e01d      	b.n	8000750 <update_motor+0x14c>
 8000714:	220c      	movs	r2, #12
 8000716:	1d13      	adds	r3, r2, #4
 8000718:	19db      	adds	r3, r3, r7
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b0c      	cmp	r3, #12
 800071e:	d105      	bne.n	800072c <update_motor+0x128>
 8000720:	1d13      	adds	r3, r2, #4
 8000722:	19db      	adds	r3, r3, r7
 8000724:	6a1a      	ldr	r2, [r3, #32]
 8000726:	2300      	movs	r3, #0
 8000728:	6413      	str	r3, [r2, #64]	; 0x40
 800072a:	e011      	b.n	8000750 <update_motor+0x14c>
 800072c:	220c      	movs	r2, #12
 800072e:	1d13      	adds	r3, r2, #4
 8000730:	19db      	adds	r3, r3, r7
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b10      	cmp	r3, #16
 8000736:	d105      	bne.n	8000744 <update_motor+0x140>
 8000738:	1d13      	adds	r3, r2, #4
 800073a:	19db      	adds	r3, r3, r7
 800073c:	6a1a      	ldr	r2, [r3, #32]
 800073e:	2300      	movs	r3, #0
 8000740:	6593      	str	r3, [r2, #88]	; 0x58
 8000742:	e005      	b.n	8000750 <update_motor+0x14c>
 8000744:	230c      	movs	r3, #12
 8000746:	3304      	adds	r3, #4
 8000748:	19db      	adds	r3, r3, r7
 800074a:	6a1a      	ldr	r2, [r3, #32]
 800074c:	2300      	movs	r3, #0
 800074e:	65d3      	str	r3, [r2, #92]	; 0x5c
	}
	if (motor.sens == 2)
 8000750:	220c      	movs	r2, #12
 8000752:	1d13      	adds	r3, r2, #4
 8000754:	19db      	adds	r3, r3, r7
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	2b02      	cmp	r3, #2
 800075a:	d000      	beq.n	800075e <update_motor+0x15a>
 800075c:	e094      	b.n	8000888 <update_motor+0x284>
	{
		__HAL_TIM_SetCompare(&motor.Timer_Backward,motor.Channel_Backward,0);
 800075e:	1d13      	adds	r3, r2, #4
 8000760:	19db      	adds	r3, r3, r7
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d105      	bne.n	8000774 <update_motor+0x170>
 8000768:	1d13      	adds	r3, r2, #4
 800076a:	19db      	adds	r3, r3, r7
 800076c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800076e:	2200      	movs	r2, #0
 8000770:	635a      	str	r2, [r3, #52]	; 0x34
 8000772:	e035      	b.n	80007e0 <update_motor+0x1dc>
 8000774:	220c      	movs	r2, #12
 8000776:	1d13      	adds	r3, r2, #4
 8000778:	19db      	adds	r3, r3, r7
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	2b04      	cmp	r3, #4
 800077e:	d105      	bne.n	800078c <update_motor+0x188>
 8000780:	1d13      	adds	r3, r2, #4
 8000782:	19db      	adds	r3, r3, r7
 8000784:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000786:	2300      	movs	r3, #0
 8000788:	6393      	str	r3, [r2, #56]	; 0x38
 800078a:	e029      	b.n	80007e0 <update_motor+0x1dc>
 800078c:	220c      	movs	r2, #12
 800078e:	1d13      	adds	r3, r2, #4
 8000790:	19db      	adds	r3, r3, r7
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	2b08      	cmp	r3, #8
 8000796:	d105      	bne.n	80007a4 <update_motor+0x1a0>
 8000798:	1d13      	adds	r3, r2, #4
 800079a:	19db      	adds	r3, r3, r7
 800079c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800079e:	2300      	movs	r3, #0
 80007a0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80007a2:	e01d      	b.n	80007e0 <update_motor+0x1dc>
 80007a4:	220c      	movs	r2, #12
 80007a6:	1d13      	adds	r3, r2, #4
 80007a8:	19db      	adds	r3, r3, r7
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	2b0c      	cmp	r3, #12
 80007ae:	d105      	bne.n	80007bc <update_motor+0x1b8>
 80007b0:	1d13      	adds	r3, r2, #4
 80007b2:	19db      	adds	r3, r3, r7
 80007b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80007b6:	2300      	movs	r3, #0
 80007b8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ba:	e011      	b.n	80007e0 <update_motor+0x1dc>
 80007bc:	220c      	movs	r2, #12
 80007be:	1d13      	adds	r3, r2, #4
 80007c0:	19db      	adds	r3, r3, r7
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	2b10      	cmp	r3, #16
 80007c6:	d105      	bne.n	80007d4 <update_motor+0x1d0>
 80007c8:	1d13      	adds	r3, r2, #4
 80007ca:	19db      	adds	r3, r3, r7
 80007cc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80007ce:	2300      	movs	r3, #0
 80007d0:	6593      	str	r3, [r2, #88]	; 0x58
 80007d2:	e005      	b.n	80007e0 <update_motor+0x1dc>
 80007d4:	230c      	movs	r3, #12
 80007d6:	3304      	adds	r3, #4
 80007d8:	19db      	adds	r3, r3, r7
 80007da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80007dc:	2300      	movs	r3, #0
 80007de:	65d3      	str	r3, [r2, #92]	; 0x5c
		__HAL_TIM_SetCompare(&motor.Timer_Forward,motor.Channel_Forward,motor.alpha);
 80007e0:	220c      	movs	r2, #12
 80007e2:	1d13      	adds	r3, r2, #4
 80007e4:	19db      	adds	r3, r3, r7
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d108      	bne.n	80007fe <update_motor+0x1fa>
 80007ec:	0011      	movs	r1, r2
 80007ee:	1d13      	adds	r3, r2, #4
 80007f0:	19db      	adds	r3, r3, r7
 80007f2:	68da      	ldr	r2, [r3, #12]
 80007f4:	1d0b      	adds	r3, r1, #4
 80007f6:	19db      	adds	r3, r3, r7
 80007f8:	6a1b      	ldr	r3, [r3, #32]
 80007fa:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80007fc:	e044      	b.n	8000888 <update_motor+0x284>
		__HAL_TIM_SetCompare(&motor.Timer_Forward,motor.Channel_Forward,motor.alpha);
 80007fe:	220c      	movs	r2, #12
 8000800:	1d13      	adds	r3, r2, #4
 8000802:	19db      	adds	r3, r3, r7
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b04      	cmp	r3, #4
 8000808:	d108      	bne.n	800081c <update_motor+0x218>
 800080a:	1d13      	adds	r3, r2, #4
 800080c:	19db      	adds	r3, r3, r7
 800080e:	68d9      	ldr	r1, [r3, #12]
 8000810:	1d13      	adds	r3, r2, #4
 8000812:	19db      	adds	r3, r3, r7
 8000814:	6a1a      	ldr	r2, [r3, #32]
 8000816:	000b      	movs	r3, r1
 8000818:	6393      	str	r3, [r2, #56]	; 0x38
}
 800081a:	e035      	b.n	8000888 <update_motor+0x284>
		__HAL_TIM_SetCompare(&motor.Timer_Forward,motor.Channel_Forward,motor.alpha);
 800081c:	220c      	movs	r2, #12
 800081e:	1d13      	adds	r3, r2, #4
 8000820:	19db      	adds	r3, r3, r7
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b08      	cmp	r3, #8
 8000826:	d108      	bne.n	800083a <update_motor+0x236>
 8000828:	1d13      	adds	r3, r2, #4
 800082a:	19db      	adds	r3, r3, r7
 800082c:	68d9      	ldr	r1, [r3, #12]
 800082e:	1d13      	adds	r3, r2, #4
 8000830:	19db      	adds	r3, r3, r7
 8000832:	6a1a      	ldr	r2, [r3, #32]
 8000834:	000b      	movs	r3, r1
 8000836:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000838:	e026      	b.n	8000888 <update_motor+0x284>
		__HAL_TIM_SetCompare(&motor.Timer_Forward,motor.Channel_Forward,motor.alpha);
 800083a:	220c      	movs	r2, #12
 800083c:	1d13      	adds	r3, r2, #4
 800083e:	19db      	adds	r3, r3, r7
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2b0c      	cmp	r3, #12
 8000844:	d108      	bne.n	8000858 <update_motor+0x254>
 8000846:	1d13      	adds	r3, r2, #4
 8000848:	19db      	adds	r3, r3, r7
 800084a:	68d9      	ldr	r1, [r3, #12]
 800084c:	1d13      	adds	r3, r2, #4
 800084e:	19db      	adds	r3, r3, r7
 8000850:	6a1a      	ldr	r2, [r3, #32]
 8000852:	000b      	movs	r3, r1
 8000854:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000856:	e017      	b.n	8000888 <update_motor+0x284>
		__HAL_TIM_SetCompare(&motor.Timer_Forward,motor.Channel_Forward,motor.alpha);
 8000858:	220c      	movs	r2, #12
 800085a:	1d13      	adds	r3, r2, #4
 800085c:	19db      	adds	r3, r3, r7
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b10      	cmp	r3, #16
 8000862:	d108      	bne.n	8000876 <update_motor+0x272>
 8000864:	1d13      	adds	r3, r2, #4
 8000866:	19db      	adds	r3, r3, r7
 8000868:	68d9      	ldr	r1, [r3, #12]
 800086a:	1d13      	adds	r3, r2, #4
 800086c:	19db      	adds	r3, r3, r7
 800086e:	6a1a      	ldr	r2, [r3, #32]
 8000870:	000b      	movs	r3, r1
 8000872:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000874:	e008      	b.n	8000888 <update_motor+0x284>
		__HAL_TIM_SetCompare(&motor.Timer_Forward,motor.Channel_Forward,motor.alpha);
 8000876:	220c      	movs	r2, #12
 8000878:	1d13      	adds	r3, r2, #4
 800087a:	19db      	adds	r3, r3, r7
 800087c:	68d9      	ldr	r1, [r3, #12]
 800087e:	1d13      	adds	r3, r2, #4
 8000880:	19db      	adds	r3, r3, r7
 8000882:	6a1a      	ldr	r2, [r3, #32]
 8000884:	000b      	movs	r3, r1
 8000886:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000888:	46c0      	nop			; (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	bcb0      	pop	{r4, r5, r7}
 800088e:	bc08      	pop	{r3}
 8000890:	b004      	add	sp, #16
 8000892:	4718      	bx	r3

08000894 <motor_Init>:
void motor_Init(struct Motor_drv_struct *moteur1, struct Motor_drv_struct *moteur2){
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]

	moteur1->Channel_Backward = TIM_CHANNEL_1;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2200      	movs	r2, #0
 80008a2:	605a      	str	r2, [r3, #4]
	moteur1->Channel_Forward = TIM_CHANNEL_2;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2204      	movs	r2, #4
 80008a8:	601a      	str	r2, [r3, #0]
	moteur1->Timer_Backward = htim15;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4a20      	ldr	r2, [pc, #128]	; (8000930 <motor_Init+0x9c>)
 80008ae:	336c      	adds	r3, #108	; 0x6c
 80008b0:	0011      	movs	r1, r2
 80008b2:	224c      	movs	r2, #76	; 0x4c
 80008b4:	0018      	movs	r0, r3
 80008b6:	f006 f905 	bl	8006ac4 <memcpy>
	moteur1->Timer_Forward = htim15;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4a1c      	ldr	r2, [pc, #112]	; (8000930 <motor_Init+0x9c>)
 80008be:	3320      	adds	r3, #32
 80008c0:	0011      	movs	r1, r2
 80008c2:	224c      	movs	r2, #76	; 0x4c
 80008c4:	0018      	movs	r0, r3
 80008c6:	f006 f8fd 	bl	8006ac4 <memcpy>
	moteur1->pwm_start = pwm_start;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	21b8      	movs	r1, #184	; 0xb8
 80008ce:	4a19      	ldr	r2, [pc, #100]	; (8000934 <motor_Init+0xa0>)
 80008d0:	505a      	str	r2, [r3, r1]
	moteur1->pwm_stop = pwm_stop;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	21bc      	movs	r1, #188	; 0xbc
 80008d6:	4a18      	ldr	r2, [pc, #96]	; (8000938 <motor_Init+0xa4>)
 80008d8:	505a      	str	r2, [r3, r1]
	moteur1->update = update_motor;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	21c0      	movs	r1, #192	; 0xc0
 80008de:	4a17      	ldr	r2, [pc, #92]	; (800093c <motor_Init+0xa8>)
 80008e0:	505a      	str	r2, [r3, r1]

	moteur2->Channel_Backward = TIM_CHANNEL_1;
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	2200      	movs	r2, #0
 80008e6:	605a      	str	r2, [r3, #4]
	moteur2->Channel_Forward = TIM_CHANNEL_1;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
	moteur2->Timer_Backward = htim16;
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	4a13      	ldr	r2, [pc, #76]	; (8000940 <motor_Init+0xac>)
 80008f2:	336c      	adds	r3, #108	; 0x6c
 80008f4:	0011      	movs	r1, r2
 80008f6:	224c      	movs	r2, #76	; 0x4c
 80008f8:	0018      	movs	r0, r3
 80008fa:	f006 f8e3 	bl	8006ac4 <memcpy>
	moteur2->Timer_Forward = htim17;
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	4a10      	ldr	r2, [pc, #64]	; (8000944 <motor_Init+0xb0>)
 8000902:	3320      	adds	r3, #32
 8000904:	0011      	movs	r1, r2
 8000906:	224c      	movs	r2, #76	; 0x4c
 8000908:	0018      	movs	r0, r3
 800090a:	f006 f8db 	bl	8006ac4 <memcpy>
	moteur2->pwm_start = pwm_start;
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	21b8      	movs	r1, #184	; 0xb8
 8000912:	4a08      	ldr	r2, [pc, #32]	; (8000934 <motor_Init+0xa0>)
 8000914:	505a      	str	r2, [r3, r1]
	moteur2->pwm_stop = pwm_stop;
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	21bc      	movs	r1, #188	; 0xbc
 800091a:	4a07      	ldr	r2, [pc, #28]	; (8000938 <motor_Init+0xa4>)
 800091c:	505a      	str	r2, [r3, r1]
	moteur2->update = update_motor;
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	21c0      	movs	r1, #192	; 0xc0
 8000922:	4a06      	ldr	r2, [pc, #24]	; (800093c <motor_Init+0xa8>)
 8000924:	505a      	str	r2, [r3, r1]
}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	b002      	add	sp, #8
 800092c:	bd80      	pop	{r7, pc}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	200002c8 	.word	0x200002c8
 8000934:	080005ad 	.word	0x080005ad
 8000938:	080005d9 	.word	0x080005d9
 800093c:	08000605 	.word	0x08000605
 8000940:	20000314 	.word	0x20000314
 8000944:	20000360 	.word	0x20000360

08000948 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	0018      	movs	r0, r3
 8000952:	230c      	movs	r3, #12
 8000954:	001a      	movs	r2, r3
 8000956:	2100      	movs	r1, #0
 8000958:	f006 f888 	bl	8006a6c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800095c:	4b34      	ldr	r3, [pc, #208]	; (8000a30 <MX_ADC1_Init+0xe8>)
 800095e:	4a35      	ldr	r2, [pc, #212]	; (8000a34 <MX_ADC1_Init+0xec>)
 8000960:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000962:	4b33      	ldr	r3, [pc, #204]	; (8000a30 <MX_ADC1_Init+0xe8>)
 8000964:	2280      	movs	r2, #128	; 0x80
 8000966:	05d2      	lsls	r2, r2, #23
 8000968:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800096a:	4b31      	ldr	r3, [pc, #196]	; (8000a30 <MX_ADC1_Init+0xe8>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000970:	4b2f      	ldr	r3, [pc, #188]	; (8000a30 <MX_ADC1_Init+0xe8>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000976:	4b2e      	ldr	r3, [pc, #184]	; (8000a30 <MX_ADC1_Init+0xe8>)
 8000978:	2280      	movs	r2, #128	; 0x80
 800097a:	0392      	lsls	r2, r2, #14
 800097c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800097e:	4b2c      	ldr	r3, [pc, #176]	; (8000a30 <MX_ADC1_Init+0xe8>)
 8000980:	2204      	movs	r2, #4
 8000982:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000984:	4b2a      	ldr	r3, [pc, #168]	; (8000a30 <MX_ADC1_Init+0xe8>)
 8000986:	2200      	movs	r2, #0
 8000988:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800098a:	4b29      	ldr	r3, [pc, #164]	; (8000a30 <MX_ADC1_Init+0xe8>)
 800098c:	2200      	movs	r2, #0
 800098e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000990:	4b27      	ldr	r3, [pc, #156]	; (8000a30 <MX_ADC1_Init+0xe8>)
 8000992:	2201      	movs	r2, #1
 8000994:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 8000996:	4b26      	ldr	r3, [pc, #152]	; (8000a30 <MX_ADC1_Init+0xe8>)
 8000998:	2202      	movs	r2, #2
 800099a:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800099c:	4b24      	ldr	r3, [pc, #144]	; (8000a30 <MX_ADC1_Init+0xe8>)
 800099e:	2200      	movs	r2, #0
 80009a0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009a2:	4b23      	ldr	r3, [pc, #140]	; (8000a30 <MX_ADC1_Init+0xe8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009a8:	4b21      	ldr	r3, [pc, #132]	; (8000a30 <MX_ADC1_Init+0xe8>)
 80009aa:	222c      	movs	r2, #44	; 0x2c
 80009ac:	2100      	movs	r1, #0
 80009ae:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009b0:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <MX_ADC1_Init+0xe8>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 80009b6:	4b1e      	ldr	r3, [pc, #120]	; (8000a30 <MX_ADC1_Init+0xe8>)
 80009b8:	2206      	movs	r2, #6
 80009ba:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 80009bc:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <MX_ADC1_Init+0xe8>)
 80009be:	2206      	movs	r2, #6
 80009c0:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80009c2:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <MX_ADC1_Init+0xe8>)
 80009c4:	223c      	movs	r2, #60	; 0x3c
 80009c6:	2100      	movs	r1, #0
 80009c8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80009ca:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <MX_ADC1_Init+0xe8>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009d0:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <MX_ADC1_Init+0xe8>)
 80009d2:	0018      	movs	r0, r3
 80009d4:	f001 fe6c 	bl	80026b0 <HAL_ADC_Init>
 80009d8:	1e03      	subs	r3, r0, #0
 80009da:	d001      	beq.n	80009e0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80009dc:	f000 fcea 	bl	80013b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2201      	movs	r2, #1
 80009e4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2200      	movs	r2, #0
 80009ea:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f2:	1d3a      	adds	r2, r7, #4
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_ADC1_Init+0xe8>)
 80009f6:	0011      	movs	r1, r2
 80009f8:	0018      	movs	r0, r3
 80009fa:	f002 f92b 	bl	8002c54 <HAL_ADC_ConfigChannel>
 80009fe:	1e03      	subs	r3, r0, #0
 8000a00:	d001      	beq.n	8000a06 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8000a02:	f000 fcd7 	bl	80013b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	4a0b      	ldr	r2, [pc, #44]	; (8000a38 <MX_ADC1_Init+0xf0>)
 8000a0a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2204      	movs	r2, #4
 8000a10:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a12:	1d3a      	adds	r2, r7, #4
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_ADC1_Init+0xe8>)
 8000a16:	0011      	movs	r1, r2
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f002 f91b 	bl	8002c54 <HAL_ADC_ConfigChannel>
 8000a1e:	1e03      	subs	r3, r0, #0
 8000a20:	d001      	beq.n	8000a26 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000a22:	f000 fcc7 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	b004      	add	sp, #16
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	20000038 	.word	0x20000038
 8000a34:	40012400 	.word	0x40012400
 8000a38:	04000002 	.word	0x04000002

08000a3c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b08b      	sub	sp, #44	; 0x2c
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	2414      	movs	r4, #20
 8000a46:	193b      	adds	r3, r7, r4
 8000a48:	0018      	movs	r0, r3
 8000a4a:	2314      	movs	r3, #20
 8000a4c:	001a      	movs	r2, r3
 8000a4e:	2100      	movs	r1, #0
 8000a50:	f006 f80c 	bl	8006a6c <memset>
  if(adcHandle->Instance==ADC1)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a2d      	ldr	r2, [pc, #180]	; (8000b10 <HAL_ADC_MspInit+0xd4>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d154      	bne.n	8000b08 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a5e:	4b2d      	ldr	r3, [pc, #180]	; (8000b14 <HAL_ADC_MspInit+0xd8>)
 8000a60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a62:	4b2c      	ldr	r3, [pc, #176]	; (8000b14 <HAL_ADC_MspInit+0xd8>)
 8000a64:	2180      	movs	r1, #128	; 0x80
 8000a66:	0349      	lsls	r1, r1, #13
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	641a      	str	r2, [r3, #64]	; 0x40
 8000a6c:	4b29      	ldr	r3, [pc, #164]	; (8000b14 <HAL_ADC_MspInit+0xd8>)
 8000a6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	035b      	lsls	r3, r3, #13
 8000a74:	4013      	ands	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b26      	ldr	r3, [pc, #152]	; (8000b14 <HAL_ADC_MspInit+0xd8>)
 8000a7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a7e:	4b25      	ldr	r3, [pc, #148]	; (8000b14 <HAL_ADC_MspInit+0xd8>)
 8000a80:	2101      	movs	r1, #1
 8000a82:	430a      	orrs	r2, r1
 8000a84:	635a      	str	r2, [r3, #52]	; 0x34
 8000a86:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <HAL_ADC_MspInit+0xd8>)
 8000a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_Shunt1_Pin|ADC_Shunt2_Pin;
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	2203      	movs	r2, #3
 8000a96:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a98:	193b      	adds	r3, r7, r4
 8000a9a:	2203      	movs	r2, #3
 8000a9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	193b      	adds	r3, r7, r4
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa4:	193a      	adds	r2, r7, r4
 8000aa6:	23a0      	movs	r3, #160	; 0xa0
 8000aa8:	05db      	lsls	r3, r3, #23
 8000aaa:	0011      	movs	r1, r2
 8000aac:	0018      	movs	r0, r3
 8000aae:	f002 ff8f 	bl	80039d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ab2:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <HAL_ADC_MspInit+0xdc>)
 8000ab4:	4a19      	ldr	r2, [pc, #100]	; (8000b1c <HAL_ADC_MspInit+0xe0>)
 8000ab6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <HAL_ADC_MspInit+0xdc>)
 8000aba:	2205      	movs	r2, #5
 8000abc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <HAL_ADC_MspInit+0xdc>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <HAL_ADC_MspInit+0xdc>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <HAL_ADC_MspInit+0xdc>)
 8000acc:	2280      	movs	r2, #128	; 0x80
 8000ace:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <HAL_ADC_MspInit+0xdc>)
 8000ad2:	2280      	movs	r2, #128	; 0x80
 8000ad4:	0052      	lsls	r2, r2, #1
 8000ad6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <HAL_ADC_MspInit+0xdc>)
 8000ada:	2280      	movs	r2, #128	; 0x80
 8000adc:	00d2      	lsls	r2, r2, #3
 8000ade:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <HAL_ADC_MspInit+0xdc>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <HAL_ADC_MspInit+0xdc>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000aec:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <HAL_ADC_MspInit+0xdc>)
 8000aee:	0018      	movs	r0, r3
 8000af0:	f002 fde2 	bl	80036b8 <HAL_DMA_Init>
 8000af4:	1e03      	subs	r3, r0, #0
 8000af6:	d001      	beq.n	8000afc <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000af8:	f000 fc5c 	bl	80013b4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <HAL_ADC_MspInit+0xdc>)
 8000b00:	651a      	str	r2, [r3, #80]	; 0x50
 8000b02:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <HAL_ADC_MspInit+0xdc>)
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b00b      	add	sp, #44	; 0x2c
 8000b0e:	bd90      	pop	{r4, r7, pc}
 8000b10:	40012400 	.word	0x40012400
 8000b14:	40021000 	.word	0x40021000
 8000b18:	2000009c 	.word	0x2000009c
 8000b1c:	40020008 	.word	0x40020008

08000b20 <ADC_Select_CH0>:
  }
}

/* USER CODE BEGIN 1 */
void ADC_Select_CH0 (void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	0018      	movs	r0, r3
 8000b2a:	230c      	movs	r3, #12
 8000b2c:	001a      	movs	r2, r3
 8000b2e:	2100      	movs	r1, #0
 8000b30:	f005 ff9c 	bl	8006a6c <memset>
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_0;
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2201      	movs	r2, #1
 8000b38:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = 1;
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	605a      	str	r2, [r3, #4]
	  //sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b40:	1d3a      	adds	r2, r7, #4
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <ADC_Select_CH0+0x3c>)
 8000b44:	0011      	movs	r1, r2
 8000b46:	0018      	movs	r0, r3
 8000b48:	f002 f884 	bl	8002c54 <HAL_ADC_ConfigChannel>
 8000b4c:	1e03      	subs	r3, r0, #0
 8000b4e:	d001      	beq.n	8000b54 <ADC_Select_CH0+0x34>
	  {
	    Error_Handler();
 8000b50:	f000 fc30 	bl	80013b4 <Error_Handler>
	  }
}
 8000b54:	46c0      	nop			; (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	b004      	add	sp, #16
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000038 	.word	0x20000038

08000b60 <ADC_Select_CH1>:

void ADC_Select_CH1 (void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	0018      	movs	r0, r3
 8000b6a:	230c      	movs	r3, #12
 8000b6c:	001a      	movs	r2, r3
 8000b6e:	2100      	movs	r1, #0
 8000b70:	f005 ff7c 	bl	8006a6c <memset>
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	4a09      	ldr	r2, [pc, #36]	; (8000b9c <ADC_Select_CH1+0x3c>)
 8000b78:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = 2;
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	2202      	movs	r2, #2
 8000b7e:	605a      	str	r2, [r3, #4]
	  //sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b80:	1d3a      	adds	r2, r7, #4
 8000b82:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <ADC_Select_CH1+0x40>)
 8000b84:	0011      	movs	r1, r2
 8000b86:	0018      	movs	r0, r3
 8000b88:	f002 f864 	bl	8002c54 <HAL_ADC_ConfigChannel>
 8000b8c:	1e03      	subs	r3, r0, #0
 8000b8e:	d001      	beq.n	8000b94 <ADC_Select_CH1+0x34>
	  {
	    Error_Handler();
 8000b90:	f000 fc10 	bl	80013b4 <Error_Handler>
	  }
}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b004      	add	sp, #16
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	04000002 	.word	0x04000002
 8000ba0:	20000038 	.word	0x20000038

08000ba4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <MX_DMA_Init+0x38>)
 8000bac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <MX_DMA_Init+0x38>)
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	639a      	str	r2, [r3, #56]	; 0x38
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_DMA_Init+0x38>)
 8000bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bba:	2201      	movs	r2, #1
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2009      	movs	r0, #9
 8000bc8:	f002 fd44 	bl	8003654 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bcc:	2009      	movs	r0, #9
 8000bce:	f002 fd56 	bl	800367e <HAL_NVIC_EnableIRQ>

}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	b002      	add	sp, #8
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	40021000 	.word	0x40021000

08000be0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b08b      	sub	sp, #44	; 0x2c
 8000be4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be6:	2414      	movs	r4, #20
 8000be8:	193b      	adds	r3, r7, r4
 8000bea:	0018      	movs	r0, r3
 8000bec:	2314      	movs	r3, #20
 8000bee:	001a      	movs	r2, r3
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	f005 ff3b 	bl	8006a6c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf6:	4b6d      	ldr	r3, [pc, #436]	; (8000dac <MX_GPIO_Init+0x1cc>)
 8000bf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bfa:	4b6c      	ldr	r3, [pc, #432]	; (8000dac <MX_GPIO_Init+0x1cc>)
 8000bfc:	2104      	movs	r1, #4
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	635a      	str	r2, [r3, #52]	; 0x34
 8000c02:	4b6a      	ldr	r3, [pc, #424]	; (8000dac <MX_GPIO_Init+0x1cc>)
 8000c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c06:	2204      	movs	r2, #4
 8000c08:	4013      	ands	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c0e:	4b67      	ldr	r3, [pc, #412]	; (8000dac <MX_GPIO_Init+0x1cc>)
 8000c10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c12:	4b66      	ldr	r3, [pc, #408]	; (8000dac <MX_GPIO_Init+0x1cc>)
 8000c14:	2120      	movs	r1, #32
 8000c16:	430a      	orrs	r2, r1
 8000c18:	635a      	str	r2, [r3, #52]	; 0x34
 8000c1a:	4b64      	ldr	r3, [pc, #400]	; (8000dac <MX_GPIO_Init+0x1cc>)
 8000c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c1e:	2220      	movs	r2, #32
 8000c20:	4013      	ands	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	4b61      	ldr	r3, [pc, #388]	; (8000dac <MX_GPIO_Init+0x1cc>)
 8000c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c2a:	4b60      	ldr	r3, [pc, #384]	; (8000dac <MX_GPIO_Init+0x1cc>)
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	430a      	orrs	r2, r1
 8000c30:	635a      	str	r2, [r3, #52]	; 0x34
 8000c32:	4b5e      	ldr	r3, [pc, #376]	; (8000dac <MX_GPIO_Init+0x1cc>)
 8000c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c36:	2201      	movs	r2, #1
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3e:	4b5b      	ldr	r3, [pc, #364]	; (8000dac <MX_GPIO_Init+0x1cc>)
 8000c40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c42:	4b5a      	ldr	r3, [pc, #360]	; (8000dac <MX_GPIO_Init+0x1cc>)
 8000c44:	2102      	movs	r1, #2
 8000c46:	430a      	orrs	r2, r1
 8000c48:	635a      	str	r2, [r3, #52]	; 0x34
 8000c4a:	4b58      	ldr	r3, [pc, #352]	; (8000dac <MX_GPIO_Init+0x1cc>)
 8000c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c4e:	2202      	movs	r2, #2
 8000c50:	4013      	ands	r3, r2
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c56:	4b55      	ldr	r3, [pc, #340]	; (8000dac <MX_GPIO_Init+0x1cc>)
 8000c58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c5a:	4b54      	ldr	r3, [pc, #336]	; (8000dac <MX_GPIO_Init+0x1cc>)
 8000c5c:	2108      	movs	r1, #8
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	635a      	str	r2, [r3, #52]	; 0x34
 8000c62:	4b52      	ldr	r3, [pc, #328]	; (8000dac <MX_GPIO_Init+0x1cc>)
 8000c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c66:	2208      	movs	r2, #8
 8000c68:	4013      	ands	r3, r2
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000c6e:	2380      	movs	r3, #128	; 0x80
 8000c70:	00d9      	lsls	r1, r3, #3
 8000c72:	23a0      	movs	r3, #160	; 0xa0
 8000c74:	05db      	lsls	r3, r3, #23
 8000c76:	2200      	movs	r2, #0
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f003 f80d 	bl	8003c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_RED_Pin|LED_YELLOW_Pin|LED_WHITE_Pin|LED_BLUE_Pin
 8000c7e:	4b4c      	ldr	r3, [pc, #304]	; (8000db0 <MX_GPIO_Init+0x1d0>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	213f      	movs	r1, #63	; 0x3f
 8000c84:	0018      	movs	r0, r3
 8000c86:	f003 f807 	bl	8003c98 <HAL_GPIO_WritePin>
                          |LED_GREEN_Pin|Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DEV_EN_Pin|M_EN_Pin, GPIO_PIN_RESET);
 8000c8a:	4b4a      	ldr	r3, [pc, #296]	; (8000db4 <MX_GPIO_Init+0x1d4>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2118      	movs	r1, #24
 8000c90:	0018      	movs	r0, r3
 8000c92:	f003 f801 	bl	8003c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Bouton1_Pin|Bouton2_Pin;
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	2209      	movs	r2, #9
 8000c9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c9c:	193b      	adds	r3, r7, r4
 8000c9e:	2288      	movs	r2, #136	; 0x88
 8000ca0:	0352      	lsls	r2, r2, #13
 8000ca2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ca4:	193b      	adds	r3, r7, r4
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000caa:	193b      	adds	r3, r7, r4
 8000cac:	4a42      	ldr	r2, [pc, #264]	; (8000db8 <MX_GPIO_Init+0x1d8>)
 8000cae:	0019      	movs	r1, r3
 8000cb0:	0010      	movs	r0, r2
 8000cb2:	f002 fe8d 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Bouton3_Pin;
 8000cb6:	193b      	adds	r3, r7, r4
 8000cb8:	2210      	movs	r2, #16
 8000cba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cbc:	193b      	adds	r3, r7, r4
 8000cbe:	2288      	movs	r2, #136	; 0x88
 8000cc0:	0352      	lsls	r2, r2, #13
 8000cc2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cc4:	193b      	adds	r3, r7, r4
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Bouton3_GPIO_Port, &GPIO_InitStruct);
 8000cca:	193a      	adds	r2, r7, r4
 8000ccc:	23a0      	movs	r3, #160	; 0xa0
 8000cce:	05db      	lsls	r3, r3, #23
 8000cd0:	0011      	movs	r1, r2
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f002 fe7c 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = Contact1_Pin|Contact2_Pin|Contact3_Pin|Contact4_Pin
 8000cd8:	0021      	movs	r1, r4
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	4a37      	ldr	r2, [pc, #220]	; (8000dbc <MX_GPIO_Init+0x1dc>)
 8000cde:	601a      	str	r2, [r3, #0]
                          |Bordure1_Pin|Bordure2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	2288      	movs	r2, #136	; 0x88
 8000ce4:	0352      	lsls	r2, r2, #13
 8000ce6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	2201      	movs	r2, #1
 8000cec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cee:	000c      	movs	r4, r1
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	4a30      	ldr	r2, [pc, #192]	; (8000db4 <MX_GPIO_Init+0x1d4>)
 8000cf4:	0019      	movs	r1, r3
 8000cf6:	0010      	movs	r0, r2
 8000cf8:	f002 fe6a 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000cfc:	0021      	movs	r1, r4
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	2280      	movs	r2, #128	; 0x80
 8000d02:	00d2      	lsls	r2, r2, #3
 8000d04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d06:	000c      	movs	r4, r1
 8000d08:	193b      	adds	r3, r7, r4
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	193b      	adds	r3, r7, r4
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	193b      	adds	r3, r7, r4
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	193a      	adds	r2, r7, r4
 8000d1c:	23a0      	movs	r3, #160	; 0xa0
 8000d1e:	05db      	lsls	r3, r3, #23
 8000d20:	0011      	movs	r1, r2
 8000d22:	0018      	movs	r0, r3
 8000d24:	f002 fe54 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_WHITE_Pin|LED_BLUE_Pin
 8000d28:	193b      	adds	r3, r7, r4
 8000d2a:	223f      	movs	r2, #63	; 0x3f
 8000d2c:	601a      	str	r2, [r3, #0]
                          |LED_GREEN_Pin|Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	193b      	adds	r3, r7, r4
 8000d30:	2201      	movs	r2, #1
 8000d32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	193b      	adds	r3, r7, r4
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	193b      	adds	r3, r7, r4
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d40:	193b      	adds	r3, r7, r4
 8000d42:	4a1b      	ldr	r2, [pc, #108]	; (8000db0 <MX_GPIO_Init+0x1d0>)
 8000d44:	0019      	movs	r1, r3
 8000d46:	0010      	movs	r0, r2
 8000d48:	f002 fe42 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DEV_EN_Pin|M_EN_Pin;
 8000d4c:	0021      	movs	r1, r4
 8000d4e:	187b      	adds	r3, r7, r1
 8000d50:	2218      	movs	r2, #24
 8000d52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d54:	187b      	adds	r3, r7, r1
 8000d56:	2201      	movs	r2, #1
 8000d58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	187b      	adds	r3, r7, r1
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	187b      	adds	r3, r7, r1
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <MX_GPIO_Init+0x1d4>)
 8000d6a:	0019      	movs	r1, r3
 8000d6c:	0010      	movs	r0, r2
 8000d6e:	f002 fe2f 	bl	80039d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2100      	movs	r1, #0
 8000d76:	2005      	movs	r0, #5
 8000d78:	f002 fc6c 	bl	8003654 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000d7c:	2005      	movs	r0, #5
 8000d7e:	f002 fc7e 	bl	800367e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2100      	movs	r1, #0
 8000d86:	2006      	movs	r0, #6
 8000d88:	f002 fc64 	bl	8003654 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000d8c:	2006      	movs	r0, #6
 8000d8e:	f002 fc76 	bl	800367e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2100      	movs	r1, #0
 8000d96:	2007      	movs	r0, #7
 8000d98:	f002 fc5c 	bl	8003654 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000d9c:	2007      	movs	r0, #7
 8000d9e:	f002 fc6e 	bl	800367e <HAL_NVIC_EnableIRQ>

}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b00b      	add	sp, #44	; 0x2c
 8000da8:	bd90      	pop	{r4, r7, pc}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	40021000 	.word	0x40021000
 8000db0:	50000c00 	.word	0x50000c00
 8000db4:	50000400 	.word	0x50000400
 8000db8:	50000800 	.word	0x50000800
 8000dbc:	0000e320 	.word	0x0000e320

08000dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dc2:	4ca7      	ldr	r4, [pc, #668]	; (8001060 <main+0x2a0>)
 8000dc4:	44a5      	add	sp, r4
 8000dc6:	af2e      	add	r7, sp, #184	; 0xb8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc8:	f001 fa48 	bl	800225c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dcc:	f000 fa98 	bl	8001300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd0:	f7ff ff06 	bl	8000be0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dd4:	f7ff fee6 	bl	8000ba4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000dd8:	f7ff fdb6 	bl	8000948 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000ddc:	f000 fc18 	bl	8001610 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000de0:	f000 fc80 	bl	80016e4 <MX_TIM3_Init>
  MX_TIM14_Init();
 8000de4:	f000 fd1e 	bl	8001824 <MX_TIM14_Init>
  MX_TIM15_Init();
 8000de8:	f000 fd6c 	bl	80018c4 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000dec:	f000 fe0e 	bl	8001a0c <MX_TIM16_Init>
  MX_TIM17_Init();
 8000df0:	f000 fe94 	bl	8001b1c <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8000df4:	f001 f8ec 	bl	8001fd0 <MX_USART1_UART_Init>
  MX_USART4_UART_Init();
 8000df8:	f001 f938 	bl	800206c <MX_USART4_UART_Init>
  MX_SPI1_Init();
 8000dfc:	f000 fae0 	bl	80013c0 <MX_SPI1_Init>
  MX_TIM6_Init();
 8000e00:	f000 fcd4 	bl	80017ac <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	HAL_ADCEx_Calibration_Start(&hadc1);
 8000e04:	4b97      	ldr	r3, [pc, #604]	; (8001064 <main+0x2a4>)
 8000e06:	0018      	movs	r0, r3
 8000e08:	f002 faa2 	bl	8003350 <HAL_ADCEx_Calibration_Start>
	/*if(HAL_OK != HAL_ADC_Start_DMA(&hadc1, ADC_buffer, ADC_BUF_SIZE)){
		Error_Handler();
	}
	 */
	HAL_TIM_Base_Start(&htim6);
 8000e0c:	4b96      	ldr	r3, [pc, #600]	; (8001068 <main+0x2a8>)
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f003 fef6 	bl	8004c00 <HAL_TIM_Base_Start>

	codeur_start();
 8000e14:	f7ff fb84 	bl	8000520 <codeur_start>

	Motor_drv moteur1,moteur2;

	motor_Init(&moteur1,&moteur2);
 8000e18:	003a      	movs	r2, r7
 8000e1a:	26c4      	movs	r6, #196	; 0xc4
 8000e1c:	19bb      	adds	r3, r7, r6
 8000e1e:	0011      	movs	r1, r2
 8000e20:	0018      	movs	r0, r3
 8000e22:	f7ff fd37 	bl	8000894 <motor_Init>
	moteur1.sens = 1;
 8000e26:	19bb      	adds	r3, r7, r6
 8000e28:	2201      	movs	r2, #1
 8000e2a:	609a      	str	r2, [r3, #8]
	moteur1.alpha = alpha_test;
 8000e2c:	4b8f      	ldr	r3, [pc, #572]	; (800106c <main+0x2ac>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	19bb      	adds	r3, r7, r6
 8000e32:	60da      	str	r2, [r3, #12]
	moteur1.update(moteur1);
 8000e34:	19bb      	adds	r3, r7, r6
 8000e36:	22c0      	movs	r2, #192	; 0xc0
 8000e38:	589d      	ldr	r5, [r3, r2]
 8000e3a:	19bc      	adds	r4, r7, r6
 8000e3c:	466b      	mov	r3, sp
 8000e3e:	0018      	movs	r0, r3
 8000e40:	0023      	movs	r3, r4
 8000e42:	3310      	adds	r3, #16
 8000e44:	22b4      	movs	r2, #180	; 0xb4
 8000e46:	0019      	movs	r1, r3
 8000e48:	f005 fe3c 	bl	8006ac4 <memcpy>
 8000e4c:	6820      	ldr	r0, [r4, #0]
 8000e4e:	6861      	ldr	r1, [r4, #4]
 8000e50:	68a2      	ldr	r2, [r4, #8]
 8000e52:	68e3      	ldr	r3, [r4, #12]
 8000e54:	47a8      	blx	r5

	moteur1.pwm_start(moteur1.Timer_Backward,moteur1.Channel_Backward);
 8000e56:	19bb      	adds	r3, r7, r6
 8000e58:	22b8      	movs	r2, #184	; 0xb8
 8000e5a:	589d      	ldr	r5, [r3, r2]
 8000e5c:	19bb      	adds	r3, r7, r6
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	19bc      	adds	r4, r7, r6
 8000e62:	930f      	str	r3, [sp, #60]	; 0x3c
 8000e64:	466b      	mov	r3, sp
 8000e66:	0018      	movs	r0, r3
 8000e68:	0023      	movs	r3, r4
 8000e6a:	337c      	adds	r3, #124	; 0x7c
 8000e6c:	223c      	movs	r2, #60	; 0x3c
 8000e6e:	0019      	movs	r1, r3
 8000e70:	f005 fe28 	bl	8006ac4 <memcpy>
 8000e74:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8000e76:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8000e78:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8000e7a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8000e7c:	47a8      	blx	r5
	moteur1.pwm_start(moteur1.Timer_Forward,moteur1.Channel_Forward);
 8000e7e:	19bb      	adds	r3, r7, r6
 8000e80:	22b8      	movs	r2, #184	; 0xb8
 8000e82:	589d      	ldr	r5, [r3, r2]
 8000e84:	19bb      	adds	r3, r7, r6
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	19bc      	adds	r4, r7, r6
 8000e8a:	930f      	str	r3, [sp, #60]	; 0x3c
 8000e8c:	466b      	mov	r3, sp
 8000e8e:	0018      	movs	r0, r3
 8000e90:	0023      	movs	r3, r4
 8000e92:	3330      	adds	r3, #48	; 0x30
 8000e94:	223c      	movs	r2, #60	; 0x3c
 8000e96:	0019      	movs	r1, r3
 8000e98:	f005 fe14 	bl	8006ac4 <memcpy>
 8000e9c:	6a20      	ldr	r0, [r4, #32]
 8000e9e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000ea0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ea2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000ea4:	47a8      	blx	r5

	moteur2.sens = 1;
 8000ea6:	4b72      	ldr	r3, [pc, #456]	; (8001070 <main+0x2b0>)
 8000ea8:	26c8      	movs	r6, #200	; 0xc8
 8000eaa:	0076      	lsls	r6, r6, #1
 8000eac:	199b      	adds	r3, r3, r6
 8000eae:	19db      	adds	r3, r3, r7
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	609a      	str	r2, [r3, #8]
	moteur2.alpha = alpha_test;
 8000eb4:	4b6d      	ldr	r3, [pc, #436]	; (800106c <main+0x2ac>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b6d      	ldr	r3, [pc, #436]	; (8001070 <main+0x2b0>)
 8000eba:	199b      	adds	r3, r3, r6
 8000ebc:	19db      	adds	r3, r3, r7
 8000ebe:	60da      	str	r2, [r3, #12]
	moteur2.update(moteur2);
 8000ec0:	4b6b      	ldr	r3, [pc, #428]	; (8001070 <main+0x2b0>)
 8000ec2:	199b      	adds	r3, r3, r6
 8000ec4:	19db      	adds	r3, r3, r7
 8000ec6:	22c0      	movs	r2, #192	; 0xc0
 8000ec8:	589d      	ldr	r5, [r3, r2]
 8000eca:	4b69      	ldr	r3, [pc, #420]	; (8001070 <main+0x2b0>)
 8000ecc:	199b      	adds	r3, r3, r6
 8000ece:	19dc      	adds	r4, r3, r7
 8000ed0:	466b      	mov	r3, sp
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	0023      	movs	r3, r4
 8000ed6:	3310      	adds	r3, #16
 8000ed8:	22b4      	movs	r2, #180	; 0xb4
 8000eda:	0019      	movs	r1, r3
 8000edc:	f005 fdf2 	bl	8006ac4 <memcpy>
 8000ee0:	6820      	ldr	r0, [r4, #0]
 8000ee2:	6861      	ldr	r1, [r4, #4]
 8000ee4:	68a2      	ldr	r2, [r4, #8]
 8000ee6:	68e3      	ldr	r3, [r4, #12]
 8000ee8:	47a8      	blx	r5

	moteur2.pwm_start(moteur2.Timer_Backward,moteur2.Channel_Backward);
 8000eea:	4b61      	ldr	r3, [pc, #388]	; (8001070 <main+0x2b0>)
 8000eec:	199b      	adds	r3, r3, r6
 8000eee:	19db      	adds	r3, r3, r7
 8000ef0:	22b8      	movs	r2, #184	; 0xb8
 8000ef2:	589d      	ldr	r5, [r3, r2]
 8000ef4:	4b5e      	ldr	r3, [pc, #376]	; (8001070 <main+0x2b0>)
 8000ef6:	199b      	adds	r3, r3, r6
 8000ef8:	19db      	adds	r3, r3, r7
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	4a5c      	ldr	r2, [pc, #368]	; (8001070 <main+0x2b0>)
 8000efe:	1992      	adds	r2, r2, r6
 8000f00:	19d4      	adds	r4, r2, r7
 8000f02:	930f      	str	r3, [sp, #60]	; 0x3c
 8000f04:	466b      	mov	r3, sp
 8000f06:	0018      	movs	r0, r3
 8000f08:	0023      	movs	r3, r4
 8000f0a:	337c      	adds	r3, #124	; 0x7c
 8000f0c:	223c      	movs	r2, #60	; 0x3c
 8000f0e:	0019      	movs	r1, r3
 8000f10:	f005 fdd8 	bl	8006ac4 <memcpy>
 8000f14:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8000f16:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8000f18:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8000f1a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8000f1c:	47a8      	blx	r5
	moteur2.pwm_start(moteur2.Timer_Forward,moteur2.Channel_Forward);
 8000f1e:	4b54      	ldr	r3, [pc, #336]	; (8001070 <main+0x2b0>)
 8000f20:	199b      	adds	r3, r3, r6
 8000f22:	19db      	adds	r3, r3, r7
 8000f24:	22b8      	movs	r2, #184	; 0xb8
 8000f26:	589d      	ldr	r5, [r3, r2]
 8000f28:	4b51      	ldr	r3, [pc, #324]	; (8001070 <main+0x2b0>)
 8000f2a:	199b      	adds	r3, r3, r6
 8000f2c:	19db      	adds	r3, r3, r7
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a4f      	ldr	r2, [pc, #316]	; (8001070 <main+0x2b0>)
 8000f32:	1992      	adds	r2, r2, r6
 8000f34:	19d4      	adds	r4, r2, r7
 8000f36:	930f      	str	r3, [sp, #60]	; 0x3c
 8000f38:	466b      	mov	r3, sp
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	0023      	movs	r3, r4
 8000f3e:	3330      	adds	r3, #48	; 0x30
 8000f40:	223c      	movs	r2, #60	; 0x3c
 8000f42:	0019      	movs	r1, r3
 8000f44:	f005 fdbe 	bl	8006ac4 <memcpy>
 8000f48:	6a20      	ldr	r0, [r4, #32]
 8000f4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000f4c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000f50:	47a8      	blx	r5

	for (alpha_test; alpha_test<1000; alpha_test++){
 8000f52:	e03a      	b.n	8000fca <main+0x20a>
		moteur1.alpha = alpha_test;
 8000f54:	4b45      	ldr	r3, [pc, #276]	; (800106c <main+0x2ac>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	21c4      	movs	r1, #196	; 0xc4
 8000f5a:	187b      	adds	r3, r7, r1
 8000f5c:	60da      	str	r2, [r3, #12]
		moteur1.update(moteur1);
 8000f5e:	187b      	adds	r3, r7, r1
 8000f60:	22c0      	movs	r2, #192	; 0xc0
 8000f62:	589d      	ldr	r5, [r3, r2]
 8000f64:	187c      	adds	r4, r7, r1
 8000f66:	466b      	mov	r3, sp
 8000f68:	0018      	movs	r0, r3
 8000f6a:	0023      	movs	r3, r4
 8000f6c:	3310      	adds	r3, #16
 8000f6e:	22b4      	movs	r2, #180	; 0xb4
 8000f70:	0019      	movs	r1, r3
 8000f72:	f005 fda7 	bl	8006ac4 <memcpy>
 8000f76:	6820      	ldr	r0, [r4, #0]
 8000f78:	6861      	ldr	r1, [r4, #4]
 8000f7a:	68a2      	ldr	r2, [r4, #8]
 8000f7c:	68e3      	ldr	r3, [r4, #12]
 8000f7e:	47a8      	blx	r5
		moteur2.alpha = alpha_test;
 8000f80:	4b3a      	ldr	r3, [pc, #232]	; (800106c <main+0x2ac>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	4b3a      	ldr	r3, [pc, #232]	; (8001070 <main+0x2b0>)
 8000f86:	21c8      	movs	r1, #200	; 0xc8
 8000f88:	0049      	lsls	r1, r1, #1
 8000f8a:	185b      	adds	r3, r3, r1
 8000f8c:	19db      	adds	r3, r3, r7
 8000f8e:	60da      	str	r2, [r3, #12]
		moteur2.update(moteur2);
 8000f90:	4b37      	ldr	r3, [pc, #220]	; (8001070 <main+0x2b0>)
 8000f92:	185b      	adds	r3, r3, r1
 8000f94:	19db      	adds	r3, r3, r7
 8000f96:	22c0      	movs	r2, #192	; 0xc0
 8000f98:	589d      	ldr	r5, [r3, r2]
 8000f9a:	4b35      	ldr	r3, [pc, #212]	; (8001070 <main+0x2b0>)
 8000f9c:	185b      	adds	r3, r3, r1
 8000f9e:	19dc      	adds	r4, r3, r7
 8000fa0:	466b      	mov	r3, sp
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	0023      	movs	r3, r4
 8000fa6:	3310      	adds	r3, #16
 8000fa8:	22b4      	movs	r2, #180	; 0xb4
 8000faa:	0019      	movs	r1, r3
 8000fac:	f005 fd8a 	bl	8006ac4 <memcpy>
 8000fb0:	6820      	ldr	r0, [r4, #0]
 8000fb2:	6861      	ldr	r1, [r4, #4]
 8000fb4:	68a2      	ldr	r2, [r4, #8]
 8000fb6:	68e3      	ldr	r3, [r4, #12]
 8000fb8:	47a8      	blx	r5
		HAL_Delay(5);
 8000fba:	2005      	movs	r0, #5
 8000fbc:	f001 f9d4 	bl	8002368 <HAL_Delay>
	for (alpha_test; alpha_test<1000; alpha_test++){
 8000fc0:	4b2a      	ldr	r3, [pc, #168]	; (800106c <main+0x2ac>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	1c5a      	adds	r2, r3, #1
 8000fc6:	4b29      	ldr	r3, [pc, #164]	; (800106c <main+0x2ac>)
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	4b28      	ldr	r3, [pc, #160]	; (800106c <main+0x2ac>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	23fa      	movs	r3, #250	; 0xfa
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	dbbe      	blt.n	8000f54 <main+0x194>
	}

	for (alpha_test; alpha_test>0; alpha_test--){
 8000fd6:	e03a      	b.n	800104e <main+0x28e>
		moteur1.alpha = alpha_test;
 8000fd8:	4b24      	ldr	r3, [pc, #144]	; (800106c <main+0x2ac>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	21c4      	movs	r1, #196	; 0xc4
 8000fde:	187b      	adds	r3, r7, r1
 8000fe0:	60da      	str	r2, [r3, #12]
		moteur1.update(moteur1);
 8000fe2:	187b      	adds	r3, r7, r1
 8000fe4:	22c0      	movs	r2, #192	; 0xc0
 8000fe6:	589d      	ldr	r5, [r3, r2]
 8000fe8:	187c      	adds	r4, r7, r1
 8000fea:	466b      	mov	r3, sp
 8000fec:	0018      	movs	r0, r3
 8000fee:	0023      	movs	r3, r4
 8000ff0:	3310      	adds	r3, #16
 8000ff2:	22b4      	movs	r2, #180	; 0xb4
 8000ff4:	0019      	movs	r1, r3
 8000ff6:	f005 fd65 	bl	8006ac4 <memcpy>
 8000ffa:	6820      	ldr	r0, [r4, #0]
 8000ffc:	6861      	ldr	r1, [r4, #4]
 8000ffe:	68a2      	ldr	r2, [r4, #8]
 8001000:	68e3      	ldr	r3, [r4, #12]
 8001002:	47a8      	blx	r5
		moteur2.alpha = alpha_test;
 8001004:	4b19      	ldr	r3, [pc, #100]	; (800106c <main+0x2ac>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b19      	ldr	r3, [pc, #100]	; (8001070 <main+0x2b0>)
 800100a:	21c8      	movs	r1, #200	; 0xc8
 800100c:	0049      	lsls	r1, r1, #1
 800100e:	185b      	adds	r3, r3, r1
 8001010:	19db      	adds	r3, r3, r7
 8001012:	60da      	str	r2, [r3, #12]
		moteur2.update(moteur2);
 8001014:	4b16      	ldr	r3, [pc, #88]	; (8001070 <main+0x2b0>)
 8001016:	185b      	adds	r3, r3, r1
 8001018:	19db      	adds	r3, r3, r7
 800101a:	22c0      	movs	r2, #192	; 0xc0
 800101c:	589d      	ldr	r5, [r3, r2]
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <main+0x2b0>)
 8001020:	185b      	adds	r3, r3, r1
 8001022:	19dc      	adds	r4, r3, r7
 8001024:	466b      	mov	r3, sp
 8001026:	0018      	movs	r0, r3
 8001028:	0023      	movs	r3, r4
 800102a:	3310      	adds	r3, #16
 800102c:	22b4      	movs	r2, #180	; 0xb4
 800102e:	0019      	movs	r1, r3
 8001030:	f005 fd48 	bl	8006ac4 <memcpy>
 8001034:	6820      	ldr	r0, [r4, #0]
 8001036:	6861      	ldr	r1, [r4, #4]
 8001038:	68a2      	ldr	r2, [r4, #8]
 800103a:	68e3      	ldr	r3, [r4, #12]
 800103c:	47a8      	blx	r5
		HAL_Delay(5);
 800103e:	2005      	movs	r0, #5
 8001040:	f001 f992 	bl	8002368 <HAL_Delay>
	for (alpha_test; alpha_test>0; alpha_test--){
 8001044:	4b09      	ldr	r3, [pc, #36]	; (800106c <main+0x2ac>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	1e5a      	subs	r2, r3, #1
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <main+0x2ac>)
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	4b07      	ldr	r3, [pc, #28]	; (800106c <main+0x2ac>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	dcc0      	bgt.n	8000fd8 <main+0x218>
	}

	moteur1.sens = 2;
 8001056:	23c4      	movs	r3, #196	; 0xc4
 8001058:	18fb      	adds	r3, r7, r3
 800105a:	2202      	movs	r2, #2
 800105c:	609a      	str	r2, [r3, #8]
	for (alpha_test; alpha_test<1000; alpha_test++){
 800105e:	e044      	b.n	80010ea <main+0x32a>
 8001060:	fffffdb4 	.word	0xfffffdb4
 8001064:	20000038 	.word	0x20000038
 8001068:	20000230 	.word	0x20000230
 800106c:	20000000 	.word	0x20000000
 8001070:	fffffe70 	.word	0xfffffe70
		moteur1.alpha = alpha_test;
 8001074:	4b98      	ldr	r3, [pc, #608]	; (80012d8 <main+0x518>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	21c4      	movs	r1, #196	; 0xc4
 800107a:	187b      	adds	r3, r7, r1
 800107c:	60da      	str	r2, [r3, #12]
		moteur1.update(moteur1);
 800107e:	187b      	adds	r3, r7, r1
 8001080:	22c0      	movs	r2, #192	; 0xc0
 8001082:	589d      	ldr	r5, [r3, r2]
 8001084:	187c      	adds	r4, r7, r1
 8001086:	466b      	mov	r3, sp
 8001088:	0018      	movs	r0, r3
 800108a:	0023      	movs	r3, r4
 800108c:	3310      	adds	r3, #16
 800108e:	22b4      	movs	r2, #180	; 0xb4
 8001090:	0019      	movs	r1, r3
 8001092:	f005 fd17 	bl	8006ac4 <memcpy>
 8001096:	6820      	ldr	r0, [r4, #0]
 8001098:	6861      	ldr	r1, [r4, #4]
 800109a:	68a2      	ldr	r2, [r4, #8]
 800109c:	68e3      	ldr	r3, [r4, #12]
 800109e:	47a8      	blx	r5
		moteur2.alpha = alpha_test;
 80010a0:	4b8d      	ldr	r3, [pc, #564]	; (80012d8 <main+0x518>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b8d      	ldr	r3, [pc, #564]	; (80012dc <main+0x51c>)
 80010a6:	21c8      	movs	r1, #200	; 0xc8
 80010a8:	0049      	lsls	r1, r1, #1
 80010aa:	185b      	adds	r3, r3, r1
 80010ac:	19db      	adds	r3, r3, r7
 80010ae:	60da      	str	r2, [r3, #12]
		moteur2.update(moteur2);
 80010b0:	4b8a      	ldr	r3, [pc, #552]	; (80012dc <main+0x51c>)
 80010b2:	185b      	adds	r3, r3, r1
 80010b4:	19db      	adds	r3, r3, r7
 80010b6:	22c0      	movs	r2, #192	; 0xc0
 80010b8:	589d      	ldr	r5, [r3, r2]
 80010ba:	4b88      	ldr	r3, [pc, #544]	; (80012dc <main+0x51c>)
 80010bc:	185b      	adds	r3, r3, r1
 80010be:	19dc      	adds	r4, r3, r7
 80010c0:	466b      	mov	r3, sp
 80010c2:	0018      	movs	r0, r3
 80010c4:	0023      	movs	r3, r4
 80010c6:	3310      	adds	r3, #16
 80010c8:	22b4      	movs	r2, #180	; 0xb4
 80010ca:	0019      	movs	r1, r3
 80010cc:	f005 fcfa 	bl	8006ac4 <memcpy>
 80010d0:	6820      	ldr	r0, [r4, #0]
 80010d2:	6861      	ldr	r1, [r4, #4]
 80010d4:	68a2      	ldr	r2, [r4, #8]
 80010d6:	68e3      	ldr	r3, [r4, #12]
 80010d8:	47a8      	blx	r5
		HAL_Delay(5);
 80010da:	2005      	movs	r0, #5
 80010dc:	f001 f944 	bl	8002368 <HAL_Delay>
	for (alpha_test; alpha_test<1000; alpha_test++){
 80010e0:	4b7d      	ldr	r3, [pc, #500]	; (80012d8 <main+0x518>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	1c5a      	adds	r2, r3, #1
 80010e6:	4b7c      	ldr	r3, [pc, #496]	; (80012d8 <main+0x518>)
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	4b7b      	ldr	r3, [pc, #492]	; (80012d8 <main+0x518>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	23fa      	movs	r3, #250	; 0xfa
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	429a      	cmp	r2, r3
 80010f4:	dbbe      	blt.n	8001074 <main+0x2b4>
	}


	moteur1.pwm_stop(moteur1.Timer_Backward,moteur1.Channel_Backward);
 80010f6:	26c4      	movs	r6, #196	; 0xc4
 80010f8:	19bb      	adds	r3, r7, r6
 80010fa:	22bc      	movs	r2, #188	; 0xbc
 80010fc:	589d      	ldr	r5, [r3, r2]
 80010fe:	19bb      	adds	r3, r7, r6
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	19bc      	adds	r4, r7, r6
 8001104:	930f      	str	r3, [sp, #60]	; 0x3c
 8001106:	466b      	mov	r3, sp
 8001108:	0018      	movs	r0, r3
 800110a:	0023      	movs	r3, r4
 800110c:	337c      	adds	r3, #124	; 0x7c
 800110e:	223c      	movs	r2, #60	; 0x3c
 8001110:	0019      	movs	r1, r3
 8001112:	f005 fcd7 	bl	8006ac4 <memcpy>
 8001116:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001118:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800111a:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800111c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800111e:	47a8      	blx	r5
	moteur1.pwm_stop(moteur1.Timer_Forward,moteur1.Channel_Forward);
 8001120:	19bb      	adds	r3, r7, r6
 8001122:	22bc      	movs	r2, #188	; 0xbc
 8001124:	589d      	ldr	r5, [r3, r2]
 8001126:	19bb      	adds	r3, r7, r6
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	19bc      	adds	r4, r7, r6
 800112c:	930f      	str	r3, [sp, #60]	; 0x3c
 800112e:	466b      	mov	r3, sp
 8001130:	0018      	movs	r0, r3
 8001132:	0023      	movs	r3, r4
 8001134:	3330      	adds	r3, #48	; 0x30
 8001136:	223c      	movs	r2, #60	; 0x3c
 8001138:	0019      	movs	r1, r3
 800113a:	f005 fcc3 	bl	8006ac4 <memcpy>
 800113e:	6a20      	ldr	r0, [r4, #32]
 8001140:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001142:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001144:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001146:	47a8      	blx	r5
	moteur2.pwm_stop(moteur2.Timer_Backward,moteur2.Channel_Backward);
 8001148:	4b64      	ldr	r3, [pc, #400]	; (80012dc <main+0x51c>)
 800114a:	26c8      	movs	r6, #200	; 0xc8
 800114c:	0076      	lsls	r6, r6, #1
 800114e:	199b      	adds	r3, r3, r6
 8001150:	19db      	adds	r3, r3, r7
 8001152:	22bc      	movs	r2, #188	; 0xbc
 8001154:	589d      	ldr	r5, [r3, r2]
 8001156:	4b61      	ldr	r3, [pc, #388]	; (80012dc <main+0x51c>)
 8001158:	199b      	adds	r3, r3, r6
 800115a:	19db      	adds	r3, r3, r7
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	4a5f      	ldr	r2, [pc, #380]	; (80012dc <main+0x51c>)
 8001160:	1992      	adds	r2, r2, r6
 8001162:	19d4      	adds	r4, r2, r7
 8001164:	930f      	str	r3, [sp, #60]	; 0x3c
 8001166:	466b      	mov	r3, sp
 8001168:	0018      	movs	r0, r3
 800116a:	0023      	movs	r3, r4
 800116c:	337c      	adds	r3, #124	; 0x7c
 800116e:	223c      	movs	r2, #60	; 0x3c
 8001170:	0019      	movs	r1, r3
 8001172:	f005 fca7 	bl	8006ac4 <memcpy>
 8001176:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001178:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800117a:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800117c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800117e:	47a8      	blx	r5
	moteur2.pwm_stop(moteur2.Timer_Forward,moteur2.Channel_Forward);
 8001180:	4b56      	ldr	r3, [pc, #344]	; (80012dc <main+0x51c>)
 8001182:	199b      	adds	r3, r3, r6
 8001184:	19db      	adds	r3, r3, r7
 8001186:	22bc      	movs	r2, #188	; 0xbc
 8001188:	589d      	ldr	r5, [r3, r2]
 800118a:	4b54      	ldr	r3, [pc, #336]	; (80012dc <main+0x51c>)
 800118c:	199b      	adds	r3, r3, r6
 800118e:	19db      	adds	r3, r3, r7
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a52      	ldr	r2, [pc, #328]	; (80012dc <main+0x51c>)
 8001194:	1992      	adds	r2, r2, r6
 8001196:	19d4      	adds	r4, r2, r7
 8001198:	930f      	str	r3, [sp, #60]	; 0x3c
 800119a:	466b      	mov	r3, sp
 800119c:	0018      	movs	r0, r3
 800119e:	0023      	movs	r3, r4
 80011a0:	3330      	adds	r3, #48	; 0x30
 80011a2:	223c      	movs	r2, #60	; 0x3c
 80011a4:	0019      	movs	r1, r3
 80011a6:	f005 fc8d 	bl	8006ac4 <memcpy>
 80011aa:	6a20      	ldr	r0, [r4, #32]
 80011ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80011ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80011b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80011b2:	47a8      	blx	r5
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		ADC_Select_CH0();
 80011b4:	f7ff fcb4 	bl	8000b20 <ADC_Select_CH0>
		HAL_ADC_Start(&hadc1);
 80011b8:	4b49      	ldr	r3, [pc, #292]	; (80012e0 <main+0x520>)
 80011ba:	0018      	movs	r0, r3
 80011bc:	f001 fc20 	bl	8002a00 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 80011c0:	23fa      	movs	r3, #250	; 0xfa
 80011c2:	009a      	lsls	r2, r3, #2
 80011c4:	4b46      	ldr	r3, [pc, #280]	; (80012e0 <main+0x520>)
 80011c6:	0011      	movs	r1, r2
 80011c8:	0018      	movs	r0, r3
 80011ca:	f001 fca3 	bl	8002b14 <HAL_ADC_PollForConversion>
		ADC_buffer[0] = HAL_ADC_GetValue(&hadc1);
 80011ce:	4b44      	ldr	r3, [pc, #272]	; (80012e0 <main+0x520>)
 80011d0:	0018      	movs	r0, r3
 80011d2:	f001 fd33 	bl	8002c3c <HAL_ADC_GetValue>
 80011d6:	0003      	movs	r3, r0
 80011d8:	b29a      	uxth	r2, r3
 80011da:	4b42      	ldr	r3, [pc, #264]	; (80012e4 <main+0x524>)
 80011dc:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 80011de:	4b40      	ldr	r3, [pc, #256]	; (80012e0 <main+0x520>)
 80011e0:	0018      	movs	r0, r3
 80011e2:	f001 fc5b 	bl	8002a9c <HAL_ADC_Stop>

		HAL_Delay(10);
 80011e6:	200a      	movs	r0, #10
 80011e8:	f001 f8be 	bl	8002368 <HAL_Delay>

		ADC_Select_CH1();
 80011ec:	f7ff fcb8 	bl	8000b60 <ADC_Select_CH1>
		HAL_ADC_Start(&hadc1);
 80011f0:	4b3b      	ldr	r3, [pc, #236]	; (80012e0 <main+0x520>)
 80011f2:	0018      	movs	r0, r3
 80011f4:	f001 fc04 	bl	8002a00 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 80011f8:	23fa      	movs	r3, #250	; 0xfa
 80011fa:	009a      	lsls	r2, r3, #2
 80011fc:	4b38      	ldr	r3, [pc, #224]	; (80012e0 <main+0x520>)
 80011fe:	0011      	movs	r1, r2
 8001200:	0018      	movs	r0, r3
 8001202:	f001 fc87 	bl	8002b14 <HAL_ADC_PollForConversion>
		ADC_buffer[1] = HAL_ADC_GetValue(&hadc1);
 8001206:	4b36      	ldr	r3, [pc, #216]	; (80012e0 <main+0x520>)
 8001208:	0018      	movs	r0, r3
 800120a:	f001 fd17 	bl	8002c3c <HAL_ADC_GetValue>
 800120e:	0003      	movs	r3, r0
 8001210:	b29a      	uxth	r2, r3
 8001212:	4b34      	ldr	r3, [pc, #208]	; (80012e4 <main+0x524>)
 8001214:	805a      	strh	r2, [r3, #2]
		HAL_ADC_Stop(&hadc1);
 8001216:	4b32      	ldr	r3, [pc, #200]	; (80012e0 <main+0x520>)
 8001218:	0018      	movs	r0, r3
 800121a:	f001 fc3f 	bl	8002a9c <HAL_ADC_Stop>
		counter ++;
 800121e:	4b32      	ldr	r3, [pc, #200]	; (80012e8 <main+0x528>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	1c5a      	adds	r2, r3, #1
 8001224:	4b30      	ldr	r3, [pc, #192]	; (80012e8 <main+0x528>)
 8001226:	601a      	str	r2, [r3, #0]
		HAL_Delay(10);
 8001228:	200a      	movs	r0, #10
 800122a:	f001 f89d 	bl	8002368 <HAL_Delay>
		if (counter_val == 10){
 800122e:	4b2f      	ldr	r3, [pc, #188]	; (80012ec <main+0x52c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b0a      	cmp	r3, #10
 8001234:	d142      	bne.n	80012bc <main+0x4fc>
			int temp=0;
 8001236:	2300      	movs	r3, #0
 8001238:	22c6      	movs	r2, #198	; 0xc6
 800123a:	0052      	lsls	r2, r2, #1
 800123c:	18ba      	adds	r2, r7, r2
 800123e:	6013      	str	r3, [r2, #0]
			for (int i = 0 ; i<10;i++){
 8001240:	2300      	movs	r3, #0
 8001242:	22c4      	movs	r2, #196	; 0xc4
 8001244:	0052      	lsls	r2, r2, #1
 8001246:	18ba      	adds	r2, r7, r2
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	e012      	b.n	8001272 <main+0x4b2>
				temp += val[i];
 800124c:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <main+0x530>)
 800124e:	21c4      	movs	r1, #196	; 0xc4
 8001250:	0049      	lsls	r1, r1, #1
 8001252:	187a      	adds	r2, r7, r1
 8001254:	6812      	ldr	r2, [r2, #0]
 8001256:	0092      	lsls	r2, r2, #2
 8001258:	58d3      	ldr	r3, [r2, r3]
 800125a:	20c6      	movs	r0, #198	; 0xc6
 800125c:	0040      	lsls	r0, r0, #1
 800125e:	183a      	adds	r2, r7, r0
 8001260:	6812      	ldr	r2, [r2, #0]
 8001262:	18d3      	adds	r3, r2, r3
 8001264:	183a      	adds	r2, r7, r0
 8001266:	6013      	str	r3, [r2, #0]
			for (int i = 0 ; i<10;i++){
 8001268:	187b      	adds	r3, r7, r1
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	3301      	adds	r3, #1
 800126e:	187a      	adds	r2, r7, r1
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	23c4      	movs	r3, #196	; 0xc4
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	18fb      	adds	r3, r7, r3
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b09      	cmp	r3, #9
 800127c:	dde6      	ble.n	800124c <main+0x48c>
			}
			moyenne_f = temp/10;
 800127e:	23c6      	movs	r3, #198	; 0xc6
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	18fb      	adds	r3, r7, r3
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	210a      	movs	r1, #10
 8001288:	0018      	movs	r0, r3
 800128a:	f7fe ffc3 	bl	8000214 <__divsi3>
 800128e:	0003      	movs	r3, r0
 8001290:	001a      	movs	r2, r3
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <main+0x534>)
 8001294:	601a      	str	r2, [r3, #0]
			courant = (moyenne_f - 2640)*10/25;
 8001296:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <main+0x534>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a17      	ldr	r2, [pc, #92]	; (80012f8 <main+0x538>)
 800129c:	189a      	adds	r2, r3, r2
 800129e:	0013      	movs	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	189b      	adds	r3, r3, r2
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2119      	movs	r1, #25
 80012a8:	0018      	movs	r0, r3
 80012aa:	f7fe ffb3 	bl	8000214 <__divsi3>
 80012ae:	0003      	movs	r3, r0
 80012b0:	001a      	movs	r2, r3
 80012b2:	4b12      	ldr	r3, [pc, #72]	; (80012fc <main+0x53c>)
 80012b4:	601a      	str	r2, [r3, #0]
			counter_val=0;
 80012b6:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <main+0x52c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
		}
		val[counter_val]=ADC_buffer[0];
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <main+0x524>)
 80012be:	8819      	ldrh	r1, [r3, #0]
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <main+0x52c>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <main+0x530>)
 80012c6:	0092      	lsls	r2, r2, #2
 80012c8:	50d1      	str	r1, [r2, r3]
		counter_val++;
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <main+0x52c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	1c5a      	adds	r2, r3, #1
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <main+0x52c>)
 80012d2:	601a      	str	r2, [r3, #0]
	{
 80012d4:	e76e      	b.n	80011b4 <main+0x3f4>
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	20000000 	.word	0x20000000
 80012dc:	fffffe70 	.word	0xfffffe70
 80012e0:	20000038 	.word	0x20000038
 80012e4:	200000f8 	.word	0x200000f8
 80012e8:	200000fc 	.word	0x200000fc
 80012ec:	20000128 	.word	0x20000128
 80012f0:	20000100 	.word	0x20000100
 80012f4:	2000012c 	.word	0x2000012c
 80012f8:	fffff5b0 	.word	0xfffff5b0
 80012fc:	20000130 	.word	0x20000130

08001300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b093      	sub	sp, #76	; 0x4c
 8001304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001306:	2414      	movs	r4, #20
 8001308:	193b      	adds	r3, r7, r4
 800130a:	0018      	movs	r0, r3
 800130c:	2334      	movs	r3, #52	; 0x34
 800130e:	001a      	movs	r2, r3
 8001310:	2100      	movs	r1, #0
 8001312:	f005 fbab 	bl	8006a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	0018      	movs	r0, r3
 800131a:	2310      	movs	r3, #16
 800131c:	001a      	movs	r2, r3
 800131e:	2100      	movs	r1, #0
 8001320:	f005 fba4 	bl	8006a6c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	0018      	movs	r0, r3
 800132a:	f002 fd21 	bl	8003d70 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800132e:	193b      	adds	r3, r7, r4
 8001330:	2202      	movs	r2, #2
 8001332:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001334:	193b      	adds	r3, r7, r4
 8001336:	2280      	movs	r2, #128	; 0x80
 8001338:	0052      	lsls	r2, r2, #1
 800133a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800133c:	0021      	movs	r1, r4
 800133e:	187b      	adds	r3, r7, r1
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001344:	187b      	adds	r3, r7, r1
 8001346:	2240      	movs	r2, #64	; 0x40
 8001348:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134a:	187b      	adds	r3, r7, r1
 800134c:	2202      	movs	r2, #2
 800134e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001350:	187b      	adds	r3, r7, r1
 8001352:	2202      	movs	r2, #2
 8001354:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001356:	187b      	adds	r3, r7, r1
 8001358:	2200      	movs	r2, #0
 800135a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800135c:	187b      	adds	r3, r7, r1
 800135e:	2208      	movs	r2, #8
 8001360:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001362:	187b      	adds	r3, r7, r1
 8001364:	2280      	movs	r2, #128	; 0x80
 8001366:	0292      	lsls	r2, r2, #10
 8001368:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800136a:	187b      	adds	r3, r7, r1
 800136c:	2280      	movs	r2, #128	; 0x80
 800136e:	0592      	lsls	r2, r2, #22
 8001370:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001372:	187b      	adds	r3, r7, r1
 8001374:	0018      	movs	r0, r3
 8001376:	f002 fd47 	bl	8003e08 <HAL_RCC_OscConfig>
 800137a:	1e03      	subs	r3, r0, #0
 800137c:	d001      	beq.n	8001382 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800137e:	f000 f819 	bl	80013b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	2207      	movs	r2, #7
 8001386:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	2202      	movs	r2, #2
 800138c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2102      	movs	r1, #2
 800139e:	0018      	movs	r0, r3
 80013a0:	f003 f842 	bl	8004428 <HAL_RCC_ClockConfig>
 80013a4:	1e03      	subs	r3, r0, #0
 80013a6:	d001      	beq.n	80013ac <SystemClock_Config+0xac>
  {
    Error_Handler();
 80013a8:	f000 f804 	bl	80013b4 <Error_Handler>
  }
}
 80013ac:	46c0      	nop			; (mov r8, r8)
 80013ae:	46bd      	mov	sp, r7
 80013b0:	b013      	add	sp, #76	; 0x4c
 80013b2:	bd90      	pop	{r4, r7, pc}

080013b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b8:	b672      	cpsid	i
}
 80013ba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80013bc:	e7fe      	b.n	80013bc <Error_Handler+0x8>
	...

080013c0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80013c4:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <MX_SPI1_Init+0x74>)
 80013c6:	4a1c      	ldr	r2, [pc, #112]	; (8001438 <MX_SPI1_Init+0x78>)
 80013c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013ca:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <MX_SPI1_Init+0x74>)
 80013cc:	2282      	movs	r2, #130	; 0x82
 80013ce:	0052      	lsls	r2, r2, #1
 80013d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013d2:	4b18      	ldr	r3, [pc, #96]	; (8001434 <MX_SPI1_Init+0x74>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80013d8:	4b16      	ldr	r3, [pc, #88]	; (8001434 <MX_SPI1_Init+0x74>)
 80013da:	22c0      	movs	r2, #192	; 0xc0
 80013dc:	0092      	lsls	r2, r2, #2
 80013de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013e0:	4b14      	ldr	r3, [pc, #80]	; (8001434 <MX_SPI1_Init+0x74>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <MX_SPI1_Init+0x74>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <MX_SPI1_Init+0x74>)
 80013ee:	2280      	movs	r2, #128	; 0x80
 80013f0:	0092      	lsls	r2, r2, #2
 80013f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <MX_SPI1_Init+0x74>)
 80013f6:	2210      	movs	r2, #16
 80013f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <MX_SPI1_Init+0x74>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <MX_SPI1_Init+0x74>)
 8001402:	2200      	movs	r2, #0
 8001404:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <MX_SPI1_Init+0x74>)
 8001408:	2200      	movs	r2, #0
 800140a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800140c:	4b09      	ldr	r3, [pc, #36]	; (8001434 <MX_SPI1_Init+0x74>)
 800140e:	2207      	movs	r2, #7
 8001410:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001412:	4b08      	ldr	r3, [pc, #32]	; (8001434 <MX_SPI1_Init+0x74>)
 8001414:	2200      	movs	r2, #0
 8001416:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <MX_SPI1_Init+0x74>)
 800141a:	2208      	movs	r2, #8
 800141c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800141e:	4b05      	ldr	r3, [pc, #20]	; (8001434 <MX_SPI1_Init+0x74>)
 8001420:	0018      	movs	r0, r3
 8001422:	f003 fadd 	bl	80049e0 <HAL_SPI_Init>
 8001426:	1e03      	subs	r3, r0, #0
 8001428:	d001      	beq.n	800142e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800142a:	f7ff ffc3 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000134 	.word	0x20000134
 8001438:	40013000 	.word	0x40013000

0800143c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800143c:	b590      	push	{r4, r7, lr}
 800143e:	b08b      	sub	sp, #44	; 0x2c
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	2414      	movs	r4, #20
 8001446:	193b      	adds	r3, r7, r4
 8001448:	0018      	movs	r0, r3
 800144a:	2314      	movs	r3, #20
 800144c:	001a      	movs	r2, r3
 800144e:	2100      	movs	r1, #0
 8001450:	f005 fb0c 	bl	8006a6c <memset>
  if(spiHandle->Instance==SPI1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a1b      	ldr	r2, [pc, #108]	; (80014c8 <HAL_SPI_MspInit+0x8c>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d130      	bne.n	80014c0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800145e:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <HAL_SPI_MspInit+0x90>)
 8001460:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001462:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <HAL_SPI_MspInit+0x90>)
 8001464:	2180      	movs	r1, #128	; 0x80
 8001466:	0149      	lsls	r1, r1, #5
 8001468:	430a      	orrs	r2, r1
 800146a:	641a      	str	r2, [r3, #64]	; 0x40
 800146c:	4b17      	ldr	r3, [pc, #92]	; (80014cc <HAL_SPI_MspInit+0x90>)
 800146e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001470:	2380      	movs	r3, #128	; 0x80
 8001472:	015b      	lsls	r3, r3, #5
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147a:	4b14      	ldr	r3, [pc, #80]	; (80014cc <HAL_SPI_MspInit+0x90>)
 800147c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <HAL_SPI_MspInit+0x90>)
 8001480:	2101      	movs	r1, #1
 8001482:	430a      	orrs	r2, r1
 8001484:	635a      	str	r2, [r3, #52]	; 0x34
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <HAL_SPI_MspInit+0x90>)
 8001488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800148a:	2201      	movs	r2, #1
 800148c:	4013      	ands	r3, r2
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA2     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    PA11 [PA9]     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_11;
 8001492:	0021      	movs	r1, r4
 8001494:	187b      	adds	r3, r7, r1
 8001496:	4a0e      	ldr	r2, [pc, #56]	; (80014d0 <HAL_SPI_MspInit+0x94>)
 8001498:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	187b      	adds	r3, r7, r1
 800149c:	2202      	movs	r2, #2
 800149e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	187b      	adds	r3, r7, r1
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	187b      	adds	r3, r7, r1
 80014a8:	2200      	movs	r2, #0
 80014aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80014ac:	187b      	adds	r3, r7, r1
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b2:	187a      	adds	r2, r7, r1
 80014b4:	23a0      	movs	r3, #160	; 0xa0
 80014b6:	05db      	lsls	r3, r3, #23
 80014b8:	0011      	movs	r1, r2
 80014ba:	0018      	movs	r0, r3
 80014bc:	f002 fa88 	bl	80039d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80014c0:	46c0      	nop			; (mov r8, r8)
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b00b      	add	sp, #44	; 0x2c
 80014c6:	bd90      	pop	{r4, r7, pc}
 80014c8:	40013000 	.word	0x40013000
 80014cc:	40021000 	.word	0x40021000
 80014d0:	00000824 	.word	0x00000824

080014d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <HAL_MspInit+0x4c>)
 80014dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <HAL_MspInit+0x4c>)
 80014e0:	2101      	movs	r1, #1
 80014e2:	430a      	orrs	r2, r1
 80014e4:	641a      	str	r2, [r3, #64]	; 0x40
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <HAL_MspInit+0x4c>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	2201      	movs	r2, #1
 80014ec:	4013      	ands	r3, r2
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <HAL_MspInit+0x4c>)
 80014f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <HAL_MspInit+0x4c>)
 80014f8:	2180      	movs	r1, #128	; 0x80
 80014fa:	0549      	lsls	r1, r1, #21
 80014fc:	430a      	orrs	r2, r1
 80014fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001500:	4b07      	ldr	r3, [pc, #28]	; (8001520 <HAL_MspInit+0x4c>)
 8001502:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001504:	2380      	movs	r3, #128	; 0x80
 8001506:	055b      	lsls	r3, r3, #21
 8001508:	4013      	ands	r3, r2
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800150e:	23c0      	movs	r3, #192	; 0xc0
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	0018      	movs	r0, r3
 8001514:	f000 ff4c 	bl	80023b0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001518:	46c0      	nop			; (mov r8, r8)
 800151a:	46bd      	mov	sp, r7
 800151c:	b002      	add	sp, #8
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40021000 	.word	0x40021000

08001524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <NMI_Handler+0x4>

0800152a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <HardFault_Handler+0x4>

08001530 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001534:	46c0      	nop			; (mov r8, r8)
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001548:	f000 fef2 	bl	8002330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800154c:	46c0      	nop			; (mov r8, r8)
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Bouton1_Pin);
 8001556:	2001      	movs	r0, #1
 8001558:	f002 fbd6 	bl	8003d08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800155c:	46c0      	nop			; (mov r8, r8)
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Bouton2_Pin);
 8001566:	2008      	movs	r0, #8
 8001568:	f002 fbce 	bl	8003d08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800156c:	46c0      	nop			; (mov r8, r8)
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Bouton3_Pin);
 8001576:	2010      	movs	r0, #16
 8001578:	f002 fbc6 	bl	8003d08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Contact4_Pin);
 800157c:	2020      	movs	r0, #32
 800157e:	f002 fbc3 	bl	8003d08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Bordure1_Pin);
 8001582:	2380      	movs	r3, #128	; 0x80
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	0018      	movs	r0, r3
 8001588:	f002 fbbe 	bl	8003d08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Bordure2_Pin);
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	0018      	movs	r0, r3
 8001592:	f002 fbb9 	bl	8003d08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Contact1_Pin);
 8001596:	2380      	movs	r3, #128	; 0x80
 8001598:	019b      	lsls	r3, r3, #6
 800159a:	0018      	movs	r0, r3
 800159c:	f002 fbb4 	bl	8003d08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Contact2_Pin);
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	01db      	lsls	r3, r3, #7
 80015a4:	0018      	movs	r0, r3
 80015a6:	f002 fbaf 	bl	8003d08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Contact3_Pin);
 80015aa:	2380      	movs	r3, #128	; 0x80
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	0018      	movs	r0, r3
 80015b0:	f002 fbaa 	bl	8003d08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80015b4:	46c0      	nop			; (mov r8, r8)
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015c0:	4b03      	ldr	r3, [pc, #12]	; (80015d0 <DMA1_Channel1_IRQHandler+0x14>)
 80015c2:	0018      	movs	r0, r3
 80015c4:	f002 f902 	bl	80037cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015c8:	46c0      	nop			; (mov r8, r8)
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	2000009c 	.word	0x2000009c

080015d4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <TIM1_CC_IRQHandler+0x14>)
 80015da:	0018      	movs	r0, r3
 80015dc:	f003 fe92 	bl	8005304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80015e0:	46c0      	nop			; (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	20000198 	.word	0x20000198

080015ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <TIM3_IRQHandler+0x14>)
 80015f2:	0018      	movs	r0, r3
 80015f4:	f003 fe86 	bl	8005304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015f8:	46c0      	nop			; (mov r8, r8)
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	200001e4 	.word	0x200001e4

08001604 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001608:	46c0      	nop			; (mov r8, r8)
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b08d      	sub	sp, #52	; 0x34
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001616:	240c      	movs	r4, #12
 8001618:	193b      	adds	r3, r7, r4
 800161a:	0018      	movs	r0, r3
 800161c:	2324      	movs	r3, #36	; 0x24
 800161e:	001a      	movs	r2, r3
 8001620:	2100      	movs	r1, #0
 8001622:	f005 fa23 	bl	8006a6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001626:	003b      	movs	r3, r7
 8001628:	0018      	movs	r0, r3
 800162a:	230c      	movs	r3, #12
 800162c:	001a      	movs	r2, r3
 800162e:	2100      	movs	r1, #0
 8001630:	f005 fa1c 	bl	8006a6c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001634:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <MX_TIM1_Init+0xc8>)
 8001636:	4a29      	ldr	r2, [pc, #164]	; (80016dc <MX_TIM1_Init+0xcc>)
 8001638:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800163a:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <MX_TIM1_Init+0xc8>)
 800163c:	2200      	movs	r2, #0
 800163e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001640:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <MX_TIM1_Init+0xc8>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001646:	4b24      	ldr	r3, [pc, #144]	; (80016d8 <MX_TIM1_Init+0xc8>)
 8001648:	4a25      	ldr	r2, [pc, #148]	; (80016e0 <MX_TIM1_Init+0xd0>)
 800164a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164c:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <MX_TIM1_Init+0xc8>)
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001652:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <MX_TIM1_Init+0xc8>)
 8001654:	2200      	movs	r2, #0
 8001656:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001658:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <MX_TIM1_Init+0xc8>)
 800165a:	2200      	movs	r2, #0
 800165c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800165e:	0021      	movs	r1, r4
 8001660:	187b      	adds	r3, r7, r1
 8001662:	2203      	movs	r2, #3
 8001664:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001666:	187b      	adds	r3, r7, r1
 8001668:	2202      	movs	r2, #2
 800166a:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800166c:	187b      	adds	r3, r7, r1
 800166e:	2201      	movs	r2, #1
 8001670:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001672:	187b      	adds	r3, r7, r1
 8001674:	2200      	movs	r2, #0
 8001676:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8001678:	187b      	adds	r3, r7, r1
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800167e:	187b      	adds	r3, r7, r1
 8001680:	2202      	movs	r2, #2
 8001682:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001684:	187b      	adds	r3, r7, r1
 8001686:	2201      	movs	r2, #1
 8001688:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800168a:	187b      	adds	r3, r7, r1
 800168c:	2200      	movs	r2, #0
 800168e:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8001690:	187b      	adds	r3, r7, r1
 8001692:	2200      	movs	r2, #0
 8001694:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001696:	187a      	adds	r2, r7, r1
 8001698:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <MX_TIM1_Init+0xc8>)
 800169a:	0011      	movs	r1, r2
 800169c:	0018      	movs	r0, r3
 800169e:	f003 fcc5 	bl	800502c <HAL_TIM_Encoder_Init>
 80016a2:	1e03      	subs	r3, r0, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80016a6:	f7ff fe85 	bl	80013b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016aa:	003b      	movs	r3, r7
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016b0:	003b      	movs	r3, r7
 80016b2:	2200      	movs	r2, #0
 80016b4:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b6:	003b      	movs	r3, r7
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016bc:	003a      	movs	r2, r7
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <MX_TIM1_Init+0xc8>)
 80016c0:	0011      	movs	r1, r2
 80016c2:	0018      	movs	r0, r3
 80016c4:	f004 fbce 	bl	8005e64 <HAL_TIMEx_MasterConfigSynchronization>
 80016c8:	1e03      	subs	r3, r0, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80016cc:	f7ff fe72 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016d0:	46c0      	nop			; (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b00d      	add	sp, #52	; 0x34
 80016d6:	bd90      	pop	{r4, r7, pc}
 80016d8:	20000198 	.word	0x20000198
 80016dc:	40012c00 	.word	0x40012c00
 80016e0:	0000ffff 	.word	0x0000ffff

080016e4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016e4:	b590      	push	{r4, r7, lr}
 80016e6:	b08d      	sub	sp, #52	; 0x34
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016ea:	240c      	movs	r4, #12
 80016ec:	193b      	adds	r3, r7, r4
 80016ee:	0018      	movs	r0, r3
 80016f0:	2324      	movs	r3, #36	; 0x24
 80016f2:	001a      	movs	r2, r3
 80016f4:	2100      	movs	r1, #0
 80016f6:	f005 f9b9 	bl	8006a6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016fa:	003b      	movs	r3, r7
 80016fc:	0018      	movs	r0, r3
 80016fe:	230c      	movs	r3, #12
 8001700:	001a      	movs	r2, r3
 8001702:	2100      	movs	r1, #0
 8001704:	f005 f9b2 	bl	8006a6c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001708:	4b25      	ldr	r3, [pc, #148]	; (80017a0 <MX_TIM3_Init+0xbc>)
 800170a:	4a26      	ldr	r2, [pc, #152]	; (80017a4 <MX_TIM3_Init+0xc0>)
 800170c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800170e:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <MX_TIM3_Init+0xbc>)
 8001710:	2200      	movs	r2, #0
 8001712:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001714:	4b22      	ldr	r3, [pc, #136]	; (80017a0 <MX_TIM3_Init+0xbc>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800171a:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <MX_TIM3_Init+0xbc>)
 800171c:	4a22      	ldr	r2, [pc, #136]	; (80017a8 <MX_TIM3_Init+0xc4>)
 800171e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001720:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <MX_TIM3_Init+0xbc>)
 8001722:	2200      	movs	r2, #0
 8001724:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001726:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <MX_TIM3_Init+0xbc>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800172c:	0021      	movs	r1, r4
 800172e:	187b      	adds	r3, r7, r1
 8001730:	2203      	movs	r2, #3
 8001732:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001734:	187b      	adds	r3, r7, r1
 8001736:	2202      	movs	r2, #2
 8001738:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800173a:	187b      	adds	r3, r7, r1
 800173c:	2201      	movs	r2, #1
 800173e:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001740:	187b      	adds	r3, r7, r1
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8001746:	187b      	adds	r3, r7, r1
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800174c:	187b      	adds	r3, r7, r1
 800174e:	2202      	movs	r2, #2
 8001750:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001752:	187b      	adds	r3, r7, r1
 8001754:	2201      	movs	r2, #1
 8001756:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001758:	187b      	adds	r3, r7, r1
 800175a:	2200      	movs	r2, #0
 800175c:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 800175e:	187b      	adds	r3, r7, r1
 8001760:	2200      	movs	r2, #0
 8001762:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001764:	187a      	adds	r2, r7, r1
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <MX_TIM3_Init+0xbc>)
 8001768:	0011      	movs	r1, r2
 800176a:	0018      	movs	r0, r3
 800176c:	f003 fc5e 	bl	800502c <HAL_TIM_Encoder_Init>
 8001770:	1e03      	subs	r3, r0, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001774:	f7ff fe1e 	bl	80013b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001778:	003b      	movs	r3, r7
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177e:	003b      	movs	r3, r7
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001784:	003a      	movs	r2, r7
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <MX_TIM3_Init+0xbc>)
 8001788:	0011      	movs	r1, r2
 800178a:	0018      	movs	r0, r3
 800178c:	f004 fb6a 	bl	8005e64 <HAL_TIMEx_MasterConfigSynchronization>
 8001790:	1e03      	subs	r3, r0, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001794:	f7ff fe0e 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001798:	46c0      	nop			; (mov r8, r8)
 800179a:	46bd      	mov	sp, r7
 800179c:	b00d      	add	sp, #52	; 0x34
 800179e:	bd90      	pop	{r4, r7, pc}
 80017a0:	200001e4 	.word	0x200001e4
 80017a4:	40000400 	.word	0x40000400
 80017a8:	0000ffff 	.word	0x0000ffff

080017ac <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	0018      	movs	r0, r3
 80017b6:	230c      	movs	r3, #12
 80017b8:	001a      	movs	r2, r3
 80017ba:	2100      	movs	r1, #0
 80017bc:	f005 f956 	bl	8006a6c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017c0:	4b15      	ldr	r3, [pc, #84]	; (8001818 <MX_TIM6_Init+0x6c>)
 80017c2:	4a16      	ldr	r2, [pc, #88]	; (800181c <MX_TIM6_Init+0x70>)
 80017c4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 63999;
 80017c6:	4b14      	ldr	r3, [pc, #80]	; (8001818 <MX_TIM6_Init+0x6c>)
 80017c8:	4a15      	ldr	r2, [pc, #84]	; (8001820 <MX_TIM6_Init+0x74>)
 80017ca:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <MX_TIM6_Init+0x6c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <MX_TIM6_Init+0x6c>)
 80017d4:	2263      	movs	r2, #99	; 0x63
 80017d6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <MX_TIM6_Init+0x6c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <MX_TIM6_Init+0x6c>)
 80017e0:	0018      	movs	r0, r3
 80017e2:	f003 f9b5 	bl	8004b50 <HAL_TIM_Base_Init>
 80017e6:	1e03      	subs	r3, r0, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80017ea:	f7ff fde3 	bl	80013b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	2220      	movs	r2, #32
 80017f2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80017fa:	1d3a      	adds	r2, r7, #4
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <MX_TIM6_Init+0x6c>)
 80017fe:	0011      	movs	r1, r2
 8001800:	0018      	movs	r0, r3
 8001802:	f004 fb2f 	bl	8005e64 <HAL_TIMEx_MasterConfigSynchronization>
 8001806:	1e03      	subs	r3, r0, #0
 8001808:	d001      	beq.n	800180e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800180a:	f7ff fdd3 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	46bd      	mov	sp, r7
 8001812:	b004      	add	sp, #16
 8001814:	bd80      	pop	{r7, pc}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	20000230 	.word	0x20000230
 800181c:	40001000 	.word	0x40001000
 8001820:	0000f9ff 	.word	0x0000f9ff

08001824 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	0018      	movs	r0, r3
 800182e:	231c      	movs	r3, #28
 8001830:	001a      	movs	r2, r3
 8001832:	2100      	movs	r1, #0
 8001834:	f005 f91a 	bl	8006a6c <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001838:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <MX_TIM14_Init+0x94>)
 800183a:	4a20      	ldr	r2, [pc, #128]	; (80018bc <MX_TIM14_Init+0x98>)
 800183c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800183e:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <MX_TIM14_Init+0x94>)
 8001840:	2200      	movs	r2, #0
 8001842:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001844:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <MX_TIM14_Init+0x94>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800184a:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <MX_TIM14_Init+0x94>)
 800184c:	4a1c      	ldr	r2, [pc, #112]	; (80018c0 <MX_TIM14_Init+0x9c>)
 800184e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001850:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <MX_TIM14_Init+0x94>)
 8001852:	2200      	movs	r2, #0
 8001854:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <MX_TIM14_Init+0x94>)
 8001858:	2200      	movs	r2, #0
 800185a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800185c:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <MX_TIM14_Init+0x94>)
 800185e:	0018      	movs	r0, r3
 8001860:	f003 f976 	bl	8004b50 <HAL_TIM_Base_Init>
 8001864:	1e03      	subs	r3, r0, #0
 8001866:	d001      	beq.n	800186c <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8001868:	f7ff fda4 	bl	80013b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <MX_TIM14_Init+0x94>)
 800186e:	0018      	movs	r0, r3
 8001870:	f003 fa14 	bl	8004c9c <HAL_TIM_PWM_Init>
 8001874:	1e03      	subs	r3, r0, #0
 8001876:	d001      	beq.n	800187c <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8001878:	f7ff fd9c 	bl	80013b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	2260      	movs	r2, #96	; 0x60
 8001880:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	2200      	movs	r2, #0
 8001886:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	2200      	movs	r2, #0
 8001892:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001894:	1d39      	adds	r1, r7, #4
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <MX_TIM14_Init+0x94>)
 8001898:	2200      	movs	r2, #0
 800189a:	0018      	movs	r0, r3
 800189c:	f003 fe64 	bl	8005568 <HAL_TIM_PWM_ConfigChannel>
 80018a0:	1e03      	subs	r3, r0, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80018a4:	f7ff fd86 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80018a8:	4b03      	ldr	r3, [pc, #12]	; (80018b8 <MX_TIM14_Init+0x94>)
 80018aa:	0018      	movs	r0, r3
 80018ac:	f000 fad2 	bl	8001e54 <HAL_TIM_MspPostInit>

}
 80018b0:	46c0      	nop			; (mov r8, r8)
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b008      	add	sp, #32
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	2000027c 	.word	0x2000027c
 80018bc:	40002000 	.word	0x40002000
 80018c0:	0000ffff 	.word	0x0000ffff

080018c4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b098      	sub	sp, #96	; 0x60
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ca:	2354      	movs	r3, #84	; 0x54
 80018cc:	18fb      	adds	r3, r7, r3
 80018ce:	0018      	movs	r0, r3
 80018d0:	230c      	movs	r3, #12
 80018d2:	001a      	movs	r2, r3
 80018d4:	2100      	movs	r1, #0
 80018d6:	f005 f8c9 	bl	8006a6c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018da:	2338      	movs	r3, #56	; 0x38
 80018dc:	18fb      	adds	r3, r7, r3
 80018de:	0018      	movs	r0, r3
 80018e0:	231c      	movs	r3, #28
 80018e2:	001a      	movs	r2, r3
 80018e4:	2100      	movs	r1, #0
 80018e6:	f005 f8c1 	bl	8006a6c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	0018      	movs	r0, r3
 80018ee:	2334      	movs	r3, #52	; 0x34
 80018f0:	001a      	movs	r2, r3
 80018f2:	2100      	movs	r1, #0
 80018f4:	f005 f8ba 	bl	8006a6c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80018f8:	4b41      	ldr	r3, [pc, #260]	; (8001a00 <MX_TIM15_Init+0x13c>)
 80018fa:	4a42      	ldr	r2, [pc, #264]	; (8001a04 <MX_TIM15_Init+0x140>)
 80018fc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 19;
 80018fe:	4b40      	ldr	r3, [pc, #256]	; (8001a00 <MX_TIM15_Init+0x13c>)
 8001900:	2213      	movs	r2, #19
 8001902:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001904:	4b3e      	ldr	r3, [pc, #248]	; (8001a00 <MX_TIM15_Init+0x13c>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 800190a:	4b3d      	ldr	r3, [pc, #244]	; (8001a00 <MX_TIM15_Init+0x13c>)
 800190c:	4a3e      	ldr	r2, [pc, #248]	; (8001a08 <MX_TIM15_Init+0x144>)
 800190e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001910:	4b3b      	ldr	r3, [pc, #236]	; (8001a00 <MX_TIM15_Init+0x13c>)
 8001912:	2200      	movs	r2, #0
 8001914:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001916:	4b3a      	ldr	r3, [pc, #232]	; (8001a00 <MX_TIM15_Init+0x13c>)
 8001918:	2200      	movs	r2, #0
 800191a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191c:	4b38      	ldr	r3, [pc, #224]	; (8001a00 <MX_TIM15_Init+0x13c>)
 800191e:	2200      	movs	r2, #0
 8001920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001922:	4b37      	ldr	r3, [pc, #220]	; (8001a00 <MX_TIM15_Init+0x13c>)
 8001924:	0018      	movs	r0, r3
 8001926:	f003 f9b9 	bl	8004c9c <HAL_TIM_PWM_Init>
 800192a:	1e03      	subs	r3, r0, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800192e:	f7ff fd41 	bl	80013b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001932:	2154      	movs	r1, #84	; 0x54
 8001934:	187b      	adds	r3, r7, r1
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193a:	187b      	adds	r3, r7, r1
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001940:	187a      	adds	r2, r7, r1
 8001942:	4b2f      	ldr	r3, [pc, #188]	; (8001a00 <MX_TIM15_Init+0x13c>)
 8001944:	0011      	movs	r1, r2
 8001946:	0018      	movs	r0, r3
 8001948:	f004 fa8c 	bl	8005e64 <HAL_TIMEx_MasterConfigSynchronization>
 800194c:	1e03      	subs	r3, r0, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8001950:	f7ff fd30 	bl	80013b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001954:	2138      	movs	r1, #56	; 0x38
 8001956:	187b      	adds	r3, r7, r1
 8001958:	2260      	movs	r2, #96	; 0x60
 800195a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800195c:	187b      	adds	r3, r7, r1
 800195e:	2200      	movs	r2, #0
 8001960:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001962:	187b      	adds	r3, r7, r1
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001968:	187b      	adds	r3, r7, r1
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800196e:	187b      	adds	r3, r7, r1
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001974:	187b      	adds	r3, r7, r1
 8001976:	2200      	movs	r2, #0
 8001978:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800197a:	187b      	adds	r3, r7, r1
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001980:	1879      	adds	r1, r7, r1
 8001982:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <MX_TIM15_Init+0x13c>)
 8001984:	2200      	movs	r2, #0
 8001986:	0018      	movs	r0, r3
 8001988:	f003 fdee 	bl	8005568 <HAL_TIM_PWM_ConfigChannel>
 800198c:	1e03      	subs	r3, r0, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8001990:	f7ff fd10 	bl	80013b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001994:	2338      	movs	r3, #56	; 0x38
 8001996:	18f9      	adds	r1, r7, r3
 8001998:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <MX_TIM15_Init+0x13c>)
 800199a:	2204      	movs	r2, #4
 800199c:	0018      	movs	r0, r3
 800199e:	f003 fde3 	bl	8005568 <HAL_TIM_PWM_ConfigChannel>
 80019a2:	1e03      	subs	r3, r0, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM15_Init+0xe6>
  {
    Error_Handler();
 80019a6:	f7ff fd05 	bl	80013b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	2200      	movs	r2, #0
 80019b4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	2200      	movs	r2, #0
 80019c0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	2280      	movs	r2, #128	; 0x80
 80019cc:	0192      	lsls	r2, r2, #6
 80019ce:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	2200      	movs	r2, #0
 80019d4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	2200      	movs	r2, #0
 80019da:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80019dc:	1d3a      	adds	r2, r7, #4
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <MX_TIM15_Init+0x13c>)
 80019e0:	0011      	movs	r1, r2
 80019e2:	0018      	movs	r0, r3
 80019e4:	f004 faa6 	bl	8005f34 <HAL_TIMEx_ConfigBreakDeadTime>
 80019e8:	1e03      	subs	r3, r0, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 80019ec:	f7ff fce2 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80019f0:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <MX_TIM15_Init+0x13c>)
 80019f2:	0018      	movs	r0, r3
 80019f4:	f000 fa2e 	bl	8001e54 <HAL_TIM_MspPostInit>

}
 80019f8:	46c0      	nop			; (mov r8, r8)
 80019fa:	46bd      	mov	sp, r7
 80019fc:	b018      	add	sp, #96	; 0x60
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	200002c8 	.word	0x200002c8
 8001a04:	40014000 	.word	0x40014000
 8001a08:	000003e7 	.word	0x000003e7

08001a0c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b094      	sub	sp, #80	; 0x50
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a12:	2334      	movs	r3, #52	; 0x34
 8001a14:	18fb      	adds	r3, r7, r3
 8001a16:	0018      	movs	r0, r3
 8001a18:	231c      	movs	r3, #28
 8001a1a:	001a      	movs	r2, r3
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	f005 f825 	bl	8006a6c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a22:	003b      	movs	r3, r7
 8001a24:	0018      	movs	r0, r3
 8001a26:	2334      	movs	r3, #52	; 0x34
 8001a28:	001a      	movs	r2, r3
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	f005 f81e 	bl	8006a6c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001a30:	4b37      	ldr	r3, [pc, #220]	; (8001b10 <MX_TIM16_Init+0x104>)
 8001a32:	4a38      	ldr	r2, [pc, #224]	; (8001b14 <MX_TIM16_Init+0x108>)
 8001a34:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 19;
 8001a36:	4b36      	ldr	r3, [pc, #216]	; (8001b10 <MX_TIM16_Init+0x104>)
 8001a38:	2213      	movs	r2, #19
 8001a3a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3c:	4b34      	ldr	r3, [pc, #208]	; (8001b10 <MX_TIM16_Init+0x104>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 8001a42:	4b33      	ldr	r3, [pc, #204]	; (8001b10 <MX_TIM16_Init+0x104>)
 8001a44:	4a34      	ldr	r2, [pc, #208]	; (8001b18 <MX_TIM16_Init+0x10c>)
 8001a46:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a48:	4b31      	ldr	r3, [pc, #196]	; (8001b10 <MX_TIM16_Init+0x104>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001a4e:	4b30      	ldr	r3, [pc, #192]	; (8001b10 <MX_TIM16_Init+0x104>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a54:	4b2e      	ldr	r3, [pc, #184]	; (8001b10 <MX_TIM16_Init+0x104>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001a5a:	4b2d      	ldr	r3, [pc, #180]	; (8001b10 <MX_TIM16_Init+0x104>)
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f003 f877 	bl	8004b50 <HAL_TIM_Base_Init>
 8001a62:	1e03      	subs	r3, r0, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8001a66:	f7ff fca5 	bl	80013b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001a6a:	4b29      	ldr	r3, [pc, #164]	; (8001b10 <MX_TIM16_Init+0x104>)
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f003 f915 	bl	8004c9c <HAL_TIM_PWM_Init>
 8001a72:	1e03      	subs	r3, r0, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8001a76:	f7ff fc9d 	bl	80013b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a7a:	2134      	movs	r1, #52	; 0x34
 8001a7c:	187b      	adds	r3, r7, r1
 8001a7e:	2260      	movs	r2, #96	; 0x60
 8001a80:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001a82:	187b      	adds	r3, r7, r1
 8001a84:	2200      	movs	r2, #0
 8001a86:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a88:	187b      	adds	r3, r7, r1
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a8e:	187b      	adds	r3, r7, r1
 8001a90:	2200      	movs	r2, #0
 8001a92:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a94:	187b      	adds	r3, r7, r1
 8001a96:	2200      	movs	r2, #0
 8001a98:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a9a:	187b      	adds	r3, r7, r1
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001aa0:	187b      	adds	r3, r7, r1
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aa6:	1879      	adds	r1, r7, r1
 8001aa8:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <MX_TIM16_Init+0x104>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	0018      	movs	r0, r3
 8001aae:	f003 fd5b 	bl	8005568 <HAL_TIM_PWM_ConfigChannel>
 8001ab2:	1e03      	subs	r3, r0, #0
 8001ab4:	d001      	beq.n	8001aba <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8001ab6:	f7ff fc7d 	bl	80013b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001aba:	003b      	movs	r3, r7
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ac0:	003b      	movs	r3, r7
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ac6:	003b      	movs	r3, r7
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001acc:	003b      	movs	r3, r7
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ad2:	003b      	movs	r3, r7
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ad8:	003b      	movs	r3, r7
 8001ada:	2280      	movs	r2, #128	; 0x80
 8001adc:	0192      	lsls	r2, r2, #6
 8001ade:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ae0:	003b      	movs	r3, r7
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ae6:	003b      	movs	r3, r7
 8001ae8:	2200      	movs	r2, #0
 8001aea:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001aec:	003a      	movs	r2, r7
 8001aee:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <MX_TIM16_Init+0x104>)
 8001af0:	0011      	movs	r1, r2
 8001af2:	0018      	movs	r0, r3
 8001af4:	f004 fa1e 	bl	8005f34 <HAL_TIMEx_ConfigBreakDeadTime>
 8001af8:	1e03      	subs	r3, r0, #0
 8001afa:	d001      	beq.n	8001b00 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8001afc:	f7ff fc5a 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001b00:	4b03      	ldr	r3, [pc, #12]	; (8001b10 <MX_TIM16_Init+0x104>)
 8001b02:	0018      	movs	r0, r3
 8001b04:	f000 f9a6 	bl	8001e54 <HAL_TIM_MspPostInit>

}
 8001b08:	46c0      	nop			; (mov r8, r8)
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	b014      	add	sp, #80	; 0x50
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20000314 	.word	0x20000314
 8001b14:	40014400 	.word	0x40014400
 8001b18:	000003e7 	.word	0x000003e7

08001b1c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b094      	sub	sp, #80	; 0x50
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b22:	2334      	movs	r3, #52	; 0x34
 8001b24:	18fb      	adds	r3, r7, r3
 8001b26:	0018      	movs	r0, r3
 8001b28:	231c      	movs	r3, #28
 8001b2a:	001a      	movs	r2, r3
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	f004 ff9d 	bl	8006a6c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b32:	003b      	movs	r3, r7
 8001b34:	0018      	movs	r0, r3
 8001b36:	2334      	movs	r3, #52	; 0x34
 8001b38:	001a      	movs	r2, r3
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	f004 ff96 	bl	8006a6c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001b40:	4b37      	ldr	r3, [pc, #220]	; (8001c20 <MX_TIM17_Init+0x104>)
 8001b42:	4a38      	ldr	r2, [pc, #224]	; (8001c24 <MX_TIM17_Init+0x108>)
 8001b44:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 19;
 8001b46:	4b36      	ldr	r3, [pc, #216]	; (8001c20 <MX_TIM17_Init+0x104>)
 8001b48:	2213      	movs	r2, #19
 8001b4a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4c:	4b34      	ldr	r3, [pc, #208]	; (8001c20 <MX_TIM17_Init+0x104>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 8001b52:	4b33      	ldr	r3, [pc, #204]	; (8001c20 <MX_TIM17_Init+0x104>)
 8001b54:	4a34      	ldr	r2, [pc, #208]	; (8001c28 <MX_TIM17_Init+0x10c>)
 8001b56:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b58:	4b31      	ldr	r3, [pc, #196]	; (8001c20 <MX_TIM17_Init+0x104>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001b5e:	4b30      	ldr	r3, [pc, #192]	; (8001c20 <MX_TIM17_Init+0x104>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b64:	4b2e      	ldr	r3, [pc, #184]	; (8001c20 <MX_TIM17_Init+0x104>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001b6a:	4b2d      	ldr	r3, [pc, #180]	; (8001c20 <MX_TIM17_Init+0x104>)
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f002 ffef 	bl	8004b50 <HAL_TIM_Base_Init>
 8001b72:	1e03      	subs	r3, r0, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8001b76:	f7ff fc1d 	bl	80013b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001b7a:	4b29      	ldr	r3, [pc, #164]	; (8001c20 <MX_TIM17_Init+0x104>)
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	f003 f88d 	bl	8004c9c <HAL_TIM_PWM_Init>
 8001b82:	1e03      	subs	r3, r0, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8001b86:	f7ff fc15 	bl	80013b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b8a:	2134      	movs	r1, #52	; 0x34
 8001b8c:	187b      	adds	r3, r7, r1
 8001b8e:	2260      	movs	r2, #96	; 0x60
 8001b90:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001b92:	187b      	adds	r3, r7, r1
 8001b94:	2200      	movs	r2, #0
 8001b96:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b98:	187b      	adds	r3, r7, r1
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b9e:	187b      	adds	r3, r7, r1
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ba4:	187b      	adds	r3, r7, r1
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001baa:	187b      	adds	r3, r7, r1
 8001bac:	2200      	movs	r2, #0
 8001bae:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bb0:	187b      	adds	r3, r7, r1
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bb6:	1879      	adds	r1, r7, r1
 8001bb8:	4b19      	ldr	r3, [pc, #100]	; (8001c20 <MX_TIM17_Init+0x104>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f003 fcd3 	bl	8005568 <HAL_TIM_PWM_ConfigChannel>
 8001bc2:	1e03      	subs	r3, r0, #0
 8001bc4:	d001      	beq.n	8001bca <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8001bc6:	f7ff fbf5 	bl	80013b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bca:	003b      	movs	r3, r7
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bd0:	003b      	movs	r3, r7
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bd6:	003b      	movs	r3, r7
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bdc:	003b      	movs	r3, r7
 8001bde:	2200      	movs	r2, #0
 8001be0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001be2:	003b      	movs	r3, r7
 8001be4:	2200      	movs	r2, #0
 8001be6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001be8:	003b      	movs	r3, r7
 8001bea:	2280      	movs	r2, #128	; 0x80
 8001bec:	0192      	lsls	r2, r2, #6
 8001bee:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001bf0:	003b      	movs	r3, r7
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bf6:	003b      	movs	r3, r7
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001bfc:	003a      	movs	r2, r7
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <MX_TIM17_Init+0x104>)
 8001c00:	0011      	movs	r1, r2
 8001c02:	0018      	movs	r0, r3
 8001c04:	f004 f996 	bl	8005f34 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c08:	1e03      	subs	r3, r0, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8001c0c:	f7ff fbd2 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001c10:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <MX_TIM17_Init+0x104>)
 8001c12:	0018      	movs	r0, r3
 8001c14:	f000 f91e 	bl	8001e54 <HAL_TIM_MspPostInit>

}
 8001c18:	46c0      	nop			; (mov r8, r8)
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	b014      	add	sp, #80	; 0x50
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000360 	.word	0x20000360
 8001c24:	40014800 	.word	0x40014800
 8001c28:	000003e7 	.word	0x000003e7

08001c2c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001c2c:	b590      	push	{r4, r7, lr}
 8001c2e:	b08d      	sub	sp, #52	; 0x34
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	241c      	movs	r4, #28
 8001c36:	193b      	adds	r3, r7, r4
 8001c38:	0018      	movs	r0, r3
 8001c3a:	2314      	movs	r3, #20
 8001c3c:	001a      	movs	r2, r3
 8001c3e:	2100      	movs	r1, #0
 8001c40:	f004 ff14 	bl	8006a6c <memset>
  if(tim_encoderHandle->Instance==TIM1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a3e      	ldr	r2, [pc, #248]	; (8001d44 <HAL_TIM_Encoder_MspInit+0x118>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d13a      	bne.n	8001cc4 <HAL_TIM_Encoder_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c4e:	4b3e      	ldr	r3, [pc, #248]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c52:	4b3d      	ldr	r3, [pc, #244]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001c54:	2180      	movs	r1, #128	; 0x80
 8001c56:	0109      	lsls	r1, r1, #4
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	641a      	str	r2, [r3, #64]	; 0x40
 8001c5c:	4b3a      	ldr	r3, [pc, #232]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001c5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	011b      	lsls	r3, r3, #4
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
 8001c68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6a:	4b37      	ldr	r3, [pc, #220]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001c6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c6e:	4b36      	ldr	r3, [pc, #216]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001c70:	2101      	movs	r1, #1
 8001c72:	430a      	orrs	r2, r1
 8001c74:	635a      	str	r2, [r3, #52]	; 0x34
 8001c76:	4b34      	ldr	r3, [pc, #208]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = CODEUR1_PH1_Pin|CODEUR1_PH2_Pin;
 8001c82:	193b      	adds	r3, r7, r4
 8001c84:	22c0      	movs	r2, #192	; 0xc0
 8001c86:	0092      	lsls	r2, r2, #2
 8001c88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8a:	0021      	movs	r1, r4
 8001c8c:	187b      	adds	r3, r7, r1
 8001c8e:	2202      	movs	r2, #2
 8001c90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	187b      	adds	r3, r7, r1
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	187b      	adds	r3, r7, r1
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001c9e:	187b      	adds	r3, r7, r1
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca4:	187a      	adds	r2, r7, r1
 8001ca6:	23a0      	movs	r3, #160	; 0xa0
 8001ca8:	05db      	lsls	r3, r3, #23
 8001caa:	0011      	movs	r1, r2
 8001cac:	0018      	movs	r0, r3
 8001cae:	f001 fe8f 	bl	80039d0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	200e      	movs	r0, #14
 8001cb8:	f001 fccc 	bl	8003654 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001cbc:	200e      	movs	r0, #14
 8001cbe:	f001 fcde 	bl	800367e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001cc2:	e03a      	b.n	8001d3a <HAL_TIM_Encoder_MspInit+0x10e>
  else if(tim_encoderHandle->Instance==TIM3)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a20      	ldr	r2, [pc, #128]	; (8001d4c <HAL_TIM_Encoder_MspInit+0x120>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d135      	bne.n	8001d3a <HAL_TIM_Encoder_MspInit+0x10e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cce:	4b1e      	ldr	r3, [pc, #120]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001cd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cd2:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001cd4:	2102      	movs	r1, #2
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	63da      	str	r2, [r3, #60]	; 0x3c
 8001cda:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cde:	2202      	movs	r2, #2
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce6:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cea:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001cec:	2104      	movs	r1, #4
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	635a      	str	r2, [r3, #52]	; 0x34
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf6:	2204      	movs	r2, #4
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CODEUR2_PH1_Pin|CODEUR2_PH2_Pin;
 8001cfe:	211c      	movs	r1, #28
 8001d00:	187b      	adds	r3, r7, r1
 8001d02:	22c0      	movs	r2, #192	; 0xc0
 8001d04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	187b      	adds	r3, r7, r1
 8001d08:	2202      	movs	r2, #2
 8001d0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	187b      	adds	r3, r7, r1
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d12:	187b      	adds	r3, r7, r1
 8001d14:	2200      	movs	r2, #0
 8001d16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001d18:	187b      	adds	r3, r7, r1
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d1e:	187b      	adds	r3, r7, r1
 8001d20:	4a0b      	ldr	r2, [pc, #44]	; (8001d50 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d22:	0019      	movs	r1, r3
 8001d24:	0010      	movs	r0, r2
 8001d26:	f001 fe53 	bl	80039d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	2010      	movs	r0, #16
 8001d30:	f001 fc90 	bl	8003654 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d34:	2010      	movs	r0, #16
 8001d36:	f001 fca2 	bl	800367e <HAL_NVIC_EnableIRQ>
}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	b00d      	add	sp, #52	; 0x34
 8001d40:	bd90      	pop	{r4, r7, pc}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	40012c00 	.word	0x40012c00
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40000400 	.word	0x40000400
 8001d50:	50000800 	.word	0x50000800

08001d54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a27      	ldr	r2, [pc, #156]	; (8001e00 <HAL_TIM_Base_MspInit+0xac>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d10c      	bne.n	8001d80 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d66:	4b27      	ldr	r3, [pc, #156]	; (8001e04 <HAL_TIM_Base_MspInit+0xb0>)
 8001d68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d6a:	4b26      	ldr	r3, [pc, #152]	; (8001e04 <HAL_TIM_Base_MspInit+0xb0>)
 8001d6c:	2110      	movs	r1, #16
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d72:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <HAL_TIM_Base_MspInit+0xb0>)
 8001d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d76:	2210      	movs	r2, #16
 8001d78:	4013      	ands	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001d7e:	e03a      	b.n	8001df6 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM14)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a20      	ldr	r2, [pc, #128]	; (8001e08 <HAL_TIM_Base_MspInit+0xb4>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d10e      	bne.n	8001da8 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001d8a:	4b1e      	ldr	r3, [pc, #120]	; (8001e04 <HAL_TIM_Base_MspInit+0xb0>)
 8001d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d8e:	4b1d      	ldr	r3, [pc, #116]	; (8001e04 <HAL_TIM_Base_MspInit+0xb0>)
 8001d90:	2180      	movs	r1, #128	; 0x80
 8001d92:	0209      	lsls	r1, r1, #8
 8001d94:	430a      	orrs	r2, r1
 8001d96:	641a      	str	r2, [r3, #64]	; 0x40
 8001d98:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <HAL_TIM_Base_MspInit+0xb0>)
 8001d9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	021b      	lsls	r3, r3, #8
 8001da0:	4013      	ands	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]
}
 8001da6:	e026      	b.n	8001df6 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM16)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a17      	ldr	r2, [pc, #92]	; (8001e0c <HAL_TIM_Base_MspInit+0xb8>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d10e      	bne.n	8001dd0 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001db2:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <HAL_TIM_Base_MspInit+0xb0>)
 8001db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001db6:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <HAL_TIM_Base_MspInit+0xb0>)
 8001db8:	2180      	movs	r1, #128	; 0x80
 8001dba:	0289      	lsls	r1, r1, #10
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	641a      	str	r2, [r3, #64]	; 0x40
 8001dc0:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <HAL_TIM_Base_MspInit+0xb0>)
 8001dc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	029b      	lsls	r3, r3, #10
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
}
 8001dce:	e012      	b.n	8001df6 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM17)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0e      	ldr	r2, [pc, #56]	; (8001e10 <HAL_TIM_Base_MspInit+0xbc>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d10d      	bne.n	8001df6 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001dda:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <HAL_TIM_Base_MspInit+0xb0>)
 8001ddc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <HAL_TIM_Base_MspInit+0xb0>)
 8001de0:	2180      	movs	r1, #128	; 0x80
 8001de2:	02c9      	lsls	r1, r1, #11
 8001de4:	430a      	orrs	r2, r1
 8001de6:	641a      	str	r2, [r3, #64]	; 0x40
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_TIM_Base_MspInit+0xb0>)
 8001dea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	02db      	lsls	r3, r3, #11
 8001df0:	4013      	ands	r3, r2
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
}
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	b006      	add	sp, #24
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	40001000 	.word	0x40001000
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40002000 	.word	0x40002000
 8001e0c:	40014400 	.word	0x40014400
 8001e10:	40014800 	.word	0x40014800

08001e14 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <HAL_TIM_PWM_MspInit+0x38>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d10d      	bne.n	8001e42 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001e26:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e2a:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e2c:	2180      	movs	r1, #128	; 0x80
 8001e2e:	0249      	lsls	r1, r1, #9
 8001e30:	430a      	orrs	r2, r1
 8001e32:	641a      	str	r2, [r3, #64]	; 0x40
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e38:	2380      	movs	r3, #128	; 0x80
 8001e3a:	025b      	lsls	r3, r3, #9
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b004      	add	sp, #16
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	40014000 	.word	0x40014000
 8001e50:	40021000 	.word	0x40021000

08001e54 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e54:	b590      	push	{r4, r7, lr}
 8001e56:	b08d      	sub	sp, #52	; 0x34
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	241c      	movs	r4, #28
 8001e5e:	193b      	adds	r3, r7, r4
 8001e60:	0018      	movs	r0, r3
 8001e62:	2314      	movs	r3, #20
 8001e64:	001a      	movs	r2, r3
 8001e66:	2100      	movs	r1, #0
 8001e68:	f004 fe00 	bl	8006a6c <memset>
  if(timHandle->Instance==TIM14)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a51      	ldr	r2, [pc, #324]	; (8001fb8 <HAL_TIM_MspPostInit+0x164>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d123      	bne.n	8001ebe <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e76:	4b51      	ldr	r3, [pc, #324]	; (8001fbc <HAL_TIM_MspPostInit+0x168>)
 8001e78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e7a:	4b50      	ldr	r3, [pc, #320]	; (8001fbc <HAL_TIM_MspPostInit+0x168>)
 8001e7c:	2104      	movs	r1, #4
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	635a      	str	r2, [r3, #52]	; 0x34
 8001e82:	4b4e      	ldr	r3, [pc, #312]	; (8001fbc <HAL_TIM_MspPostInit+0x168>)
 8001e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e86:	2204      	movs	r2, #4
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
 8001e8c:	69bb      	ldr	r3, [r7, #24]
    /**TIM14 GPIO Configuration
    PC12     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = PWM_MOT_LIDAR_Pin;
 8001e8e:	193b      	adds	r3, r7, r4
 8001e90:	2280      	movs	r2, #128	; 0x80
 8001e92:	0152      	lsls	r2, r2, #5
 8001e94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	0021      	movs	r1, r4
 8001e98:	187b      	adds	r3, r7, r1
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	187b      	adds	r3, r7, r1
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea4:	187b      	adds	r3, r7, r1
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM14;
 8001eaa:	187b      	adds	r3, r7, r1
 8001eac:	2202      	movs	r2, #2
 8001eae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_MOT_LIDAR_GPIO_Port, &GPIO_InitStruct);
 8001eb0:	187b      	adds	r3, r7, r1
 8001eb2:	4a43      	ldr	r2, [pc, #268]	; (8001fc0 <HAL_TIM_MspPostInit+0x16c>)
 8001eb4:	0019      	movs	r1, r3
 8001eb6:	0010      	movs	r0, r2
 8001eb8:	f001 fd8a 	bl	80039d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001ebc:	e078      	b.n	8001fb0 <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM15)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a40      	ldr	r2, [pc, #256]	; (8001fc4 <HAL_TIM_MspPostInit+0x170>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d122      	bne.n	8001f0e <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec8:	4b3c      	ldr	r3, [pc, #240]	; (8001fbc <HAL_TIM_MspPostInit+0x168>)
 8001eca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ecc:	4b3b      	ldr	r3, [pc, #236]	; (8001fbc <HAL_TIM_MspPostInit+0x168>)
 8001ece:	2104      	movs	r1, #4
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	635a      	str	r2, [r3, #52]	; 0x34
 8001ed4:	4b39      	ldr	r3, [pc, #228]	; (8001fbc <HAL_TIM_MspPostInit+0x168>)
 8001ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed8:	2204      	movs	r2, #4
 8001eda:	4013      	ands	r3, r2
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_MOT2_PH1_Pin|PWM_MOT2_PH2_Pin;
 8001ee0:	211c      	movs	r1, #28
 8001ee2:	187b      	adds	r3, r7, r1
 8001ee4:	2206      	movs	r2, #6
 8001ee6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee8:	187b      	adds	r3, r7, r1
 8001eea:	2202      	movs	r2, #2
 8001eec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	187b      	adds	r3, r7, r1
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef4:	187b      	adds	r3, r7, r1
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 8001efa:	187b      	adds	r3, r7, r1
 8001efc:	2202      	movs	r2, #2
 8001efe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f00:	187b      	adds	r3, r7, r1
 8001f02:	4a2f      	ldr	r2, [pc, #188]	; (8001fc0 <HAL_TIM_MspPostInit+0x16c>)
 8001f04:	0019      	movs	r1, r3
 8001f06:	0010      	movs	r0, r2
 8001f08:	f001 fd62 	bl	80039d0 <HAL_GPIO_Init>
}
 8001f0c:	e050      	b.n	8001fb0 <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM16)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a2d      	ldr	r2, [pc, #180]	; (8001fc8 <HAL_TIM_MspPostInit+0x174>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d123      	bne.n	8001f60 <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f18:	4b28      	ldr	r3, [pc, #160]	; (8001fbc <HAL_TIM_MspPostInit+0x168>)
 8001f1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f1c:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <HAL_TIM_MspPostInit+0x168>)
 8001f1e:	2101      	movs	r1, #1
 8001f20:	430a      	orrs	r2, r1
 8001f22:	635a      	str	r2, [r3, #52]	; 0x34
 8001f24:	4b25      	ldr	r3, [pc, #148]	; (8001fbc <HAL_TIM_MspPostInit+0x168>)
 8001f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f28:	2201      	movs	r2, #1
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_MOT1_PH1_Pin;
 8001f30:	211c      	movs	r1, #28
 8001f32:	187b      	adds	r3, r7, r1
 8001f34:	2240      	movs	r2, #64	; 0x40
 8001f36:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f38:	187b      	adds	r3, r7, r1
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	187b      	adds	r3, r7, r1
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f44:	187b      	adds	r3, r7, r1
 8001f46:	2200      	movs	r2, #0
 8001f48:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 8001f4a:	187b      	adds	r3, r7, r1
 8001f4c:	2205      	movs	r2, #5
 8001f4e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_MOT1_PH1_GPIO_Port, &GPIO_InitStruct);
 8001f50:	187a      	adds	r2, r7, r1
 8001f52:	23a0      	movs	r3, #160	; 0xa0
 8001f54:	05db      	lsls	r3, r3, #23
 8001f56:	0011      	movs	r1, r2
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f001 fd39 	bl	80039d0 <HAL_GPIO_Init>
}
 8001f5e:	e027      	b.n	8001fb0 <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM17)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a19      	ldr	r2, [pc, #100]	; (8001fcc <HAL_TIM_MspPostInit+0x178>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d122      	bne.n	8001fb0 <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6a:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <HAL_TIM_MspPostInit+0x168>)
 8001f6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f6e:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <HAL_TIM_MspPostInit+0x168>)
 8001f70:	2101      	movs	r1, #1
 8001f72:	430a      	orrs	r2, r1
 8001f74:	635a      	str	r2, [r3, #52]	; 0x34
 8001f76:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <HAL_TIM_MspPostInit+0x168>)
 8001f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_MOT1_PH2_Pin;
 8001f82:	211c      	movs	r1, #28
 8001f84:	187b      	adds	r3, r7, r1
 8001f86:	2280      	movs	r2, #128	; 0x80
 8001f88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	187b      	adds	r3, r7, r1
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	187b      	adds	r3, r7, r1
 8001f92:	2200      	movs	r2, #0
 8001f94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f96:	187b      	adds	r3, r7, r1
 8001f98:	2200      	movs	r2, #0
 8001f9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8001f9c:	187b      	adds	r3, r7, r1
 8001f9e:	2205      	movs	r2, #5
 8001fa0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_MOT1_PH2_GPIO_Port, &GPIO_InitStruct);
 8001fa2:	187a      	adds	r2, r7, r1
 8001fa4:	23a0      	movs	r3, #160	; 0xa0
 8001fa6:	05db      	lsls	r3, r3, #23
 8001fa8:	0011      	movs	r1, r2
 8001faa:	0018      	movs	r0, r3
 8001fac:	f001 fd10 	bl	80039d0 <HAL_GPIO_Init>
}
 8001fb0:	46c0      	nop			; (mov r8, r8)
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b00d      	add	sp, #52	; 0x34
 8001fb6:	bd90      	pop	{r4, r7, pc}
 8001fb8:	40002000 	.word	0x40002000
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	50000800 	.word	0x50000800
 8001fc4:	40014000 	.word	0x40014000
 8001fc8:	40014400 	.word	0x40014400
 8001fcc:	40014800 	.word	0x40014800

08001fd0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart4;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fd4:	4b23      	ldr	r3, [pc, #140]	; (8002064 <MX_USART1_UART_Init+0x94>)
 8001fd6:	4a24      	ldr	r2, [pc, #144]	; (8002068 <MX_USART1_UART_Init+0x98>)
 8001fd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fda:	4b22      	ldr	r3, [pc, #136]	; (8002064 <MX_USART1_UART_Init+0x94>)
 8001fdc:	22e1      	movs	r2, #225	; 0xe1
 8001fde:	0252      	lsls	r2, r2, #9
 8001fe0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fe2:	4b20      	ldr	r3, [pc, #128]	; (8002064 <MX_USART1_UART_Init+0x94>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fe8:	4b1e      	ldr	r3, [pc, #120]	; (8002064 <MX_USART1_UART_Init+0x94>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fee:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <MX_USART1_UART_Init+0x94>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ff4:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <MX_USART1_UART_Init+0x94>)
 8001ff6:	220c      	movs	r2, #12
 8001ff8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ffa:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <MX_USART1_UART_Init+0x94>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002000:	4b18      	ldr	r3, [pc, #96]	; (8002064 <MX_USART1_UART_Init+0x94>)
 8002002:	2200      	movs	r2, #0
 8002004:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002006:	4b17      	ldr	r3, [pc, #92]	; (8002064 <MX_USART1_UART_Init+0x94>)
 8002008:	2200      	movs	r2, #0
 800200a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800200c:	4b15      	ldr	r3, [pc, #84]	; (8002064 <MX_USART1_UART_Init+0x94>)
 800200e:	2200      	movs	r2, #0
 8002010:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002012:	4b14      	ldr	r3, [pc, #80]	; (8002064 <MX_USART1_UART_Init+0x94>)
 8002014:	2200      	movs	r2, #0
 8002016:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <MX_USART1_UART_Init+0x94>)
 800201a:	0018      	movs	r0, r3
 800201c:	f004 f848 	bl	80060b0 <HAL_UART_Init>
 8002020:	1e03      	subs	r3, r0, #0
 8002022:	d001      	beq.n	8002028 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002024:	f7ff f9c6 	bl	80013b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002028:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <MX_USART1_UART_Init+0x94>)
 800202a:	2100      	movs	r1, #0
 800202c:	0018      	movs	r0, r3
 800202e:	f004 fc3d 	bl	80068ac <HAL_UARTEx_SetTxFifoThreshold>
 8002032:	1e03      	subs	r3, r0, #0
 8002034:	d001      	beq.n	800203a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002036:	f7ff f9bd 	bl	80013b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800203a:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <MX_USART1_UART_Init+0x94>)
 800203c:	2100      	movs	r1, #0
 800203e:	0018      	movs	r0, r3
 8002040:	f004 fc74 	bl	800692c <HAL_UARTEx_SetRxFifoThreshold>
 8002044:	1e03      	subs	r3, r0, #0
 8002046:	d001      	beq.n	800204c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002048:	f7ff f9b4 	bl	80013b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800204c:	4b05      	ldr	r3, [pc, #20]	; (8002064 <MX_USART1_UART_Init+0x94>)
 800204e:	0018      	movs	r0, r3
 8002050:	f004 fbf2 	bl	8006838 <HAL_UARTEx_DisableFifoMode>
 8002054:	1e03      	subs	r3, r0, #0
 8002056:	d001      	beq.n	800205c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002058:	f7ff f9ac 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800205c:	46c0      	nop			; (mov r8, r8)
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	200003ac 	.word	0x200003ac
 8002068:	40013800 	.word	0x40013800

0800206c <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8002070:	4b16      	ldr	r3, [pc, #88]	; (80020cc <MX_USART4_UART_Init+0x60>)
 8002072:	4a17      	ldr	r2, [pc, #92]	; (80020d0 <MX_USART4_UART_Init+0x64>)
 8002074:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 128000;
 8002076:	4b15      	ldr	r3, [pc, #84]	; (80020cc <MX_USART4_UART_Init+0x60>)
 8002078:	22fa      	movs	r2, #250	; 0xfa
 800207a:	0252      	lsls	r2, r2, #9
 800207c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800207e:	4b13      	ldr	r3, [pc, #76]	; (80020cc <MX_USART4_UART_Init+0x60>)
 8002080:	2200      	movs	r2, #0
 8002082:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002084:	4b11      	ldr	r3, [pc, #68]	; (80020cc <MX_USART4_UART_Init+0x60>)
 8002086:	2200      	movs	r2, #0
 8002088:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800208a:	4b10      	ldr	r3, [pc, #64]	; (80020cc <MX_USART4_UART_Init+0x60>)
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002090:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <MX_USART4_UART_Init+0x60>)
 8002092:	220c      	movs	r2, #12
 8002094:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002096:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <MX_USART4_UART_Init+0x60>)
 8002098:	2200      	movs	r2, #0
 800209a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800209c:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <MX_USART4_UART_Init+0x60>)
 800209e:	2200      	movs	r2, #0
 80020a0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <MX_USART4_UART_Init+0x60>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <MX_USART4_UART_Init+0x60>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020ae:	4b07      	ldr	r3, [pc, #28]	; (80020cc <MX_USART4_UART_Init+0x60>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <MX_USART4_UART_Init+0x60>)
 80020b6:	0018      	movs	r0, r3
 80020b8:	f003 fffa 	bl	80060b0 <HAL_UART_Init>
 80020bc:	1e03      	subs	r3, r0, #0
 80020be:	d001      	beq.n	80020c4 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 80020c0:	f7ff f978 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80020c4:	46c0      	nop			; (mov r8, r8)
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	20000440 	.word	0x20000440
 80020d0:	40004c00 	.word	0x40004c00

080020d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020d4:	b590      	push	{r4, r7, lr}
 80020d6:	b093      	sub	sp, #76	; 0x4c
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	2334      	movs	r3, #52	; 0x34
 80020de:	18fb      	adds	r3, r7, r3
 80020e0:	0018      	movs	r0, r3
 80020e2:	2314      	movs	r3, #20
 80020e4:	001a      	movs	r2, r3
 80020e6:	2100      	movs	r1, #0
 80020e8:	f004 fcc0 	bl	8006a6c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020ec:	2418      	movs	r4, #24
 80020ee:	193b      	adds	r3, r7, r4
 80020f0:	0018      	movs	r0, r3
 80020f2:	231c      	movs	r3, #28
 80020f4:	001a      	movs	r2, r3
 80020f6:	2100      	movs	r1, #0
 80020f8:	f004 fcb8 	bl	8006a6c <memset>
  if(uartHandle->Instance==USART1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a3d      	ldr	r2, [pc, #244]	; (80021f8 <HAL_UART_MspInit+0x124>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d13e      	bne.n	8002184 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002106:	193b      	adds	r3, r7, r4
 8002108:	2201      	movs	r2, #1
 800210a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800210c:	193b      	adds	r3, r7, r4
 800210e:	2200      	movs	r2, #0
 8002110:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002112:	193b      	adds	r3, r7, r4
 8002114:	0018      	movs	r0, r3
 8002116:	f002 fb2f 	bl	8004778 <HAL_RCCEx_PeriphCLKConfig>
 800211a:	1e03      	subs	r3, r0, #0
 800211c:	d001      	beq.n	8002122 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800211e:	f7ff f949 	bl	80013b4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002122:	4b36      	ldr	r3, [pc, #216]	; (80021fc <HAL_UART_MspInit+0x128>)
 8002124:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002126:	4b35      	ldr	r3, [pc, #212]	; (80021fc <HAL_UART_MspInit+0x128>)
 8002128:	2180      	movs	r1, #128	; 0x80
 800212a:	01c9      	lsls	r1, r1, #7
 800212c:	430a      	orrs	r2, r1
 800212e:	641a      	str	r2, [r3, #64]	; 0x40
 8002130:	4b32      	ldr	r3, [pc, #200]	; (80021fc <HAL_UART_MspInit+0x128>)
 8002132:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	01db      	lsls	r3, r3, #7
 8002138:	4013      	ands	r3, r2
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800213e:	4b2f      	ldr	r3, [pc, #188]	; (80021fc <HAL_UART_MspInit+0x128>)
 8002140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002142:	4b2e      	ldr	r3, [pc, #184]	; (80021fc <HAL_UART_MspInit+0x128>)
 8002144:	2104      	movs	r1, #4
 8002146:	430a      	orrs	r2, r1
 8002148:	635a      	str	r2, [r3, #52]	; 0x34
 800214a:	4b2c      	ldr	r3, [pc, #176]	; (80021fc <HAL_UART_MspInit+0x128>)
 800214c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214e:	2204      	movs	r2, #4
 8002150:	4013      	ands	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Debug_Pin|USART1_RX_Debug_Pin;
 8002156:	2134      	movs	r1, #52	; 0x34
 8002158:	187b      	adds	r3, r7, r1
 800215a:	2230      	movs	r2, #48	; 0x30
 800215c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215e:	187b      	adds	r3, r7, r1
 8002160:	2202      	movs	r2, #2
 8002162:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	187b      	adds	r3, r7, r1
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216a:	187b      	adds	r3, r7, r1
 800216c:	2200      	movs	r2, #0
 800216e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002170:	187b      	adds	r3, r7, r1
 8002172:	2201      	movs	r2, #1
 8002174:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002176:	187b      	adds	r3, r7, r1
 8002178:	4a21      	ldr	r2, [pc, #132]	; (8002200 <HAL_UART_MspInit+0x12c>)
 800217a:	0019      	movs	r1, r3
 800217c:	0010      	movs	r0, r2
 800217e:	f001 fc27 	bl	80039d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8002182:	e035      	b.n	80021f0 <HAL_UART_MspInit+0x11c>
  else if(uartHandle->Instance==USART4)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a1e      	ldr	r2, [pc, #120]	; (8002204 <HAL_UART_MspInit+0x130>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d130      	bne.n	80021f0 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART4_CLK_ENABLE();
 800218e:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <HAL_UART_MspInit+0x128>)
 8002190:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002192:	4b1a      	ldr	r3, [pc, #104]	; (80021fc <HAL_UART_MspInit+0x128>)
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	0309      	lsls	r1, r1, #12
 8002198:	430a      	orrs	r2, r1
 800219a:	63da      	str	r2, [r3, #60]	; 0x3c
 800219c:	4b17      	ldr	r3, [pc, #92]	; (80021fc <HAL_UART_MspInit+0x128>)
 800219e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021a0:	2380      	movs	r3, #128	; 0x80
 80021a2:	031b      	lsls	r3, r3, #12
 80021a4:	4013      	ands	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021aa:	4b14      	ldr	r3, [pc, #80]	; (80021fc <HAL_UART_MspInit+0x128>)
 80021ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021ae:	4b13      	ldr	r3, [pc, #76]	; (80021fc <HAL_UART_MspInit+0x128>)
 80021b0:	2104      	movs	r1, #4
 80021b2:	430a      	orrs	r2, r1
 80021b4:	635a      	str	r2, [r3, #52]	; 0x34
 80021b6:	4b11      	ldr	r3, [pc, #68]	; (80021fc <HAL_UART_MspInit+0x128>)
 80021b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ba:	2204      	movs	r2, #4
 80021bc:	4013      	ands	r3, r2
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART4_RX_LIDAR_Pin|USART4_TX_LIDAR_Pin;
 80021c2:	2134      	movs	r1, #52	; 0x34
 80021c4:	187b      	adds	r3, r7, r1
 80021c6:	22c0      	movs	r2, #192	; 0xc0
 80021c8:	0112      	lsls	r2, r2, #4
 80021ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	187b      	adds	r3, r7, r1
 80021ce:	2202      	movs	r2, #2
 80021d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	187b      	adds	r3, r7, r1
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	187b      	adds	r3, r7, r1
 80021da:	2200      	movs	r2, #0
 80021dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART4;
 80021de:	187b      	adds	r3, r7, r1
 80021e0:	2201      	movs	r2, #1
 80021e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e4:	187b      	adds	r3, r7, r1
 80021e6:	4a06      	ldr	r2, [pc, #24]	; (8002200 <HAL_UART_MspInit+0x12c>)
 80021e8:	0019      	movs	r1, r3
 80021ea:	0010      	movs	r0, r2
 80021ec:	f001 fbf0 	bl	80039d0 <HAL_GPIO_Init>
}
 80021f0:	46c0      	nop			; (mov r8, r8)
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b013      	add	sp, #76	; 0x4c
 80021f6:	bd90      	pop	{r4, r7, pc}
 80021f8:	40013800 	.word	0x40013800
 80021fc:	40021000 	.word	0x40021000
 8002200:	50000800 	.word	0x50000800
 8002204:	40004c00 	.word	0x40004c00

08002208 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002208:	480d      	ldr	r0, [pc, #52]	; (8002240 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800220a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800220c:	f7ff f9fa 	bl	8001604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002210:	480c      	ldr	r0, [pc, #48]	; (8002244 <LoopForever+0x6>)
  ldr r1, =_edata
 8002212:	490d      	ldr	r1, [pc, #52]	; (8002248 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002214:	4a0d      	ldr	r2, [pc, #52]	; (800224c <LoopForever+0xe>)
  movs r3, #0
 8002216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002218:	e002      	b.n	8002220 <LoopCopyDataInit>

0800221a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800221a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800221c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800221e:	3304      	adds	r3, #4

08002220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002224:	d3f9      	bcc.n	800221a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002226:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002228:	4c0a      	ldr	r4, [pc, #40]	; (8002254 <LoopForever+0x16>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800222c:	e001      	b.n	8002232 <LoopFillZerobss>

0800222e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800222e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002230:	3204      	adds	r2, #4

08002232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002234:	d3fb      	bcc.n	800222e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002236:	f004 fc21 	bl	8006a7c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800223a:	f7fe fdc1 	bl	8000dc0 <main>

0800223e <LoopForever>:

LoopForever:
  b LoopForever
 800223e:	e7fe      	b.n	800223e <LoopForever>
  ldr   r0, =_estack
 8002240:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002248:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800224c:	08006bd4 	.word	0x08006bd4
  ldr r2, =_sbss
 8002250:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002254:	200004d8 	.word	0x200004d8

08002258 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002258:	e7fe      	b.n	8002258 <ADC1_IRQHandler>
	...

0800225c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002262:	1dfb      	adds	r3, r7, #7
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002268:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <HAL_Init+0x3c>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <HAL_Init+0x3c>)
 800226e:	2180      	movs	r1, #128	; 0x80
 8002270:	0049      	lsls	r1, r1, #1
 8002272:	430a      	orrs	r2, r1
 8002274:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002276:	2003      	movs	r0, #3
 8002278:	f000 f810 	bl	800229c <HAL_InitTick>
 800227c:	1e03      	subs	r3, r0, #0
 800227e:	d003      	beq.n	8002288 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002280:	1dfb      	adds	r3, r7, #7
 8002282:	2201      	movs	r2, #1
 8002284:	701a      	strb	r2, [r3, #0]
 8002286:	e001      	b.n	800228c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002288:	f7ff f924 	bl	80014d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800228c:	1dfb      	adds	r3, r7, #7
 800228e:	781b      	ldrb	r3, [r3, #0]
}
 8002290:	0018      	movs	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	b002      	add	sp, #8
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40022000 	.word	0x40022000

0800229c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800229c:	b590      	push	{r4, r7, lr}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022a4:	230f      	movs	r3, #15
 80022a6:	18fb      	adds	r3, r7, r3
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80022ac:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <HAL_InitTick+0x88>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d02b      	beq.n	800230c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80022b4:	4b1c      	ldr	r3, [pc, #112]	; (8002328 <HAL_InitTick+0x8c>)
 80022b6:	681c      	ldr	r4, [r3, #0]
 80022b8:	4b1a      	ldr	r3, [pc, #104]	; (8002324 <HAL_InitTick+0x88>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	0019      	movs	r1, r3
 80022be:	23fa      	movs	r3, #250	; 0xfa
 80022c0:	0098      	lsls	r0, r3, #2
 80022c2:	f7fd ff1d 	bl	8000100 <__udivsi3>
 80022c6:	0003      	movs	r3, r0
 80022c8:	0019      	movs	r1, r3
 80022ca:	0020      	movs	r0, r4
 80022cc:	f7fd ff18 	bl	8000100 <__udivsi3>
 80022d0:	0003      	movs	r3, r0
 80022d2:	0018      	movs	r0, r3
 80022d4:	f001 f9e3 	bl	800369e <HAL_SYSTICK_Config>
 80022d8:	1e03      	subs	r3, r0, #0
 80022da:	d112      	bne.n	8002302 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d80a      	bhi.n	80022f8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	2301      	movs	r3, #1
 80022e6:	425b      	negs	r3, r3
 80022e8:	2200      	movs	r2, #0
 80022ea:	0018      	movs	r0, r3
 80022ec:	f001 f9b2 	bl	8003654 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022f0:	4b0e      	ldr	r3, [pc, #56]	; (800232c <HAL_InitTick+0x90>)
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	e00d      	b.n	8002314 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80022f8:	230f      	movs	r3, #15
 80022fa:	18fb      	adds	r3, r7, r3
 80022fc:	2201      	movs	r2, #1
 80022fe:	701a      	strb	r2, [r3, #0]
 8002300:	e008      	b.n	8002314 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002302:	230f      	movs	r3, #15
 8002304:	18fb      	adds	r3, r7, r3
 8002306:	2201      	movs	r2, #1
 8002308:	701a      	strb	r2, [r3, #0]
 800230a:	e003      	b.n	8002314 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800230c:	230f      	movs	r3, #15
 800230e:	18fb      	adds	r3, r7, r3
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002314:	230f      	movs	r3, #15
 8002316:	18fb      	adds	r3, r7, r3
 8002318:	781b      	ldrb	r3, [r3, #0]
}
 800231a:	0018      	movs	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	b005      	add	sp, #20
 8002320:	bd90      	pop	{r4, r7, pc}
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	2000000c 	.word	0x2000000c
 8002328:	20000004 	.word	0x20000004
 800232c:	20000008 	.word	0x20000008

08002330 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002334:	4b05      	ldr	r3, [pc, #20]	; (800234c <HAL_IncTick+0x1c>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	001a      	movs	r2, r3
 800233a:	4b05      	ldr	r3, [pc, #20]	; (8002350 <HAL_IncTick+0x20>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	18d2      	adds	r2, r2, r3
 8002340:	4b03      	ldr	r3, [pc, #12]	; (8002350 <HAL_IncTick+0x20>)
 8002342:	601a      	str	r2, [r3, #0]
}
 8002344:	46c0      	nop			; (mov r8, r8)
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	2000000c 	.word	0x2000000c
 8002350:	200004d4 	.word	0x200004d4

08002354 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  return uwTick;
 8002358:	4b02      	ldr	r3, [pc, #8]	; (8002364 <HAL_GetTick+0x10>)
 800235a:	681b      	ldr	r3, [r3, #0]
}
 800235c:	0018      	movs	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	200004d4 	.word	0x200004d4

08002368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002370:	f7ff fff0 	bl	8002354 <HAL_GetTick>
 8002374:	0003      	movs	r3, r0
 8002376:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	3301      	adds	r3, #1
 8002380:	d005      	beq.n	800238e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002382:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <HAL_Delay+0x44>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	001a      	movs	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	189b      	adds	r3, r3, r2
 800238c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	f7ff ffe0 	bl	8002354 <HAL_GetTick>
 8002394:	0002      	movs	r2, r0
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	429a      	cmp	r2, r3
 800239e:	d8f7      	bhi.n	8002390 <HAL_Delay+0x28>
  {
  }
}
 80023a0:	46c0      	nop			; (mov r8, r8)
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	46bd      	mov	sp, r7
 80023a6:	b004      	add	sp, #16
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	2000000c 	.word	0x2000000c

080023b0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a06      	ldr	r2, [pc, #24]	; (80023d8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80023be:	4013      	ands	r3, r2
 80023c0:	0019      	movs	r1, r3
 80023c2:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	601a      	str	r2, [r3, #0]
}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	46bd      	mov	sp, r7
 80023ce:	b002      	add	sp, #8
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	40010000 	.word	0x40010000
 80023d8:	fffff9ff 	.word	0xfffff9ff

080023dc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a05      	ldr	r2, [pc, #20]	; (8002400 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80023ec:	401a      	ands	r2, r3
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	431a      	orrs	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	601a      	str	r2, [r3, #0]
}
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	46bd      	mov	sp, r7
 80023fa:	b002      	add	sp, #8
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	fe3fffff 	.word	0xfe3fffff

08002404 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	23e0      	movs	r3, #224	; 0xe0
 8002412:	045b      	lsls	r3, r3, #17
 8002414:	4013      	ands	r3, r2
}
 8002416:	0018      	movs	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	b002      	add	sp, #8
 800241c:	bd80      	pop	{r7, pc}

0800241e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b084      	sub	sp, #16
 8002422:	af00      	add	r7, sp, #0
 8002424:	60f8      	str	r0, [r7, #12]
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	2104      	movs	r1, #4
 8002432:	400a      	ands	r2, r1
 8002434:	2107      	movs	r1, #7
 8002436:	4091      	lsls	r1, r2
 8002438:	000a      	movs	r2, r1
 800243a:	43d2      	mvns	r2, r2
 800243c:	401a      	ands	r2, r3
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2104      	movs	r1, #4
 8002442:	400b      	ands	r3, r1
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	4099      	lsls	r1, r3
 8002448:	000b      	movs	r3, r1
 800244a:	431a      	orrs	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002450:	46c0      	nop			; (mov r8, r8)
 8002452:	46bd      	mov	sp, r7
 8002454:	b004      	add	sp, #16
 8002456:	bd80      	pop	{r7, pc}

08002458 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	2104      	movs	r1, #4
 800246a:	400a      	ands	r2, r1
 800246c:	2107      	movs	r1, #7
 800246e:	4091      	lsls	r1, r2
 8002470:	000a      	movs	r2, r1
 8002472:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	2104      	movs	r1, #4
 8002478:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800247a:	40da      	lsrs	r2, r3
 800247c:	0013      	movs	r3, r2
}
 800247e:	0018      	movs	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	b002      	add	sp, #8
 8002484:	bd80      	pop	{r7, pc}

08002486 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	23c0      	movs	r3, #192	; 0xc0
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	4013      	ands	r3, r2
 8002498:	d101      	bne.n	800249e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800249e:	2300      	movs	r3, #0
}
 80024a0:	0018      	movs	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	b002      	add	sp, #8
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	211f      	movs	r1, #31
 80024bc:	400a      	ands	r2, r1
 80024be:	210f      	movs	r1, #15
 80024c0:	4091      	lsls	r1, r2
 80024c2:	000a      	movs	r2, r1
 80024c4:	43d2      	mvns	r2, r2
 80024c6:	401a      	ands	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	0e9b      	lsrs	r3, r3, #26
 80024cc:	210f      	movs	r1, #15
 80024ce:	4019      	ands	r1, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	201f      	movs	r0, #31
 80024d4:	4003      	ands	r3, r0
 80024d6:	4099      	lsls	r1, r3
 80024d8:	000b      	movs	r3, r1
 80024da:	431a      	orrs	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80024e0:	46c0      	nop			; (mov r8, r8)
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b004      	add	sp, #16
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	035b      	lsls	r3, r3, #13
 80024fa:	0b5b      	lsrs	r3, r3, #13
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	46bd      	mov	sp, r7
 8002506:	b002      	add	sp, #8
 8002508:	bd80      	pop	{r7, pc}

0800250a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	0352      	lsls	r2, r2, #13
 800251c:	0b52      	lsrs	r2, r2, #13
 800251e:	43d2      	mvns	r2, r2
 8002520:	401a      	ands	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002526:	46c0      	nop			; (mov r8, r8)
 8002528:	46bd      	mov	sp, r7
 800252a:	b002      	add	sp, #8
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	0212      	lsls	r2, r2, #8
 8002544:	43d2      	mvns	r2, r2
 8002546:	401a      	ands	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	021b      	lsls	r3, r3, #8
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	400b      	ands	r3, r1
 8002550:	4904      	ldr	r1, [pc, #16]	; (8002564 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002552:	400b      	ands	r3, r1
 8002554:	431a      	orrs	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	46bd      	mov	sp, r7
 800255e:	b004      	add	sp, #16
 8002560:	bd80      	pop	{r7, pc}
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	07ffff00 	.word	0x07ffff00

08002568 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	4a05      	ldr	r2, [pc, #20]	; (800258c <LL_ADC_EnableInternalRegulator+0x24>)
 8002576:	4013      	ands	r3, r2
 8002578:	2280      	movs	r2, #128	; 0x80
 800257a:	0552      	lsls	r2, r2, #21
 800257c:	431a      	orrs	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	46bd      	mov	sp, r7
 8002586:	b002      	add	sp, #8
 8002588:	bd80      	pop	{r7, pc}
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	6fffffe8 	.word	0x6fffffe8

08002590 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	2380      	movs	r3, #128	; 0x80
 800259e:	055b      	lsls	r3, r3, #21
 80025a0:	401a      	ands	r2, r3
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	055b      	lsls	r3, r3, #21
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d101      	bne.n	80025ae <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	0018      	movs	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b002      	add	sp, #8
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <LL_ADC_Enable+0x20>)
 80025c6:	4013      	ands	r3, r2
 80025c8:	2201      	movs	r2, #1
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80025d0:	46c0      	nop			; (mov r8, r8)
 80025d2:	46bd      	mov	sp, r7
 80025d4:	b002      	add	sp, #8
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	7fffffe8 	.word	0x7fffffe8

080025dc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	4a04      	ldr	r2, [pc, #16]	; (80025fc <LL_ADC_Disable+0x20>)
 80025ea:	4013      	ands	r3, r2
 80025ec:	2202      	movs	r2, #2
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80025f4:	46c0      	nop			; (mov r8, r8)
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b002      	add	sp, #8
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	7fffffe8 	.word	0x7fffffe8

08002600 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2201      	movs	r2, #1
 800260e:	4013      	ands	r3, r2
 8002610:	2b01      	cmp	r3, #1
 8002612:	d101      	bne.n	8002618 <LL_ADC_IsEnabled+0x18>
 8002614:	2301      	movs	r3, #1
 8002616:	e000      	b.n	800261a <LL_ADC_IsEnabled+0x1a>
 8002618:	2300      	movs	r3, #0
}
 800261a:	0018      	movs	r0, r3
 800261c:	46bd      	mov	sp, r7
 800261e:	b002      	add	sp, #8
 8002620:	bd80      	pop	{r7, pc}

08002622 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	2202      	movs	r2, #2
 8002630:	4013      	ands	r3, r2
 8002632:	2b02      	cmp	r3, #2
 8002634:	d101      	bne.n	800263a <LL_ADC_IsDisableOngoing+0x18>
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <LL_ADC_IsDisableOngoing+0x1a>
 800263a:	2300      	movs	r3, #0
}
 800263c:	0018      	movs	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	b002      	add	sp, #8
 8002642:	bd80      	pop	{r7, pc}

08002644 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	4a04      	ldr	r2, [pc, #16]	; (8002664 <LL_ADC_REG_StartConversion+0x20>)
 8002652:	4013      	ands	r3, r2
 8002654:	2204      	movs	r2, #4
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800265c:	46c0      	nop			; (mov r8, r8)
 800265e:	46bd      	mov	sp, r7
 8002660:	b002      	add	sp, #8
 8002662:	bd80      	pop	{r7, pc}
 8002664:	7fffffe8 	.word	0x7fffffe8

08002668 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	4a04      	ldr	r2, [pc, #16]	; (8002688 <LL_ADC_REG_StopConversion+0x20>)
 8002676:	4013      	ands	r3, r2
 8002678:	2210      	movs	r2, #16
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002680:	46c0      	nop			; (mov r8, r8)
 8002682:	46bd      	mov	sp, r7
 8002684:	b002      	add	sp, #8
 8002686:	bd80      	pop	{r7, pc}
 8002688:	7fffffe8 	.word	0x7fffffe8

0800268c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	2204      	movs	r2, #4
 800269a:	4013      	ands	r3, r2
 800269c:	2b04      	cmp	r3, #4
 800269e:	d101      	bne.n	80026a4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	0018      	movs	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	b002      	add	sp, #8
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026b8:	231f      	movs	r3, #31
 80026ba:	18fb      	adds	r3, r7, r3
 80026bc:	2200      	movs	r2, #0
 80026be:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e17f      	b.n	80029d6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10a      	bne.n	80026f4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	0018      	movs	r0, r3
 80026e2:	f7fe f9ab 	bl	8000a3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2254      	movs	r2, #84	; 0x54
 80026f0:	2100      	movs	r1, #0
 80026f2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	0018      	movs	r0, r3
 80026fa:	f7ff ff49 	bl	8002590 <LL_ADC_IsInternalRegulatorEnabled>
 80026fe:	1e03      	subs	r3, r0, #0
 8002700:	d115      	bne.n	800272e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	0018      	movs	r0, r3
 8002708:	f7ff ff2e 	bl	8002568 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800270c:	4bb4      	ldr	r3, [pc, #720]	; (80029e0 <HAL_ADC_Init+0x330>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	49b4      	ldr	r1, [pc, #720]	; (80029e4 <HAL_ADC_Init+0x334>)
 8002712:	0018      	movs	r0, r3
 8002714:	f7fd fcf4 	bl	8000100 <__udivsi3>
 8002718:	0003      	movs	r3, r0
 800271a:	3301      	adds	r3, #1
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002720:	e002      	b.n	8002728 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	3b01      	subs	r3, #1
 8002726:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f9      	bne.n	8002722 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	0018      	movs	r0, r3
 8002734:	f7ff ff2c 	bl	8002590 <LL_ADC_IsInternalRegulatorEnabled>
 8002738:	1e03      	subs	r3, r0, #0
 800273a:	d10f      	bne.n	800275c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002740:	2210      	movs	r2, #16
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274c:	2201      	movs	r2, #1
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002754:	231f      	movs	r3, #31
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	2201      	movs	r2, #1
 800275a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	0018      	movs	r0, r3
 8002762:	f7ff ff93 	bl	800268c <LL_ADC_REG_IsConversionOngoing>
 8002766:	0003      	movs	r3, r0
 8002768:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276e:	2210      	movs	r2, #16
 8002770:	4013      	ands	r3, r2
 8002772:	d000      	beq.n	8002776 <HAL_ADC_Init+0xc6>
 8002774:	e122      	b.n	80029bc <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d000      	beq.n	800277e <HAL_ADC_Init+0xce>
 800277c:	e11e      	b.n	80029bc <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002782:	4a99      	ldr	r2, [pc, #612]	; (80029e8 <HAL_ADC_Init+0x338>)
 8002784:	4013      	ands	r3, r2
 8002786:	2202      	movs	r2, #2
 8002788:	431a      	orrs	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	0018      	movs	r0, r3
 8002794:	f7ff ff34 	bl	8002600 <LL_ADC_IsEnabled>
 8002798:	1e03      	subs	r3, r0, #0
 800279a:	d000      	beq.n	800279e <HAL_ADC_Init+0xee>
 800279c:	e0ad      	b.n	80028fa <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	7e1b      	ldrb	r3, [r3, #24]
 80027a6:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80027a8:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	7e5b      	ldrb	r3, [r3, #25]
 80027ae:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80027b0:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	7e9b      	ldrb	r3, [r3, #26]
 80027b6:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80027b8:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d002      	beq.n	80027c8 <HAL_ADC_Init+0x118>
 80027c2:	2380      	movs	r3, #128	; 0x80
 80027c4:	015b      	lsls	r3, r3, #5
 80027c6:	e000      	b.n	80027ca <HAL_ADC_Init+0x11a>
 80027c8:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80027ca:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80027d0:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	da04      	bge.n	80027e4 <HAL_ADC_Init+0x134>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	085b      	lsrs	r3, r3, #1
 80027e2:	e001      	b.n	80027e8 <HAL_ADC_Init+0x138>
 80027e4:	2380      	movs	r3, #128	; 0x80
 80027e6:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80027e8:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	212c      	movs	r1, #44	; 0x2c
 80027ee:	5c5b      	ldrb	r3, [r3, r1]
 80027f0:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80027f2:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2220      	movs	r2, #32
 80027fe:	5c9b      	ldrb	r3, [r3, r2]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d115      	bne.n	8002830 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	7e9b      	ldrb	r3, [r3, #26]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d105      	bne.n	8002818 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	2280      	movs	r2, #128	; 0x80
 8002810:	0252      	lsls	r2, r2, #9
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
 8002816:	e00b      	b.n	8002830 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281c:	2220      	movs	r2, #32
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002828:	2201      	movs	r2, #1
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00a      	beq.n	800284e <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800283c:	23e0      	movs	r3, #224	; 0xe0
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002846:	4313      	orrs	r3, r2
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	4a65      	ldr	r2, [pc, #404]	; (80029ec <HAL_ADC_Init+0x33c>)
 8002856:	4013      	ands	r3, r2
 8002858:	0019      	movs	r1, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	430a      	orrs	r2, r1
 8002862:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	0f9b      	lsrs	r3, r3, #30
 800286a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002870:	4313      	orrs	r3, r2
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	4313      	orrs	r3, r2
 8002876:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	223c      	movs	r2, #60	; 0x3c
 800287c:	5c9b      	ldrb	r3, [r3, r2]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d111      	bne.n	80028a6 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	0f9b      	lsrs	r3, r3, #30
 8002888:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800288e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002894:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800289a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	4313      	orrs	r3, r2
 80028a0:	2201      	movs	r2, #1
 80028a2:	4313      	orrs	r3, r2
 80028a4:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	4a50      	ldr	r2, [pc, #320]	; (80029f0 <HAL_ADC_Init+0x340>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	0019      	movs	r1, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	23c0      	movs	r3, #192	; 0xc0
 80028c2:	061b      	lsls	r3, r3, #24
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d018      	beq.n	80028fa <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80028cc:	2380      	movs	r3, #128	; 0x80
 80028ce:	05db      	lsls	r3, r3, #23
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d012      	beq.n	80028fa <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80028d8:	2380      	movs	r3, #128	; 0x80
 80028da:	061b      	lsls	r3, r3, #24
 80028dc:	429a      	cmp	r2, r3
 80028de:	d00c      	beq.n	80028fa <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80028e0:	4b44      	ldr	r3, [pc, #272]	; (80029f4 <HAL_ADC_Init+0x344>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a44      	ldr	r2, [pc, #272]	; (80029f8 <HAL_ADC_Init+0x348>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	0019      	movs	r1, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	23f0      	movs	r3, #240	; 0xf0
 80028f0:	039b      	lsls	r3, r3, #14
 80028f2:	401a      	ands	r2, r3
 80028f4:	4b3f      	ldr	r3, [pc, #252]	; (80029f4 <HAL_ADC_Init+0x344>)
 80028f6:	430a      	orrs	r2, r1
 80028f8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6818      	ldr	r0, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002902:	001a      	movs	r2, r3
 8002904:	2100      	movs	r1, #0
 8002906:	f7ff fd8a 	bl	800241e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6818      	ldr	r0, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002912:	493a      	ldr	r1, [pc, #232]	; (80029fc <HAL_ADC_Init+0x34c>)
 8002914:	001a      	movs	r2, r3
 8002916:	f7ff fd82 	bl	800241e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d109      	bne.n	8002936 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2110      	movs	r1, #16
 800292e:	4249      	negs	r1, r1
 8002930:	430a      	orrs	r2, r1
 8002932:	629a      	str	r2, [r3, #40]	; 0x28
 8002934:	e018      	b.n	8002968 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691a      	ldr	r2, [r3, #16]
 800293a:	2380      	movs	r3, #128	; 0x80
 800293c:	039b      	lsls	r3, r3, #14
 800293e:	429a      	cmp	r2, r3
 8002940:	d112      	bne.n	8002968 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	3b01      	subs	r3, #1
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	221c      	movs	r2, #28
 8002952:	4013      	ands	r3, r2
 8002954:	2210      	movs	r2, #16
 8002956:	4252      	negs	r2, r2
 8002958:	409a      	lsls	r2, r3
 800295a:	0011      	movs	r1, r2
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2100      	movs	r1, #0
 800296e:	0018      	movs	r0, r3
 8002970:	f7ff fd72 	bl	8002458 <LL_ADC_GetSamplingTimeCommonChannels>
 8002974:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800297a:	429a      	cmp	r2, r3
 800297c:	d10b      	bne.n	8002996 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002988:	2203      	movs	r2, #3
 800298a:	4393      	bics	r3, r2
 800298c:	2201      	movs	r2, #1
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002994:	e01c      	b.n	80029d0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299a:	2212      	movs	r2, #18
 800299c:	4393      	bics	r3, r2
 800299e:	2210      	movs	r2, #16
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029aa:	2201      	movs	r2, #1
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80029b2:	231f      	movs	r3, #31
 80029b4:	18fb      	adds	r3, r7, r3
 80029b6:	2201      	movs	r2, #1
 80029b8:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80029ba:	e009      	b.n	80029d0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c0:	2210      	movs	r2, #16
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80029c8:	231f      	movs	r3, #31
 80029ca:	18fb      	adds	r3, r7, r3
 80029cc:	2201      	movs	r2, #1
 80029ce:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80029d0:	231f      	movs	r3, #31
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	781b      	ldrb	r3, [r3, #0]
}
 80029d6:	0018      	movs	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	b008      	add	sp, #32
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	20000004 	.word	0x20000004
 80029e4:	00030d40 	.word	0x00030d40
 80029e8:	fffffefd 	.word	0xfffffefd
 80029ec:	fffe0201 	.word	0xfffe0201
 80029f0:	1ffffc02 	.word	0x1ffffc02
 80029f4:	40012708 	.word	0x40012708
 80029f8:	ffc3ffff 	.word	0xffc3ffff
 80029fc:	07ffff04 	.word	0x07ffff04

08002a00 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002a00:	b5b0      	push	{r4, r5, r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f7ff fe3d 	bl	800268c <LL_ADC_REG_IsConversionOngoing>
 8002a12:	1e03      	subs	r3, r0, #0
 8002a14:	d135      	bne.n	8002a82 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2254      	movs	r2, #84	; 0x54
 8002a1a:	5c9b      	ldrb	r3, [r3, r2]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_ADC_Start+0x24>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e035      	b.n	8002a90 <HAL_ADC_Start+0x90>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2254      	movs	r2, #84	; 0x54
 8002a28:	2101      	movs	r1, #1
 8002a2a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002a2c:	250f      	movs	r5, #15
 8002a2e:	197c      	adds	r4, r7, r5
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	0018      	movs	r0, r3
 8002a34:	f000 fb28 	bl	8003088 <ADC_Enable>
 8002a38:	0003      	movs	r3, r0
 8002a3a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002a3c:	197b      	adds	r3, r7, r5
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d119      	bne.n	8002a78 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a48:	4a13      	ldr	r2, [pc, #76]	; (8002a98 <HAL_ADC_Start+0x98>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	2280      	movs	r2, #128	; 0x80
 8002a4e:	0052      	lsls	r2, r2, #1
 8002a50:	431a      	orrs	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	221c      	movs	r2, #28
 8002a62:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2254      	movs	r2, #84	; 0x54
 8002a68:	2100      	movs	r1, #0
 8002a6a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	0018      	movs	r0, r3
 8002a72:	f7ff fde7 	bl	8002644 <LL_ADC_REG_StartConversion>
 8002a76:	e008      	b.n	8002a8a <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2254      	movs	r2, #84	; 0x54
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	5499      	strb	r1, [r3, r2]
 8002a80:	e003      	b.n	8002a8a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a82:	230f      	movs	r3, #15
 8002a84:	18fb      	adds	r3, r7, r3
 8002a86:	2202      	movs	r2, #2
 8002a88:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002a8a:	230f      	movs	r3, #15
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	781b      	ldrb	r3, [r3, #0]
}
 8002a90:	0018      	movs	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	b004      	add	sp, #16
 8002a96:	bdb0      	pop	{r4, r5, r7, pc}
 8002a98:	fffff0fe 	.word	0xfffff0fe

08002a9c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002a9c:	b5b0      	push	{r4, r5, r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2254      	movs	r2, #84	; 0x54
 8002aa8:	5c9b      	ldrb	r3, [r3, r2]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_ADC_Stop+0x16>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e029      	b.n	8002b06 <HAL_ADC_Stop+0x6a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2254      	movs	r2, #84	; 0x54
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002aba:	250f      	movs	r5, #15
 8002abc:	197c      	adds	r4, r7, r5
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f000 fa9f 	bl	8003004 <ADC_ConversionStop>
 8002ac6:	0003      	movs	r3, r0
 8002ac8:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002aca:	197b      	adds	r3, r7, r5
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d112      	bne.n	8002af8 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002ad2:	197c      	adds	r4, r7, r5
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f000 fb5c 	bl	8003194 <ADC_Disable>
 8002adc:	0003      	movs	r3, r0
 8002ade:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002ae0:	197b      	adds	r3, r7, r5
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d107      	bne.n	8002af8 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aec:	4a08      	ldr	r2, [pc, #32]	; (8002b10 <HAL_ADC_Stop+0x74>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	2201      	movs	r2, #1
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2254      	movs	r2, #84	; 0x54
 8002afc:	2100      	movs	r1, #0
 8002afe:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002b00:	230f      	movs	r3, #15
 8002b02:	18fb      	adds	r3, r7, r3
 8002b04:	781b      	ldrb	r3, [r3, #0]
}
 8002b06:	0018      	movs	r0, r3
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	b004      	add	sp, #16
 8002b0c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	fffffefe 	.word	0xfffffefe

08002b14 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d102      	bne.n	8002b2c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002b26:	2308      	movs	r3, #8
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	e00f      	b.n	8002b4c <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	2201      	movs	r2, #1
 8002b34:	4013      	ands	r3, r2
 8002b36:	d007      	beq.n	8002b48 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e072      	b.n	8002c2e <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002b48:	2304      	movs	r3, #4
 8002b4a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002b4c:	f7ff fc02 	bl	8002354 <HAL_GetTick>
 8002b50:	0003      	movs	r3, r0
 8002b52:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002b54:	e01f      	b.n	8002b96 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	d01c      	beq.n	8002b96 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002b5c:	f7ff fbfa 	bl	8002354 <HAL_GetTick>
 8002b60:	0002      	movs	r2, r0
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d302      	bcc.n	8002b72 <HAL_ADC_PollForConversion+0x5e>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d111      	bne.n	8002b96 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d10b      	bne.n	8002b96 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b82:	2204      	movs	r2, #4
 8002b84:	431a      	orrs	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2254      	movs	r2, #84	; 0x54
 8002b8e:	2100      	movs	r1, #0
 8002b90:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e04b      	b.n	8002c2e <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d0d9      	beq.n	8002b56 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba6:	2280      	movs	r2, #128	; 0x80
 8002ba8:	0092      	lsls	r2, r2, #2
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f7ff fc66 	bl	8002486 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002bba:	1e03      	subs	r3, r0, #0
 8002bbc:	d02e      	beq.n	8002c1c <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	7e9b      	ldrb	r3, [r3, #26]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d12a      	bne.n	8002c1c <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2208      	movs	r2, #8
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d123      	bne.n	8002c1c <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f7ff fd57 	bl	800268c <LL_ADC_REG_IsConversionOngoing>
 8002bde:	1e03      	subs	r3, r0, #0
 8002be0:	d110      	bne.n	8002c04 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	210c      	movs	r1, #12
 8002bee:	438a      	bics	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf6:	4a10      	ldr	r2, [pc, #64]	; (8002c38 <HAL_ADC_PollForConversion+0x124>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	659a      	str	r2, [r3, #88]	; 0x58
 8002c02:	e00b      	b.n	8002c1c <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c08:	2220      	movs	r2, #32
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c14:	2201      	movs	r2, #1
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	7e1b      	ldrb	r3, [r3, #24]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d103      	bne.n	8002c2c <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	220c      	movs	r2, #12
 8002c2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	0018      	movs	r0, r3
 8002c30:	46bd      	mov	sp, r7
 8002c32:	b004      	add	sp, #16
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	fffffefe 	.word	0xfffffefe

08002c3c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	b002      	add	sp, #8
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c5e:	2317      	movs	r3, #23
 8002c60:	18fb      	adds	r3, r7, r3
 8002c62:	2200      	movs	r2, #0
 8002c64:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2254      	movs	r2, #84	; 0x54
 8002c6e:	5c9b      	ldrb	r3, [r3, r2]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d101      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x24>
 8002c74:	2302      	movs	r3, #2
 8002c76:	e1c0      	b.n	8002ffa <HAL_ADC_ConfigChannel+0x3a6>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2254      	movs	r2, #84	; 0x54
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	0018      	movs	r0, r3
 8002c86:	f7ff fd01 	bl	800268c <LL_ADC_REG_IsConversionOngoing>
 8002c8a:	1e03      	subs	r3, r0, #0
 8002c8c:	d000      	beq.n	8002c90 <HAL_ADC_ConfigChannel+0x3c>
 8002c8e:	e1a3      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d100      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x46>
 8002c98:	e143      	b.n	8002f22 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691a      	ldr	r2, [r3, #16]
 8002c9e:	2380      	movs	r3, #128	; 0x80
 8002ca0:	061b      	lsls	r3, r3, #24
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d004      	beq.n	8002cb0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002caa:	4ac1      	ldr	r2, [pc, #772]	; (8002fb0 <HAL_ADC_ConfigChannel+0x35c>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d108      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	0019      	movs	r1, r3
 8002cba:	0010      	movs	r0, r2
 8002cbc:	f7ff fc14 	bl	80024e8 <LL_ADC_REG_SetSequencerChAdd>
 8002cc0:	e0c9      	b.n	8002e56 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	211f      	movs	r1, #31
 8002ccc:	400b      	ands	r3, r1
 8002cce:	210f      	movs	r1, #15
 8002cd0:	4099      	lsls	r1, r3
 8002cd2:	000b      	movs	r3, r1
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	0019      	movs	r1, r3
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	035b      	lsls	r3, r3, #13
 8002ce0:	0b5b      	lsrs	r3, r3, #13
 8002ce2:	d105      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x9c>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	0e9b      	lsrs	r3, r3, #26
 8002cea:	221f      	movs	r2, #31
 8002cec:	4013      	ands	r3, r2
 8002cee:	e098      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x1ce>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	d000      	beq.n	8002cfc <HAL_ADC_ConfigChannel+0xa8>
 8002cfa:	e091      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x1cc>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2202      	movs	r2, #2
 8002d02:	4013      	ands	r3, r2
 8002d04:	d000      	beq.n	8002d08 <HAL_ADC_ConfigChannel+0xb4>
 8002d06:	e089      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x1c8>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2204      	movs	r2, #4
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d000      	beq.n	8002d14 <HAL_ADC_ConfigChannel+0xc0>
 8002d12:	e081      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x1c4>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2208      	movs	r2, #8
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d000      	beq.n	8002d20 <HAL_ADC_ConfigChannel+0xcc>
 8002d1e:	e079      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x1c0>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2210      	movs	r2, #16
 8002d26:	4013      	ands	r3, r2
 8002d28:	d000      	beq.n	8002d2c <HAL_ADC_ConfigChannel+0xd8>
 8002d2a:	e071      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x1bc>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2220      	movs	r2, #32
 8002d32:	4013      	ands	r3, r2
 8002d34:	d000      	beq.n	8002d38 <HAL_ADC_ConfigChannel+0xe4>
 8002d36:	e069      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x1b8>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2240      	movs	r2, #64	; 0x40
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d000      	beq.n	8002d44 <HAL_ADC_ConfigChannel+0xf0>
 8002d42:	e061      	b.n	8002e08 <HAL_ADC_ConfigChannel+0x1b4>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2280      	movs	r2, #128	; 0x80
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d000      	beq.n	8002d50 <HAL_ADC_ConfigChannel+0xfc>
 8002d4e:	e059      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x1b0>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	2380      	movs	r3, #128	; 0x80
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d151      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x1ac>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	2380      	movs	r3, #128	; 0x80
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4013      	ands	r3, r2
 8002d66:	d149      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x1a8>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	2380      	movs	r3, #128	; 0x80
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	4013      	ands	r3, r2
 8002d72:	d141      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x1a4>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	2380      	movs	r3, #128	; 0x80
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	d139      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x1a0>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	2380      	movs	r3, #128	; 0x80
 8002d86:	015b      	lsls	r3, r3, #5
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d131      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x19c>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	019b      	lsls	r3, r3, #6
 8002d94:	4013      	ands	r3, r2
 8002d96:	d129      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x198>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	2380      	movs	r3, #128	; 0x80
 8002d9e:	01db      	lsls	r3, r3, #7
 8002da0:	4013      	ands	r3, r2
 8002da2:	d121      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x194>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	2380      	movs	r3, #128	; 0x80
 8002daa:	021b      	lsls	r3, r3, #8
 8002dac:	4013      	ands	r3, r2
 8002dae:	d119      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x190>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	2380      	movs	r3, #128	; 0x80
 8002db6:	025b      	lsls	r3, r3, #9
 8002db8:	4013      	ands	r3, r2
 8002dba:	d111      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x18c>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	2380      	movs	r3, #128	; 0x80
 8002dc2:	029b      	lsls	r3, r3, #10
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d109      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x188>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	02db      	lsls	r3, r3, #11
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d001      	beq.n	8002dd8 <HAL_ADC_ConfigChannel+0x184>
 8002dd4:	2312      	movs	r3, #18
 8002dd6:	e024      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x1ce>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	e022      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x1ce>
 8002ddc:	2311      	movs	r3, #17
 8002dde:	e020      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x1ce>
 8002de0:	2310      	movs	r3, #16
 8002de2:	e01e      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x1ce>
 8002de4:	230f      	movs	r3, #15
 8002de6:	e01c      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x1ce>
 8002de8:	230e      	movs	r3, #14
 8002dea:	e01a      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x1ce>
 8002dec:	230d      	movs	r3, #13
 8002dee:	e018      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x1ce>
 8002df0:	230c      	movs	r3, #12
 8002df2:	e016      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x1ce>
 8002df4:	230b      	movs	r3, #11
 8002df6:	e014      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x1ce>
 8002df8:	230a      	movs	r3, #10
 8002dfa:	e012      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x1ce>
 8002dfc:	2309      	movs	r3, #9
 8002dfe:	e010      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x1ce>
 8002e00:	2308      	movs	r3, #8
 8002e02:	e00e      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x1ce>
 8002e04:	2307      	movs	r3, #7
 8002e06:	e00c      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x1ce>
 8002e08:	2306      	movs	r3, #6
 8002e0a:	e00a      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x1ce>
 8002e0c:	2305      	movs	r3, #5
 8002e0e:	e008      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x1ce>
 8002e10:	2304      	movs	r3, #4
 8002e12:	e006      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x1ce>
 8002e14:	2303      	movs	r3, #3
 8002e16:	e004      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x1ce>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e002      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x1ce>
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e000      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x1ce>
 8002e20:	2300      	movs	r3, #0
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	6852      	ldr	r2, [r2, #4]
 8002e26:	201f      	movs	r0, #31
 8002e28:	4002      	ands	r2, r0
 8002e2a:	4093      	lsls	r3, r2
 8002e2c:	000a      	movs	r2, r1
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	089b      	lsrs	r3, r3, #2
 8002e3a:	1c5a      	adds	r2, r3, #1
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d808      	bhi.n	8002e56 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6818      	ldr	r0, [r3, #0]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	6859      	ldr	r1, [r3, #4]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	001a      	movs	r2, r3
 8002e52:	f7ff fb29 	bl	80024a8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6818      	ldr	r0, [r3, #0]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	6819      	ldr	r1, [r3, #0]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	001a      	movs	r2, r3
 8002e64:	f7ff fb64 	bl	8002530 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	db00      	blt.n	8002e72 <HAL_ADC_ConfigChannel+0x21e>
 8002e70:	e0bc      	b.n	8002fec <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e72:	4b50      	ldr	r3, [pc, #320]	; (8002fb4 <HAL_ADC_ConfigChannel+0x360>)
 8002e74:	0018      	movs	r0, r3
 8002e76:	f7ff fac5 	bl	8002404 <LL_ADC_GetCommonPathInternalCh>
 8002e7a:	0003      	movs	r3, r0
 8002e7c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a4d      	ldr	r2, [pc, #308]	; (8002fb8 <HAL_ADC_ConfigChannel+0x364>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d122      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	2380      	movs	r3, #128	; 0x80
 8002e8c:	041b      	lsls	r3, r3, #16
 8002e8e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e90:	d11d      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	2280      	movs	r2, #128	; 0x80
 8002e96:	0412      	lsls	r2, r2, #16
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	4a46      	ldr	r2, [pc, #280]	; (8002fb4 <HAL_ADC_ConfigChannel+0x360>)
 8002e9c:	0019      	movs	r1, r3
 8002e9e:	0010      	movs	r0, r2
 8002ea0:	f7ff fa9c 	bl	80023dc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ea4:	4b45      	ldr	r3, [pc, #276]	; (8002fbc <HAL_ADC_ConfigChannel+0x368>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4945      	ldr	r1, [pc, #276]	; (8002fc0 <HAL_ADC_ConfigChannel+0x36c>)
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f7fd f928 	bl	8000100 <__udivsi3>
 8002eb0:	0003      	movs	r3, r0
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	0013      	movs	r3, r2
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	189b      	adds	r3, r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ebe:	e002      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1f9      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ecc:	e08e      	b.n	8002fec <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a3c      	ldr	r2, [pc, #240]	; (8002fc4 <HAL_ADC_ConfigChannel+0x370>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d10e      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	2380      	movs	r3, #128	; 0x80
 8002edc:	045b      	lsls	r3, r3, #17
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d109      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	2280      	movs	r2, #128	; 0x80
 8002ee6:	0452      	lsls	r2, r2, #17
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	4a32      	ldr	r2, [pc, #200]	; (8002fb4 <HAL_ADC_ConfigChannel+0x360>)
 8002eec:	0019      	movs	r1, r3
 8002eee:	0010      	movs	r0, r2
 8002ef0:	f7ff fa74 	bl	80023dc <LL_ADC_SetCommonPathInternalCh>
 8002ef4:	e07a      	b.n	8002fec <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a33      	ldr	r2, [pc, #204]	; (8002fc8 <HAL_ADC_ConfigChannel+0x374>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d000      	beq.n	8002f02 <HAL_ADC_ConfigChannel+0x2ae>
 8002f00:	e074      	b.n	8002fec <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	2380      	movs	r3, #128	; 0x80
 8002f06:	03db      	lsls	r3, r3, #15
 8002f08:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002f0a:	d000      	beq.n	8002f0e <HAL_ADC_ConfigChannel+0x2ba>
 8002f0c:	e06e      	b.n	8002fec <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	2280      	movs	r2, #128	; 0x80
 8002f12:	03d2      	lsls	r2, r2, #15
 8002f14:	4313      	orrs	r3, r2
 8002f16:	4a27      	ldr	r2, [pc, #156]	; (8002fb4 <HAL_ADC_ConfigChannel+0x360>)
 8002f18:	0019      	movs	r1, r3
 8002f1a:	0010      	movs	r0, r2
 8002f1c:	f7ff fa5e 	bl	80023dc <LL_ADC_SetCommonPathInternalCh>
 8002f20:	e064      	b.n	8002fec <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691a      	ldr	r2, [r3, #16]
 8002f26:	2380      	movs	r3, #128	; 0x80
 8002f28:	061b      	lsls	r3, r3, #24
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d004      	beq.n	8002f38 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002f32:	4a1f      	ldr	r2, [pc, #124]	; (8002fb0 <HAL_ADC_ConfigChannel+0x35c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d107      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	0019      	movs	r1, r3
 8002f42:	0010      	movs	r0, r2
 8002f44:	f7ff fae1 	bl	800250a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	da4d      	bge.n	8002fec <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f50:	4b18      	ldr	r3, [pc, #96]	; (8002fb4 <HAL_ADC_ConfigChannel+0x360>)
 8002f52:	0018      	movs	r0, r3
 8002f54:	f7ff fa56 	bl	8002404 <LL_ADC_GetCommonPathInternalCh>
 8002f58:	0003      	movs	r3, r0
 8002f5a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a15      	ldr	r2, [pc, #84]	; (8002fb8 <HAL_ADC_ConfigChannel+0x364>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d108      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4a18      	ldr	r2, [pc, #96]	; (8002fcc <HAL_ADC_ConfigChannel+0x378>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	4a11      	ldr	r2, [pc, #68]	; (8002fb4 <HAL_ADC_ConfigChannel+0x360>)
 8002f6e:	0019      	movs	r1, r3
 8002f70:	0010      	movs	r0, r2
 8002f72:	f7ff fa33 	bl	80023dc <LL_ADC_SetCommonPathInternalCh>
 8002f76:	e039      	b.n	8002fec <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a11      	ldr	r2, [pc, #68]	; (8002fc4 <HAL_ADC_ConfigChannel+0x370>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d108      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	4a12      	ldr	r2, [pc, #72]	; (8002fd0 <HAL_ADC_ConfigChannel+0x37c>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	4a0a      	ldr	r2, [pc, #40]	; (8002fb4 <HAL_ADC_ConfigChannel+0x360>)
 8002f8a:	0019      	movs	r1, r3
 8002f8c:	0010      	movs	r0, r2
 8002f8e:	f7ff fa25 	bl	80023dc <LL_ADC_SetCommonPathInternalCh>
 8002f92:	e02b      	b.n	8002fec <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a0b      	ldr	r2, [pc, #44]	; (8002fc8 <HAL_ADC_ConfigChannel+0x374>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d126      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4a0c      	ldr	r2, [pc, #48]	; (8002fd4 <HAL_ADC_ConfigChannel+0x380>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	4a03      	ldr	r2, [pc, #12]	; (8002fb4 <HAL_ADC_ConfigChannel+0x360>)
 8002fa6:	0019      	movs	r1, r3
 8002fa8:	0010      	movs	r0, r2
 8002faa:	f7ff fa17 	bl	80023dc <LL_ADC_SetCommonPathInternalCh>
 8002fae:	e01d      	b.n	8002fec <HAL_ADC_ConfigChannel+0x398>
 8002fb0:	80000004 	.word	0x80000004
 8002fb4:	40012708 	.word	0x40012708
 8002fb8:	b0001000 	.word	0xb0001000
 8002fbc:	20000004 	.word	0x20000004
 8002fc0:	00030d40 	.word	0x00030d40
 8002fc4:	b8004000 	.word	0xb8004000
 8002fc8:	b4002000 	.word	0xb4002000
 8002fcc:	ff7fffff 	.word	0xff7fffff
 8002fd0:	feffffff 	.word	0xfeffffff
 8002fd4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fdc:	2220      	movs	r2, #32
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002fe4:	2317      	movs	r3, #23
 8002fe6:	18fb      	adds	r3, r7, r3
 8002fe8:	2201      	movs	r2, #1
 8002fea:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2254      	movs	r2, #84	; 0x54
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002ff4:	2317      	movs	r3, #23
 8002ff6:	18fb      	adds	r3, r7, r3
 8002ff8:	781b      	ldrb	r3, [r3, #0]
}
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	b006      	add	sp, #24
 8003000:	bd80      	pop	{r7, pc}
 8003002:	46c0      	nop			; (mov r8, r8)

08003004 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	0018      	movs	r0, r3
 8003012:	f7ff fb3b 	bl	800268c <LL_ADC_REG_IsConversionOngoing>
 8003016:	1e03      	subs	r3, r0, #0
 8003018:	d031      	beq.n	800307e <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	0018      	movs	r0, r3
 8003020:	f7ff faff 	bl	8002622 <LL_ADC_IsDisableOngoing>
 8003024:	1e03      	subs	r3, r0, #0
 8003026:	d104      	bne.n	8003032 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	0018      	movs	r0, r3
 800302e:	f7ff fb1b 	bl	8002668 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003032:	f7ff f98f 	bl	8002354 <HAL_GetTick>
 8003036:	0003      	movs	r3, r0
 8003038:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800303a:	e01a      	b.n	8003072 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800303c:	f7ff f98a 	bl	8002354 <HAL_GetTick>
 8003040:	0002      	movs	r2, r0
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d913      	bls.n	8003072 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	2204      	movs	r2, #4
 8003052:	4013      	ands	r3, r2
 8003054:	d00d      	beq.n	8003072 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305a:	2210      	movs	r2, #16
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003066:	2201      	movs	r2, #1
 8003068:	431a      	orrs	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e006      	b.n	8003080 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2204      	movs	r2, #4
 800307a:	4013      	ands	r3, r2
 800307c:	d1de      	bne.n	800303c <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	b004      	add	sp, #16
 8003086:	bd80      	pop	{r7, pc}

08003088 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003090:	2300      	movs	r3, #0
 8003092:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	0018      	movs	r0, r3
 800309a:	f7ff fab1 	bl	8002600 <LL_ADC_IsEnabled>
 800309e:	1e03      	subs	r3, r0, #0
 80030a0:	d000      	beq.n	80030a4 <ADC_Enable+0x1c>
 80030a2:	e069      	b.n	8003178 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	4a36      	ldr	r2, [pc, #216]	; (8003184 <ADC_Enable+0xfc>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	d00d      	beq.n	80030cc <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b4:	2210      	movs	r2, #16
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c0:	2201      	movs	r2, #1
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e056      	b.n	800317a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	0018      	movs	r0, r3
 80030d2:	f7ff fa71 	bl	80025b8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80030d6:	4b2c      	ldr	r3, [pc, #176]	; (8003188 <ADC_Enable+0x100>)
 80030d8:	0018      	movs	r0, r3
 80030da:	f7ff f993 	bl	8002404 <LL_ADC_GetCommonPathInternalCh>
 80030de:	0002      	movs	r2, r0
 80030e0:	2380      	movs	r3, #128	; 0x80
 80030e2:	041b      	lsls	r3, r3, #16
 80030e4:	4013      	ands	r3, r2
 80030e6:	d00f      	beq.n	8003108 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030e8:	4b28      	ldr	r3, [pc, #160]	; (800318c <ADC_Enable+0x104>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4928      	ldr	r1, [pc, #160]	; (8003190 <ADC_Enable+0x108>)
 80030ee:	0018      	movs	r0, r3
 80030f0:	f7fd f806 	bl	8000100 <__udivsi3>
 80030f4:	0003      	movs	r3, r0
 80030f6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80030f8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80030fa:	e002      	b.n	8003102 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	3b01      	subs	r3, #1
 8003100:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1f9      	bne.n	80030fc <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	7e5b      	ldrb	r3, [r3, #25]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d033      	beq.n	8003178 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003110:	f7ff f920 	bl	8002354 <HAL_GetTick>
 8003114:	0003      	movs	r3, r0
 8003116:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003118:	e027      	b.n	800316a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	0018      	movs	r0, r3
 8003120:	f7ff fa6e 	bl	8002600 <LL_ADC_IsEnabled>
 8003124:	1e03      	subs	r3, r0, #0
 8003126:	d104      	bne.n	8003132 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	0018      	movs	r0, r3
 800312e:	f7ff fa43 	bl	80025b8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003132:	f7ff f90f 	bl	8002354 <HAL_GetTick>
 8003136:	0002      	movs	r2, r0
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d914      	bls.n	800316a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2201      	movs	r2, #1
 8003148:	4013      	ands	r3, r2
 800314a:	2b01      	cmp	r3, #1
 800314c:	d00d      	beq.n	800316a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003152:	2210      	movs	r2, #16
 8003154:	431a      	orrs	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315e:	2201      	movs	r2, #1
 8003160:	431a      	orrs	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e007      	b.n	800317a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2201      	movs	r2, #1
 8003172:	4013      	ands	r3, r2
 8003174:	2b01      	cmp	r3, #1
 8003176:	d1d0      	bne.n	800311a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	0018      	movs	r0, r3
 800317c:	46bd      	mov	sp, r7
 800317e:	b004      	add	sp, #16
 8003180:	bd80      	pop	{r7, pc}
 8003182:	46c0      	nop			; (mov r8, r8)
 8003184:	80000017 	.word	0x80000017
 8003188:	40012708 	.word	0x40012708
 800318c:	20000004 	.word	0x20000004
 8003190:	00030d40 	.word	0x00030d40

08003194 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	0018      	movs	r0, r3
 80031a2:	f7ff fa3e 	bl	8002622 <LL_ADC_IsDisableOngoing>
 80031a6:	0003      	movs	r3, r0
 80031a8:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	0018      	movs	r0, r3
 80031b0:	f7ff fa26 	bl	8002600 <LL_ADC_IsEnabled>
 80031b4:	1e03      	subs	r3, r0, #0
 80031b6:	d046      	beq.n	8003246 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d143      	bne.n	8003246 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2205      	movs	r2, #5
 80031c6:	4013      	ands	r3, r2
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d10d      	bne.n	80031e8 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	0018      	movs	r0, r3
 80031d2:	f7ff fa03 	bl	80025dc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2203      	movs	r2, #3
 80031dc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031de:	f7ff f8b9 	bl	8002354 <HAL_GetTick>
 80031e2:	0003      	movs	r3, r0
 80031e4:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031e6:	e028      	b.n	800323a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ec:	2210      	movs	r2, #16
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f8:	2201      	movs	r2, #1
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e021      	b.n	8003248 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003204:	f7ff f8a6 	bl	8002354 <HAL_GetTick>
 8003208:	0002      	movs	r2, r0
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d913      	bls.n	800323a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	2201      	movs	r2, #1
 800321a:	4013      	ands	r3, r2
 800321c:	d00d      	beq.n	800323a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003222:	2210      	movs	r2, #16
 8003224:	431a      	orrs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322e:	2201      	movs	r2, #1
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e006      	b.n	8003248 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	2201      	movs	r2, #1
 8003242:	4013      	ands	r3, r2
 8003244:	d1de      	bne.n	8003204 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	0018      	movs	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	b004      	add	sp, #16
 800324e:	bd80      	pop	{r7, pc}

08003250 <LL_ADC_SetCalibrationFactor>:
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	22b4      	movs	r2, #180	; 0xb4
 800325e:	589b      	ldr	r3, [r3, r2]
 8003260:	227f      	movs	r2, #127	; 0x7f
 8003262:	4393      	bics	r3, r2
 8003264:	001a      	movs	r2, r3
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	21b4      	movs	r1, #180	; 0xb4
 800326e:	505a      	str	r2, [r3, r1]
}
 8003270:	46c0      	nop			; (mov r8, r8)
 8003272:	46bd      	mov	sp, r7
 8003274:	b002      	add	sp, #8
 8003276:	bd80      	pop	{r7, pc}

08003278 <LL_ADC_GetCalibrationFactor>:
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	22b4      	movs	r2, #180	; 0xb4
 8003284:	589b      	ldr	r3, [r3, r2]
 8003286:	227f      	movs	r2, #127	; 0x7f
 8003288:	4013      	ands	r3, r2
}
 800328a:	0018      	movs	r0, r3
 800328c:	46bd      	mov	sp, r7
 800328e:	b002      	add	sp, #8
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <LL_ADC_Enable>:
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	4a04      	ldr	r2, [pc, #16]	; (80032b4 <LL_ADC_Enable+0x20>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	2201      	movs	r2, #1
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	609a      	str	r2, [r3, #8]
}
 80032ac:	46c0      	nop			; (mov r8, r8)
 80032ae:	46bd      	mov	sp, r7
 80032b0:	b002      	add	sp, #8
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	7fffffe8 	.word	0x7fffffe8

080032b8 <LL_ADC_Disable>:
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	4a04      	ldr	r2, [pc, #16]	; (80032d8 <LL_ADC_Disable+0x20>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	2202      	movs	r2, #2
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	609a      	str	r2, [r3, #8]
}
 80032d0:	46c0      	nop			; (mov r8, r8)
 80032d2:	46bd      	mov	sp, r7
 80032d4:	b002      	add	sp, #8
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	7fffffe8 	.word	0x7fffffe8

080032dc <LL_ADC_IsEnabled>:
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2201      	movs	r2, #1
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <LL_ADC_IsEnabled+0x18>
 80032f0:	2301      	movs	r3, #1
 80032f2:	e000      	b.n	80032f6 <LL_ADC_IsEnabled+0x1a>
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	0018      	movs	r0, r3
 80032f8:	46bd      	mov	sp, r7
 80032fa:	b002      	add	sp, #8
 80032fc:	bd80      	pop	{r7, pc}
	...

08003300 <LL_ADC_StartCalibration>:
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	4a05      	ldr	r2, [pc, #20]	; (8003324 <LL_ADC_StartCalibration+0x24>)
 800330e:	4013      	ands	r3, r2
 8003310:	2280      	movs	r2, #128	; 0x80
 8003312:	0612      	lsls	r2, r2, #24
 8003314:	431a      	orrs	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	609a      	str	r2, [r3, #8]
}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	46bd      	mov	sp, r7
 800331e:	b002      	add	sp, #8
 8003320:	bd80      	pop	{r7, pc}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	7fffffe8 	.word	0x7fffffe8

08003328 <LL_ADC_IsCalibrationOnGoing>:
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	0fdb      	lsrs	r3, r3, #31
 8003336:	07da      	lsls	r2, r3, #31
 8003338:	2380      	movs	r3, #128	; 0x80
 800333a:	061b      	lsls	r3, r3, #24
 800333c:	429a      	cmp	r2, r3
 800333e:	d101      	bne.n	8003344 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8003344:	2300      	movs	r3, #0
}
 8003346:	0018      	movs	r0, r3
 8003348:	46bd      	mov	sp, r7
 800334a:	b002      	add	sp, #8
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003350:	b590      	push	{r4, r7, lr}
 8003352:	b089      	sub	sp, #36	; 0x24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003358:	2300      	movs	r3, #0
 800335a:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800335c:	2300      	movs	r3, #0
 800335e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2254      	movs	r2, #84	; 0x54
 8003364:	5c9b      	ldrb	r3, [r3, r2]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_ADCEx_Calibration_Start+0x1e>
 800336a:	2302      	movs	r3, #2
 800336c:	e0ba      	b.n	80034e4 <HAL_ADCEx_Calibration_Start+0x194>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2254      	movs	r2, #84	; 0x54
 8003372:	2101      	movs	r1, #1
 8003374:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003376:	2317      	movs	r3, #23
 8003378:	18fc      	adds	r4, r7, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	0018      	movs	r0, r3
 800337e:	f7ff ff09 	bl	8003194 <ADC_Disable>
 8003382:	0003      	movs	r3, r0
 8003384:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	0018      	movs	r0, r3
 800338c:	f7ff ffa6 	bl	80032dc <LL_ADC_IsEnabled>
 8003390:	1e03      	subs	r3, r0, #0
 8003392:	d000      	beq.n	8003396 <HAL_ADCEx_Calibration_Start+0x46>
 8003394:	e099      	b.n	80034ca <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339a:	4a54      	ldr	r2, [pc, #336]	; (80034ec <HAL_ADCEx_Calibration_Start+0x19c>)
 800339c:	4013      	ands	r3, r2
 800339e:	2202      	movs	r2, #2
 80033a0:	431a      	orrs	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	4a50      	ldr	r2, [pc, #320]	; (80034f0 <HAL_ADCEx_Calibration_Start+0x1a0>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68da      	ldr	r2, [r3, #12]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	494d      	ldr	r1, [pc, #308]	; (80034f4 <HAL_ADCEx_Calibration_Start+0x1a4>)
 80033be:	400a      	ands	r2, r1
 80033c0:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80033c2:	2300      	movs	r3, #0
 80033c4:	61fb      	str	r3, [r7, #28]
 80033c6:	e02d      	b.n	8003424 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	0018      	movs	r0, r3
 80033ce:	f7ff ff97 	bl	8003300 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80033d2:	e014      	b.n	80033fe <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	3301      	adds	r3, #1
 80033d8:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	4a46      	ldr	r2, [pc, #280]	; (80034f8 <HAL_ADCEx_Calibration_Start+0x1a8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d90d      	bls.n	80033fe <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e6:	2212      	movs	r2, #18
 80033e8:	4393      	bics	r3, r2
 80033ea:	2210      	movs	r2, #16
 80033ec:	431a      	orrs	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2254      	movs	r2, #84	; 0x54
 80033f6:	2100      	movs	r1, #0
 80033f8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e072      	b.n	80034e4 <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	0018      	movs	r0, r3
 8003404:	f7ff ff90 	bl	8003328 <LL_ADC_IsCalibrationOnGoing>
 8003408:	1e03      	subs	r3, r0, #0
 800340a:	d1e3      	bne.n	80033d4 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	0018      	movs	r0, r3
 8003412:	f7ff ff31 	bl	8003278 <LL_ADC_GetCalibrationFactor>
 8003416:	0002      	movs	r2, r0
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	189b      	adds	r3, r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	3301      	adds	r3, #1
 8003422:	61fb      	str	r3, [r7, #28]
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	2b07      	cmp	r3, #7
 8003428:	d9ce      	bls.n	80033c8 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800342a:	69f9      	ldr	r1, [r7, #28]
 800342c:	69b8      	ldr	r0, [r7, #24]
 800342e:	f7fc fe67 	bl	8000100 <__udivsi3>
 8003432:	0003      	movs	r3, r0
 8003434:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	0018      	movs	r0, r3
 800343c:	f7ff ff2a 	bl	8003294 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	0011      	movs	r1, r2
 8003448:	0018      	movs	r0, r3
 800344a:	f7ff ff01 	bl	8003250 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	0018      	movs	r0, r3
 8003454:	f7ff ff30 	bl	80032b8 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003458:	f7fe ff7c 	bl	8002354 <HAL_GetTick>
 800345c:	0003      	movs	r3, r0
 800345e:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003460:	e01b      	b.n	800349a <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003462:	f7fe ff77 	bl	8002354 <HAL_GetTick>
 8003466:	0002      	movs	r2, r0
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d914      	bls.n	800349a <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	0018      	movs	r0, r3
 8003476:	f7ff ff31 	bl	80032dc <LL_ADC_IsEnabled>
 800347a:	1e03      	subs	r3, r0, #0
 800347c:	d00d      	beq.n	800349a <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003482:	2210      	movs	r2, #16
 8003484:	431a      	orrs	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348e:	2201      	movs	r2, #1
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e024      	b.n	80034e4 <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	0018      	movs	r0, r3
 80034a0:	f7ff ff1c 	bl	80032dc <LL_ADC_IsEnabled>
 80034a4:	1e03      	subs	r3, r0, #0
 80034a6:	d1dc      	bne.n	8003462 <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68d9      	ldr	r1, [r3, #12]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034bc:	2203      	movs	r2, #3
 80034be:	4393      	bics	r3, r2
 80034c0:	2201      	movs	r2, #1
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	659a      	str	r2, [r3, #88]	; 0x58
 80034c8:	e005      	b.n	80034d6 <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ce:	2210      	movs	r2, #16
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2254      	movs	r2, #84	; 0x54
 80034da:	2100      	movs	r1, #0
 80034dc:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80034de:	2317      	movs	r3, #23
 80034e0:	18fb      	adds	r3, r7, r3
 80034e2:	781b      	ldrb	r3, [r3, #0]
}
 80034e4:	0018      	movs	r0, r3
 80034e6:	46bd      	mov	sp, r7
 80034e8:	b009      	add	sp, #36	; 0x24
 80034ea:	bd90      	pop	{r4, r7, pc}
 80034ec:	fffffefd 	.word	0xfffffefd
 80034f0:	00008003 	.word	0x00008003
 80034f4:	ffff7ffc 	.word	0xffff7ffc
 80034f8:	0002f1ff 	.word	0x0002f1ff

080034fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	0002      	movs	r2, r0
 8003504:	1dfb      	adds	r3, r7, #7
 8003506:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003508:	1dfb      	adds	r3, r7, #7
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b7f      	cmp	r3, #127	; 0x7f
 800350e:	d809      	bhi.n	8003524 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003510:	1dfb      	adds	r3, r7, #7
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	001a      	movs	r2, r3
 8003516:	231f      	movs	r3, #31
 8003518:	401a      	ands	r2, r3
 800351a:	4b04      	ldr	r3, [pc, #16]	; (800352c <__NVIC_EnableIRQ+0x30>)
 800351c:	2101      	movs	r1, #1
 800351e:	4091      	lsls	r1, r2
 8003520:	000a      	movs	r2, r1
 8003522:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003524:	46c0      	nop			; (mov r8, r8)
 8003526:	46bd      	mov	sp, r7
 8003528:	b002      	add	sp, #8
 800352a:	bd80      	pop	{r7, pc}
 800352c:	e000e100 	.word	0xe000e100

08003530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003530:	b590      	push	{r4, r7, lr}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	0002      	movs	r2, r0
 8003538:	6039      	str	r1, [r7, #0]
 800353a:	1dfb      	adds	r3, r7, #7
 800353c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800353e:	1dfb      	adds	r3, r7, #7
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b7f      	cmp	r3, #127	; 0x7f
 8003544:	d828      	bhi.n	8003598 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003546:	4a2f      	ldr	r2, [pc, #188]	; (8003604 <__NVIC_SetPriority+0xd4>)
 8003548:	1dfb      	adds	r3, r7, #7
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	b25b      	sxtb	r3, r3
 800354e:	089b      	lsrs	r3, r3, #2
 8003550:	33c0      	adds	r3, #192	; 0xc0
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	589b      	ldr	r3, [r3, r2]
 8003556:	1dfa      	adds	r2, r7, #7
 8003558:	7812      	ldrb	r2, [r2, #0]
 800355a:	0011      	movs	r1, r2
 800355c:	2203      	movs	r2, #3
 800355e:	400a      	ands	r2, r1
 8003560:	00d2      	lsls	r2, r2, #3
 8003562:	21ff      	movs	r1, #255	; 0xff
 8003564:	4091      	lsls	r1, r2
 8003566:	000a      	movs	r2, r1
 8003568:	43d2      	mvns	r2, r2
 800356a:	401a      	ands	r2, r3
 800356c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	019b      	lsls	r3, r3, #6
 8003572:	22ff      	movs	r2, #255	; 0xff
 8003574:	401a      	ands	r2, r3
 8003576:	1dfb      	adds	r3, r7, #7
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	0018      	movs	r0, r3
 800357c:	2303      	movs	r3, #3
 800357e:	4003      	ands	r3, r0
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003584:	481f      	ldr	r0, [pc, #124]	; (8003604 <__NVIC_SetPriority+0xd4>)
 8003586:	1dfb      	adds	r3, r7, #7
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	b25b      	sxtb	r3, r3
 800358c:	089b      	lsrs	r3, r3, #2
 800358e:	430a      	orrs	r2, r1
 8003590:	33c0      	adds	r3, #192	; 0xc0
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003596:	e031      	b.n	80035fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003598:	4a1b      	ldr	r2, [pc, #108]	; (8003608 <__NVIC_SetPriority+0xd8>)
 800359a:	1dfb      	adds	r3, r7, #7
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	0019      	movs	r1, r3
 80035a0:	230f      	movs	r3, #15
 80035a2:	400b      	ands	r3, r1
 80035a4:	3b08      	subs	r3, #8
 80035a6:	089b      	lsrs	r3, r3, #2
 80035a8:	3306      	adds	r3, #6
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	18d3      	adds	r3, r2, r3
 80035ae:	3304      	adds	r3, #4
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	1dfa      	adds	r2, r7, #7
 80035b4:	7812      	ldrb	r2, [r2, #0]
 80035b6:	0011      	movs	r1, r2
 80035b8:	2203      	movs	r2, #3
 80035ba:	400a      	ands	r2, r1
 80035bc:	00d2      	lsls	r2, r2, #3
 80035be:	21ff      	movs	r1, #255	; 0xff
 80035c0:	4091      	lsls	r1, r2
 80035c2:	000a      	movs	r2, r1
 80035c4:	43d2      	mvns	r2, r2
 80035c6:	401a      	ands	r2, r3
 80035c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	019b      	lsls	r3, r3, #6
 80035ce:	22ff      	movs	r2, #255	; 0xff
 80035d0:	401a      	ands	r2, r3
 80035d2:	1dfb      	adds	r3, r7, #7
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	0018      	movs	r0, r3
 80035d8:	2303      	movs	r3, #3
 80035da:	4003      	ands	r3, r0
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035e0:	4809      	ldr	r0, [pc, #36]	; (8003608 <__NVIC_SetPriority+0xd8>)
 80035e2:	1dfb      	adds	r3, r7, #7
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	001c      	movs	r4, r3
 80035e8:	230f      	movs	r3, #15
 80035ea:	4023      	ands	r3, r4
 80035ec:	3b08      	subs	r3, #8
 80035ee:	089b      	lsrs	r3, r3, #2
 80035f0:	430a      	orrs	r2, r1
 80035f2:	3306      	adds	r3, #6
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	18c3      	adds	r3, r0, r3
 80035f8:	3304      	adds	r3, #4
 80035fa:	601a      	str	r2, [r3, #0]
}
 80035fc:	46c0      	nop			; (mov r8, r8)
 80035fe:	46bd      	mov	sp, r7
 8003600:	b003      	add	sp, #12
 8003602:	bd90      	pop	{r4, r7, pc}
 8003604:	e000e100 	.word	0xe000e100
 8003608:	e000ed00 	.word	0xe000ed00

0800360c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	1e5a      	subs	r2, r3, #1
 8003618:	2380      	movs	r3, #128	; 0x80
 800361a:	045b      	lsls	r3, r3, #17
 800361c:	429a      	cmp	r2, r3
 800361e:	d301      	bcc.n	8003624 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003620:	2301      	movs	r3, #1
 8003622:	e010      	b.n	8003646 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003624:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <SysTick_Config+0x44>)
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	3a01      	subs	r2, #1
 800362a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800362c:	2301      	movs	r3, #1
 800362e:	425b      	negs	r3, r3
 8003630:	2103      	movs	r1, #3
 8003632:	0018      	movs	r0, r3
 8003634:	f7ff ff7c 	bl	8003530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003638:	4b05      	ldr	r3, [pc, #20]	; (8003650 <SysTick_Config+0x44>)
 800363a:	2200      	movs	r2, #0
 800363c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800363e:	4b04      	ldr	r3, [pc, #16]	; (8003650 <SysTick_Config+0x44>)
 8003640:	2207      	movs	r2, #7
 8003642:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003644:	2300      	movs	r3, #0
}
 8003646:	0018      	movs	r0, r3
 8003648:	46bd      	mov	sp, r7
 800364a:	b002      	add	sp, #8
 800364c:	bd80      	pop	{r7, pc}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	e000e010 	.word	0xe000e010

08003654 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	607a      	str	r2, [r7, #4]
 800365e:	210f      	movs	r1, #15
 8003660:	187b      	adds	r3, r7, r1
 8003662:	1c02      	adds	r2, r0, #0
 8003664:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	187b      	adds	r3, r7, r1
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	b25b      	sxtb	r3, r3
 800366e:	0011      	movs	r1, r2
 8003670:	0018      	movs	r0, r3
 8003672:	f7ff ff5d 	bl	8003530 <__NVIC_SetPriority>
}
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	46bd      	mov	sp, r7
 800367a:	b004      	add	sp, #16
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b082      	sub	sp, #8
 8003682:	af00      	add	r7, sp, #0
 8003684:	0002      	movs	r2, r0
 8003686:	1dfb      	adds	r3, r7, #7
 8003688:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800368a:	1dfb      	adds	r3, r7, #7
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	b25b      	sxtb	r3, r3
 8003690:	0018      	movs	r0, r3
 8003692:	f7ff ff33 	bl	80034fc <__NVIC_EnableIRQ>
}
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	46bd      	mov	sp, r7
 800369a:	b002      	add	sp, #8
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b082      	sub	sp, #8
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	0018      	movs	r0, r3
 80036aa:	f7ff ffaf 	bl	800360c <SysTick_Config>
 80036ae:	0003      	movs	r3, r0
}
 80036b0:	0018      	movs	r0, r3
 80036b2:	46bd      	mov	sp, r7
 80036b4:	b002      	add	sp, #8
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e077      	b.n	80037ba <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a3d      	ldr	r2, [pc, #244]	; (80037c4 <HAL_DMA_Init+0x10c>)
 80036d0:	4694      	mov	ip, r2
 80036d2:	4463      	add	r3, ip
 80036d4:	2114      	movs	r1, #20
 80036d6:	0018      	movs	r0, r3
 80036d8:	f7fc fd12 	bl	8000100 <__udivsi3>
 80036dc:	0003      	movs	r3, r0
 80036de:	009a      	lsls	r2, r3, #2
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2225      	movs	r2, #37	; 0x25
 80036e8:	2102      	movs	r1, #2
 80036ea:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4934      	ldr	r1, [pc, #208]	; (80037c8 <HAL_DMA_Init+0x110>)
 80036f8:	400a      	ands	r2, r1
 80036fa:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6819      	ldr	r1, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689a      	ldr	r2, [r3, #8]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	431a      	orrs	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	0018      	movs	r0, r3
 8003736:	f000 f8fb 	bl	8003930 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	2380      	movs	r3, #128	; 0x80
 8003740:	01db      	lsls	r3, r3, #7
 8003742:	429a      	cmp	r2, r3
 8003744:	d102      	bne.n	800374c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003754:	213f      	movs	r1, #63	; 0x3f
 8003756:	400a      	ands	r2, r1
 8003758:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003762:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d011      	beq.n	8003790 <HAL_DMA_Init+0xd8>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2b04      	cmp	r3, #4
 8003772:	d80d      	bhi.n	8003790 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	0018      	movs	r0, r3
 8003778:	f000 f906 	bl	8003988 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	e008      	b.n	80037a2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2225      	movs	r2, #37	; 0x25
 80037ac:	2101      	movs	r1, #1
 80037ae:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2224      	movs	r2, #36	; 0x24
 80037b4:	2100      	movs	r1, #0
 80037b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	0018      	movs	r0, r3
 80037bc:	46bd      	mov	sp, r7
 80037be:	b002      	add	sp, #8
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	bffdfff8 	.word	0xbffdfff8
 80037c8:	ffff800f 	.word	0xffff800f

080037cc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80037d4:	4b55      	ldr	r3, [pc, #340]	; (800392c <HAL_DMA_IRQHandler+0x160>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	221c      	movs	r2, #28
 80037e8:	4013      	ands	r3, r2
 80037ea:	2204      	movs	r2, #4
 80037ec:	409a      	lsls	r2, r3
 80037ee:	0013      	movs	r3, r2
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	4013      	ands	r3, r2
 80037f4:	d027      	beq.n	8003846 <HAL_DMA_IRQHandler+0x7a>
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2204      	movs	r2, #4
 80037fa:	4013      	ands	r3, r2
 80037fc:	d023      	beq.n	8003846 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2220      	movs	r2, #32
 8003806:	4013      	ands	r3, r2
 8003808:	d107      	bne.n	800381a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2104      	movs	r1, #4
 8003816:	438a      	bics	r2, r1
 8003818:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800381a:	4b44      	ldr	r3, [pc, #272]	; (800392c <HAL_DMA_IRQHandler+0x160>)
 800381c:	6859      	ldr	r1, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	221c      	movs	r2, #28
 8003824:	4013      	ands	r3, r2
 8003826:	2204      	movs	r2, #4
 8003828:	409a      	lsls	r2, r3
 800382a:	4b40      	ldr	r3, [pc, #256]	; (800392c <HAL_DMA_IRQHandler+0x160>)
 800382c:	430a      	orrs	r2, r1
 800382e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003834:	2b00      	cmp	r3, #0
 8003836:	d100      	bne.n	800383a <HAL_DMA_IRQHandler+0x6e>
 8003838:	e073      	b.n	8003922 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	0010      	movs	r0, r2
 8003842:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003844:	e06d      	b.n	8003922 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	221c      	movs	r2, #28
 800384c:	4013      	ands	r3, r2
 800384e:	2202      	movs	r2, #2
 8003850:	409a      	lsls	r2, r3
 8003852:	0013      	movs	r3, r2
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	4013      	ands	r3, r2
 8003858:	d02e      	beq.n	80038b8 <HAL_DMA_IRQHandler+0xec>
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	2202      	movs	r2, #2
 800385e:	4013      	ands	r3, r2
 8003860:	d02a      	beq.n	80038b8 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2220      	movs	r2, #32
 800386a:	4013      	ands	r3, r2
 800386c:	d10b      	bne.n	8003886 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	210a      	movs	r1, #10
 800387a:	438a      	bics	r2, r1
 800387c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2225      	movs	r2, #37	; 0x25
 8003882:	2101      	movs	r1, #1
 8003884:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003886:	4b29      	ldr	r3, [pc, #164]	; (800392c <HAL_DMA_IRQHandler+0x160>)
 8003888:	6859      	ldr	r1, [r3, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	221c      	movs	r2, #28
 8003890:	4013      	ands	r3, r2
 8003892:	2202      	movs	r2, #2
 8003894:	409a      	lsls	r2, r3
 8003896:	4b25      	ldr	r3, [pc, #148]	; (800392c <HAL_DMA_IRQHandler+0x160>)
 8003898:	430a      	orrs	r2, r1
 800389a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2224      	movs	r2, #36	; 0x24
 80038a0:	2100      	movs	r1, #0
 80038a2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d03a      	beq.n	8003922 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	0010      	movs	r0, r2
 80038b4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80038b6:	e034      	b.n	8003922 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	221c      	movs	r2, #28
 80038be:	4013      	ands	r3, r2
 80038c0:	2208      	movs	r2, #8
 80038c2:	409a      	lsls	r2, r3
 80038c4:	0013      	movs	r3, r2
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	4013      	ands	r3, r2
 80038ca:	d02b      	beq.n	8003924 <HAL_DMA_IRQHandler+0x158>
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2208      	movs	r2, #8
 80038d0:	4013      	ands	r3, r2
 80038d2:	d027      	beq.n	8003924 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	210e      	movs	r1, #14
 80038e0:	438a      	bics	r2, r1
 80038e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80038e4:	4b11      	ldr	r3, [pc, #68]	; (800392c <HAL_DMA_IRQHandler+0x160>)
 80038e6:	6859      	ldr	r1, [r3, #4]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ec:	221c      	movs	r2, #28
 80038ee:	4013      	ands	r3, r2
 80038f0:	2201      	movs	r2, #1
 80038f2:	409a      	lsls	r2, r3
 80038f4:	4b0d      	ldr	r3, [pc, #52]	; (800392c <HAL_DMA_IRQHandler+0x160>)
 80038f6:	430a      	orrs	r2, r1
 80038f8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2225      	movs	r2, #37	; 0x25
 8003904:	2101      	movs	r1, #1
 8003906:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2224      	movs	r2, #36	; 0x24
 800390c:	2100      	movs	r1, #0
 800390e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	0010      	movs	r0, r2
 8003920:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	46c0      	nop			; (mov r8, r8)
}
 8003926:	46bd      	mov	sp, r7
 8003928:	b004      	add	sp, #16
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40020000 	.word	0x40020000

08003930 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	089b      	lsrs	r3, r3, #2
 800393e:	4a10      	ldr	r2, [pc, #64]	; (8003980 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003940:	4694      	mov	ip, r2
 8003942:	4463      	add	r3, ip
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	001a      	movs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	001a      	movs	r2, r3
 8003952:	23ff      	movs	r3, #255	; 0xff
 8003954:	4013      	ands	r3, r2
 8003956:	3b08      	subs	r3, #8
 8003958:	2114      	movs	r1, #20
 800395a:	0018      	movs	r0, r3
 800395c:	f7fc fbd0 	bl	8000100 <__udivsi3>
 8003960:	0003      	movs	r3, r0
 8003962:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a07      	ldr	r2, [pc, #28]	; (8003984 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003968:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	221f      	movs	r2, #31
 800396e:	4013      	ands	r3, r2
 8003970:	2201      	movs	r2, #1
 8003972:	409a      	lsls	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003978:	46c0      	nop			; (mov r8, r8)
 800397a:	46bd      	mov	sp, r7
 800397c:	b004      	add	sp, #16
 800397e:	bd80      	pop	{r7, pc}
 8003980:	10008200 	.word	0x10008200
 8003984:	40020880 	.word	0x40020880

08003988 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	223f      	movs	r2, #63	; 0x3f
 8003996:	4013      	ands	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4a0a      	ldr	r2, [pc, #40]	; (80039c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800399e:	4694      	mov	ip, r2
 80039a0:	4463      	add	r3, ip
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	001a      	movs	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a07      	ldr	r2, [pc, #28]	; (80039cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80039ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	3b01      	subs	r3, #1
 80039b4:	2203      	movs	r2, #3
 80039b6:	4013      	ands	r3, r2
 80039b8:	2201      	movs	r2, #1
 80039ba:	409a      	lsls	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	659a      	str	r2, [r3, #88]	; 0x58
}
 80039c0:	46c0      	nop			; (mov r8, r8)
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b004      	add	sp, #16
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	1000823f 	.word	0x1000823f
 80039cc:	40020940 	.word	0x40020940

080039d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039de:	e147      	b.n	8003c70 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2101      	movs	r1, #1
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	4091      	lsls	r1, r2
 80039ea:	000a      	movs	r2, r1
 80039ec:	4013      	ands	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d100      	bne.n	80039f8 <HAL_GPIO_Init+0x28>
 80039f6:	e138      	b.n	8003c6a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2203      	movs	r2, #3
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d005      	beq.n	8003a10 <HAL_GPIO_Init+0x40>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2203      	movs	r2, #3
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d130      	bne.n	8003a72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	2203      	movs	r2, #3
 8003a1c:	409a      	lsls	r2, r3
 8003a1e:	0013      	movs	r3, r2
 8003a20:	43da      	mvns	r2, r3
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4013      	ands	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	409a      	lsls	r2, r3
 8003a32:	0013      	movs	r3, r2
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a46:	2201      	movs	r2, #1
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	409a      	lsls	r2, r3
 8003a4c:	0013      	movs	r3, r2
 8003a4e:	43da      	mvns	r2, r3
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	4013      	ands	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	091b      	lsrs	r3, r3, #4
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	401a      	ands	r2, r3
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	409a      	lsls	r2, r3
 8003a64:	0013      	movs	r3, r2
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2203      	movs	r2, #3
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d017      	beq.n	8003aae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	2203      	movs	r2, #3
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	0013      	movs	r3, r2
 8003a8e:	43da      	mvns	r2, r3
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	4013      	ands	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	409a      	lsls	r2, r3
 8003aa0:	0013      	movs	r3, r2
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2203      	movs	r2, #3
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d123      	bne.n	8003b02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	08da      	lsrs	r2, r3, #3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3208      	adds	r2, #8
 8003ac2:	0092      	lsls	r2, r2, #2
 8003ac4:	58d3      	ldr	r3, [r2, r3]
 8003ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	2207      	movs	r2, #7
 8003acc:	4013      	ands	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	220f      	movs	r2, #15
 8003ad2:	409a      	lsls	r2, r3
 8003ad4:	0013      	movs	r3, r2
 8003ad6:	43da      	mvns	r2, r3
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	4013      	ands	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	691a      	ldr	r2, [r3, #16]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	2107      	movs	r1, #7
 8003ae6:	400b      	ands	r3, r1
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	409a      	lsls	r2, r3
 8003aec:	0013      	movs	r3, r2
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	08da      	lsrs	r2, r3, #3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3208      	adds	r2, #8
 8003afc:	0092      	lsls	r2, r2, #2
 8003afe:	6939      	ldr	r1, [r7, #16]
 8003b00:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	2203      	movs	r2, #3
 8003b0e:	409a      	lsls	r2, r3
 8003b10:	0013      	movs	r3, r2
 8003b12:	43da      	mvns	r2, r3
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	4013      	ands	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2203      	movs	r2, #3
 8003b20:	401a      	ands	r2, r3
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	409a      	lsls	r2, r3
 8003b28:	0013      	movs	r3, r2
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	23c0      	movs	r3, #192	; 0xc0
 8003b3c:	029b      	lsls	r3, r3, #10
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d100      	bne.n	8003b44 <HAL_GPIO_Init+0x174>
 8003b42:	e092      	b.n	8003c6a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003b44:	4a50      	ldr	r2, [pc, #320]	; (8003c88 <HAL_GPIO_Init+0x2b8>)
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	089b      	lsrs	r3, r3, #2
 8003b4a:	3318      	adds	r3, #24
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	589b      	ldr	r3, [r3, r2]
 8003b50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2203      	movs	r2, #3
 8003b56:	4013      	ands	r3, r2
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	220f      	movs	r2, #15
 8003b5c:	409a      	lsls	r2, r3
 8003b5e:	0013      	movs	r3, r2
 8003b60:	43da      	mvns	r2, r3
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	4013      	ands	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	23a0      	movs	r3, #160	; 0xa0
 8003b6c:	05db      	lsls	r3, r3, #23
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d013      	beq.n	8003b9a <HAL_GPIO_Init+0x1ca>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a45      	ldr	r2, [pc, #276]	; (8003c8c <HAL_GPIO_Init+0x2bc>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00d      	beq.n	8003b96 <HAL_GPIO_Init+0x1c6>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a44      	ldr	r2, [pc, #272]	; (8003c90 <HAL_GPIO_Init+0x2c0>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d007      	beq.n	8003b92 <HAL_GPIO_Init+0x1c2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a43      	ldr	r2, [pc, #268]	; (8003c94 <HAL_GPIO_Init+0x2c4>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d101      	bne.n	8003b8e <HAL_GPIO_Init+0x1be>
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e006      	b.n	8003b9c <HAL_GPIO_Init+0x1cc>
 8003b8e:	2305      	movs	r3, #5
 8003b90:	e004      	b.n	8003b9c <HAL_GPIO_Init+0x1cc>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e002      	b.n	8003b9c <HAL_GPIO_Init+0x1cc>
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <HAL_GPIO_Init+0x1cc>
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	2103      	movs	r1, #3
 8003ba0:	400a      	ands	r2, r1
 8003ba2:	00d2      	lsls	r2, r2, #3
 8003ba4:	4093      	lsls	r3, r2
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003bac:	4936      	ldr	r1, [pc, #216]	; (8003c88 <HAL_GPIO_Init+0x2b8>)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	089b      	lsrs	r3, r3, #2
 8003bb2:	3318      	adds	r3, #24
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bba:	4b33      	ldr	r3, [pc, #204]	; (8003c88 <HAL_GPIO_Init+0x2b8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	43da      	mvns	r2, r3
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	2380      	movs	r3, #128	; 0x80
 8003bd0:	035b      	lsls	r3, r3, #13
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	d003      	beq.n	8003bde <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bde:	4b2a      	ldr	r3, [pc, #168]	; (8003c88 <HAL_GPIO_Init+0x2b8>)
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003be4:	4b28      	ldr	r3, [pc, #160]	; (8003c88 <HAL_GPIO_Init+0x2b8>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	43da      	mvns	r2, r3
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	2380      	movs	r3, #128	; 0x80
 8003bfa:	039b      	lsls	r3, r3, #14
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	d003      	beq.n	8003c08 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c08:	4b1f      	ldr	r3, [pc, #124]	; (8003c88 <HAL_GPIO_Init+0x2b8>)
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c0e:	4a1e      	ldr	r2, [pc, #120]	; (8003c88 <HAL_GPIO_Init+0x2b8>)
 8003c10:	2384      	movs	r3, #132	; 0x84
 8003c12:	58d3      	ldr	r3, [r2, r3]
 8003c14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	43da      	mvns	r2, r3
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	2380      	movs	r3, #128	; 0x80
 8003c26:	029b      	lsls	r3, r3, #10
 8003c28:	4013      	ands	r3, r2
 8003c2a:	d003      	beq.n	8003c34 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c34:	4914      	ldr	r1, [pc, #80]	; (8003c88 <HAL_GPIO_Init+0x2b8>)
 8003c36:	2284      	movs	r2, #132	; 0x84
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003c3c:	4a12      	ldr	r2, [pc, #72]	; (8003c88 <HAL_GPIO_Init+0x2b8>)
 8003c3e:	2380      	movs	r3, #128	; 0x80
 8003c40:	58d3      	ldr	r3, [r2, r3]
 8003c42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	43da      	mvns	r2, r3
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	2380      	movs	r3, #128	; 0x80
 8003c54:	025b      	lsls	r3, r3, #9
 8003c56:	4013      	ands	r3, r2
 8003c58:	d003      	beq.n	8003c62 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c62:	4909      	ldr	r1, [pc, #36]	; (8003c88 <HAL_GPIO_Init+0x2b8>)
 8003c64:	2280      	movs	r2, #128	; 0x80
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	40da      	lsrs	r2, r3
 8003c78:	1e13      	subs	r3, r2, #0
 8003c7a:	d000      	beq.n	8003c7e <HAL_GPIO_Init+0x2ae>
 8003c7c:	e6b0      	b.n	80039e0 <HAL_GPIO_Init+0x10>
  }
}
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	46c0      	nop			; (mov r8, r8)
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b006      	add	sp, #24
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40021800 	.word	0x40021800
 8003c8c:	50000400 	.word	0x50000400
 8003c90:	50000800 	.word	0x50000800
 8003c94:	50000c00 	.word	0x50000c00

08003c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	0008      	movs	r0, r1
 8003ca2:	0011      	movs	r1, r2
 8003ca4:	1cbb      	adds	r3, r7, #2
 8003ca6:	1c02      	adds	r2, r0, #0
 8003ca8:	801a      	strh	r2, [r3, #0]
 8003caa:	1c7b      	adds	r3, r7, #1
 8003cac:	1c0a      	adds	r2, r1, #0
 8003cae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cb0:	1c7b      	adds	r3, r7, #1
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d004      	beq.n	8003cc2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cb8:	1cbb      	adds	r3, r7, #2
 8003cba:	881a      	ldrh	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cc0:	e003      	b.n	8003cca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cc2:	1cbb      	adds	r3, r7, #2
 8003cc4:	881a      	ldrh	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cca:	46c0      	nop			; (mov r8, r8)
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	b002      	add	sp, #8
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b084      	sub	sp, #16
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
 8003cda:	000a      	movs	r2, r1
 8003cdc:	1cbb      	adds	r3, r7, #2
 8003cde:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ce6:	1cbb      	adds	r3, r7, #2
 8003ce8:	881b      	ldrh	r3, [r3, #0]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	4013      	ands	r3, r2
 8003cee:	041a      	lsls	r2, r3, #16
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	1cb9      	adds	r1, r7, #2
 8003cf6:	8809      	ldrh	r1, [r1, #0]
 8003cf8:	400b      	ands	r3, r1
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	619a      	str	r2, [r3, #24]
}
 8003d00:	46c0      	nop			; (mov r8, r8)
 8003d02:	46bd      	mov	sp, r7
 8003d04:	b004      	add	sp, #16
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	0002      	movs	r2, r0
 8003d10:	1dbb      	adds	r3, r7, #6
 8003d12:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003d14:	4b10      	ldr	r3, [pc, #64]	; (8003d58 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	1dba      	adds	r2, r7, #6
 8003d1a:	8812      	ldrh	r2, [r2, #0]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d008      	beq.n	8003d32 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003d20:	4b0d      	ldr	r3, [pc, #52]	; (8003d58 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003d22:	1dba      	adds	r2, r7, #6
 8003d24:	8812      	ldrh	r2, [r2, #0]
 8003d26:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003d28:	1dbb      	adds	r3, r7, #6
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f7fc fb5d 	bl	80003ec <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8003d32:	4b09      	ldr	r3, [pc, #36]	; (8003d58 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	1dba      	adds	r2, r7, #6
 8003d38:	8812      	ldrh	r2, [r2, #0]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	d008      	beq.n	8003d50 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003d3e:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003d40:	1dba      	adds	r2, r7, #6
 8003d42:	8812      	ldrh	r2, [r2, #0]
 8003d44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003d46:	1dbb      	adds	r3, r7, #6
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f000 f806 	bl	8003d5c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003d50:	46c0      	nop			; (mov r8, r8)
 8003d52:	46bd      	mov	sp, r7
 8003d54:	b002      	add	sp, #8
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40021800 	.word	0x40021800

08003d5c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	0002      	movs	r2, r0
 8003d64:	1dbb      	adds	r3, r7, #6
 8003d66:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003d68:	46c0      	nop			; (mov r8, r8)
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	b002      	add	sp, #8
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003d78:	4b19      	ldr	r3, [pc, #100]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a19      	ldr	r2, [pc, #100]	; (8003de4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	0019      	movs	r1, r3
 8003d82:	4b17      	ldr	r3, [pc, #92]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	2380      	movs	r3, #128	; 0x80
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d11f      	bne.n	8003dd4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003d94:	4b14      	ldr	r3, [pc, #80]	; (8003de8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	0013      	movs	r3, r2
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	189b      	adds	r3, r3, r2
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	4912      	ldr	r1, [pc, #72]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003da2:	0018      	movs	r0, r3
 8003da4:	f7fc f9ac 	bl	8000100 <__udivsi3>
 8003da8:	0003      	movs	r3, r0
 8003daa:	3301      	adds	r3, #1
 8003dac:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dae:	e008      	b.n	8003dc2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	3b01      	subs	r3, #1
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	e001      	b.n	8003dc2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e009      	b.n	8003dd6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dc2:	4b07      	ldr	r3, [pc, #28]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003dc4:	695a      	ldr	r2, [r3, #20]
 8003dc6:	2380      	movs	r3, #128	; 0x80
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	401a      	ands	r2, r3
 8003dcc:	2380      	movs	r3, #128	; 0x80
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d0ed      	beq.n	8003db0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b004      	add	sp, #16
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	40007000 	.word	0x40007000
 8003de4:	fffff9ff 	.word	0xfffff9ff
 8003de8:	20000004 	.word	0x20000004
 8003dec:	000f4240 	.word	0x000f4240

08003df0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003df4:	4b03      	ldr	r3, [pc, #12]	; (8003e04 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	23e0      	movs	r3, #224	; 0xe0
 8003dfa:	01db      	lsls	r3, r3, #7
 8003dfc:	4013      	ands	r3, r2
}
 8003dfe:	0018      	movs	r0, r3
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40021000 	.word	0x40021000

08003e08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e2f3      	b.n	8004402 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	4013      	ands	r3, r2
 8003e22:	d100      	bne.n	8003e26 <HAL_RCC_OscConfig+0x1e>
 8003e24:	e07c      	b.n	8003f20 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e26:	4bc3      	ldr	r3, [pc, #780]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	2238      	movs	r2, #56	; 0x38
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e30:	4bc0      	ldr	r3, [pc, #768]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	2203      	movs	r2, #3
 8003e36:	4013      	ands	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	2b10      	cmp	r3, #16
 8003e3e:	d102      	bne.n	8003e46 <HAL_RCC_OscConfig+0x3e>
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	2b03      	cmp	r3, #3
 8003e44:	d002      	beq.n	8003e4c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d10b      	bne.n	8003e64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e4c:	4bb9      	ldr	r3, [pc, #740]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	2380      	movs	r3, #128	; 0x80
 8003e52:	029b      	lsls	r3, r3, #10
 8003e54:	4013      	ands	r3, r2
 8003e56:	d062      	beq.n	8003f1e <HAL_RCC_OscConfig+0x116>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d15e      	bne.n	8003f1e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e2ce      	b.n	8004402 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	2380      	movs	r3, #128	; 0x80
 8003e6a:	025b      	lsls	r3, r3, #9
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d107      	bne.n	8003e80 <HAL_RCC_OscConfig+0x78>
 8003e70:	4bb0      	ldr	r3, [pc, #704]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	4baf      	ldr	r3, [pc, #700]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8003e76:	2180      	movs	r1, #128	; 0x80
 8003e78:	0249      	lsls	r1, r1, #9
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	e020      	b.n	8003ec2 <HAL_RCC_OscConfig+0xba>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	23a0      	movs	r3, #160	; 0xa0
 8003e86:	02db      	lsls	r3, r3, #11
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d10e      	bne.n	8003eaa <HAL_RCC_OscConfig+0xa2>
 8003e8c:	4ba9      	ldr	r3, [pc, #676]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	4ba8      	ldr	r3, [pc, #672]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8003e92:	2180      	movs	r1, #128	; 0x80
 8003e94:	02c9      	lsls	r1, r1, #11
 8003e96:	430a      	orrs	r2, r1
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	4ba6      	ldr	r3, [pc, #664]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	4ba5      	ldr	r3, [pc, #660]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8003ea0:	2180      	movs	r1, #128	; 0x80
 8003ea2:	0249      	lsls	r1, r1, #9
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	e00b      	b.n	8003ec2 <HAL_RCC_OscConfig+0xba>
 8003eaa:	4ba2      	ldr	r3, [pc, #648]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	4ba1      	ldr	r3, [pc, #644]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8003eb0:	49a1      	ldr	r1, [pc, #644]	; (8004138 <HAL_RCC_OscConfig+0x330>)
 8003eb2:	400a      	ands	r2, r1
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	4b9f      	ldr	r3, [pc, #636]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	4b9e      	ldr	r3, [pc, #632]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8003ebc:	499f      	ldr	r1, [pc, #636]	; (800413c <HAL_RCC_OscConfig+0x334>)
 8003ebe:	400a      	ands	r2, r1
 8003ec0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d014      	beq.n	8003ef4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eca:	f7fe fa43 	bl	8002354 <HAL_GetTick>
 8003ece:	0003      	movs	r3, r0
 8003ed0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ed4:	f7fe fa3e 	bl	8002354 <HAL_GetTick>
 8003ed8:	0002      	movs	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b64      	cmp	r3, #100	; 0x64
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e28d      	b.n	8004402 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ee6:	4b93      	ldr	r3, [pc, #588]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	2380      	movs	r3, #128	; 0x80
 8003eec:	029b      	lsls	r3, r3, #10
 8003eee:	4013      	ands	r3, r2
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCC_OscConfig+0xcc>
 8003ef2:	e015      	b.n	8003f20 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef4:	f7fe fa2e 	bl	8002354 <HAL_GetTick>
 8003ef8:	0003      	movs	r3, r0
 8003efa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003efc:	e008      	b.n	8003f10 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003efe:	f7fe fa29 	bl	8002354 <HAL_GetTick>
 8003f02:	0002      	movs	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b64      	cmp	r3, #100	; 0x64
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e278      	b.n	8004402 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f10:	4b88      	ldr	r3, [pc, #544]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	2380      	movs	r3, #128	; 0x80
 8003f16:	029b      	lsls	r3, r3, #10
 8003f18:	4013      	ands	r3, r2
 8003f1a:	d1f0      	bne.n	8003efe <HAL_RCC_OscConfig+0xf6>
 8003f1c:	e000      	b.n	8003f20 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f1e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2202      	movs	r2, #2
 8003f26:	4013      	ands	r3, r2
 8003f28:	d100      	bne.n	8003f2c <HAL_RCC_OscConfig+0x124>
 8003f2a:	e099      	b.n	8004060 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f2c:	4b81      	ldr	r3, [pc, #516]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	2238      	movs	r2, #56	; 0x38
 8003f32:	4013      	ands	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f36:	4b7f      	ldr	r3, [pc, #508]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	2203      	movs	r2, #3
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	2b10      	cmp	r3, #16
 8003f44:	d102      	bne.n	8003f4c <HAL_RCC_OscConfig+0x144>
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d002      	beq.n	8003f52 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d135      	bne.n	8003fbe <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f52:	4b78      	ldr	r3, [pc, #480]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	2380      	movs	r3, #128	; 0x80
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	d005      	beq.n	8003f6a <HAL_RCC_OscConfig+0x162>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e24b      	b.n	8004402 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f6a:	4b72      	ldr	r3, [pc, #456]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	4a74      	ldr	r2, [pc, #464]	; (8004140 <HAL_RCC_OscConfig+0x338>)
 8003f70:	4013      	ands	r3, r2
 8003f72:	0019      	movs	r1, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	021a      	lsls	r2, r3, #8
 8003f7a:	4b6e      	ldr	r3, [pc, #440]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d112      	bne.n	8003fac <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003f86:	4b6b      	ldr	r3, [pc, #428]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a6e      	ldr	r2, [pc, #440]	; (8004144 <HAL_RCC_OscConfig+0x33c>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	0019      	movs	r1, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	4b67      	ldr	r3, [pc, #412]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8003f96:	430a      	orrs	r2, r1
 8003f98:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003f9a:	4b66      	ldr	r3, [pc, #408]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	0adb      	lsrs	r3, r3, #11
 8003fa0:	2207      	movs	r2, #7
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	4a68      	ldr	r2, [pc, #416]	; (8004148 <HAL_RCC_OscConfig+0x340>)
 8003fa6:	40da      	lsrs	r2, r3
 8003fa8:	4b68      	ldr	r3, [pc, #416]	; (800414c <HAL_RCC_OscConfig+0x344>)
 8003faa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003fac:	4b68      	ldr	r3, [pc, #416]	; (8004150 <HAL_RCC_OscConfig+0x348>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	f7fe f973 	bl	800229c <HAL_InitTick>
 8003fb6:	1e03      	subs	r3, r0, #0
 8003fb8:	d051      	beq.n	800405e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e221      	b.n	8004402 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d030      	beq.n	8004028 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003fc6:	4b5b      	ldr	r3, [pc, #364]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a5e      	ldr	r2, [pc, #376]	; (8004144 <HAL_RCC_OscConfig+0x33c>)
 8003fcc:	4013      	ands	r3, r2
 8003fce:	0019      	movs	r1, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	4b57      	ldr	r3, [pc, #348]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003fda:	4b56      	ldr	r3, [pc, #344]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	4b55      	ldr	r3, [pc, #340]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8003fe0:	2180      	movs	r1, #128	; 0x80
 8003fe2:	0049      	lsls	r1, r1, #1
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe8:	f7fe f9b4 	bl	8002354 <HAL_GetTick>
 8003fec:	0003      	movs	r3, r0
 8003fee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ff2:	f7fe f9af 	bl	8002354 <HAL_GetTick>
 8003ff6:	0002      	movs	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e1fe      	b.n	8004402 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004004:	4b4b      	ldr	r3, [pc, #300]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	2380      	movs	r3, #128	; 0x80
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	4013      	ands	r3, r2
 800400e:	d0f0      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004010:	4b48      	ldr	r3, [pc, #288]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	4a4a      	ldr	r2, [pc, #296]	; (8004140 <HAL_RCC_OscConfig+0x338>)
 8004016:	4013      	ands	r3, r2
 8004018:	0019      	movs	r1, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	021a      	lsls	r2, r3, #8
 8004020:	4b44      	ldr	r3, [pc, #272]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8004022:	430a      	orrs	r2, r1
 8004024:	605a      	str	r2, [r3, #4]
 8004026:	e01b      	b.n	8004060 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004028:	4b42      	ldr	r3, [pc, #264]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	4b41      	ldr	r3, [pc, #260]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 800402e:	4949      	ldr	r1, [pc, #292]	; (8004154 <HAL_RCC_OscConfig+0x34c>)
 8004030:	400a      	ands	r2, r1
 8004032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004034:	f7fe f98e 	bl	8002354 <HAL_GetTick>
 8004038:	0003      	movs	r3, r0
 800403a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800403c:	e008      	b.n	8004050 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800403e:	f7fe f989 	bl	8002354 <HAL_GetTick>
 8004042:	0002      	movs	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e1d8      	b.n	8004402 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004050:	4b38      	ldr	r3, [pc, #224]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	2380      	movs	r3, #128	; 0x80
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	4013      	ands	r3, r2
 800405a:	d1f0      	bne.n	800403e <HAL_RCC_OscConfig+0x236>
 800405c:	e000      	b.n	8004060 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800405e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2208      	movs	r2, #8
 8004066:	4013      	ands	r3, r2
 8004068:	d047      	beq.n	80040fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800406a:	4b32      	ldr	r3, [pc, #200]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	2238      	movs	r2, #56	; 0x38
 8004070:	4013      	ands	r3, r2
 8004072:	2b18      	cmp	r3, #24
 8004074:	d10a      	bne.n	800408c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004076:	4b2f      	ldr	r3, [pc, #188]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8004078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800407a:	2202      	movs	r2, #2
 800407c:	4013      	ands	r3, r2
 800407e:	d03c      	beq.n	80040fa <HAL_RCC_OscConfig+0x2f2>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d138      	bne.n	80040fa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e1ba      	b.n	8004402 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d019      	beq.n	80040c8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004094:	4b27      	ldr	r3, [pc, #156]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8004096:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004098:	4b26      	ldr	r3, [pc, #152]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 800409a:	2101      	movs	r1, #1
 800409c:	430a      	orrs	r2, r1
 800409e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a0:	f7fe f958 	bl	8002354 <HAL_GetTick>
 80040a4:	0003      	movs	r3, r0
 80040a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040a8:	e008      	b.n	80040bc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040aa:	f7fe f953 	bl	8002354 <HAL_GetTick>
 80040ae:	0002      	movs	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e1a2      	b.n	8004402 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040bc:	4b1d      	ldr	r3, [pc, #116]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 80040be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c0:	2202      	movs	r2, #2
 80040c2:	4013      	ands	r3, r2
 80040c4:	d0f1      	beq.n	80040aa <HAL_RCC_OscConfig+0x2a2>
 80040c6:	e018      	b.n	80040fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80040c8:	4b1a      	ldr	r3, [pc, #104]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 80040ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040cc:	4b19      	ldr	r3, [pc, #100]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 80040ce:	2101      	movs	r1, #1
 80040d0:	438a      	bics	r2, r1
 80040d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d4:	f7fe f93e 	bl	8002354 <HAL_GetTick>
 80040d8:	0003      	movs	r3, r0
 80040da:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040dc:	e008      	b.n	80040f0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040de:	f7fe f939 	bl	8002354 <HAL_GetTick>
 80040e2:	0002      	movs	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e188      	b.n	8004402 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040f0:	4b10      	ldr	r3, [pc, #64]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 80040f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f4:	2202      	movs	r2, #2
 80040f6:	4013      	ands	r3, r2
 80040f8:	d1f1      	bne.n	80040de <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2204      	movs	r2, #4
 8004100:	4013      	ands	r3, r2
 8004102:	d100      	bne.n	8004106 <HAL_RCC_OscConfig+0x2fe>
 8004104:	e0c6      	b.n	8004294 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004106:	231f      	movs	r3, #31
 8004108:	18fb      	adds	r3, r7, r3
 800410a:	2200      	movs	r2, #0
 800410c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800410e:	4b09      	ldr	r3, [pc, #36]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	2238      	movs	r2, #56	; 0x38
 8004114:	4013      	ands	r3, r2
 8004116:	2b20      	cmp	r3, #32
 8004118:	d11e      	bne.n	8004158 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800411a:	4b06      	ldr	r3, [pc, #24]	; (8004134 <HAL_RCC_OscConfig+0x32c>)
 800411c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411e:	2202      	movs	r2, #2
 8004120:	4013      	ands	r3, r2
 8004122:	d100      	bne.n	8004126 <HAL_RCC_OscConfig+0x31e>
 8004124:	e0b6      	b.n	8004294 <HAL_RCC_OscConfig+0x48c>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d000      	beq.n	8004130 <HAL_RCC_OscConfig+0x328>
 800412e:	e0b1      	b.n	8004294 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e166      	b.n	8004402 <HAL_RCC_OscConfig+0x5fa>
 8004134:	40021000 	.word	0x40021000
 8004138:	fffeffff 	.word	0xfffeffff
 800413c:	fffbffff 	.word	0xfffbffff
 8004140:	ffff80ff 	.word	0xffff80ff
 8004144:	ffffc7ff 	.word	0xffffc7ff
 8004148:	00f42400 	.word	0x00f42400
 800414c:	20000004 	.word	0x20000004
 8004150:	20000008 	.word	0x20000008
 8004154:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004158:	4bac      	ldr	r3, [pc, #688]	; (800440c <HAL_RCC_OscConfig+0x604>)
 800415a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800415c:	2380      	movs	r3, #128	; 0x80
 800415e:	055b      	lsls	r3, r3, #21
 8004160:	4013      	ands	r3, r2
 8004162:	d101      	bne.n	8004168 <HAL_RCC_OscConfig+0x360>
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <HAL_RCC_OscConfig+0x362>
 8004168:	2300      	movs	r3, #0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d011      	beq.n	8004192 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800416e:	4ba7      	ldr	r3, [pc, #668]	; (800440c <HAL_RCC_OscConfig+0x604>)
 8004170:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004172:	4ba6      	ldr	r3, [pc, #664]	; (800440c <HAL_RCC_OscConfig+0x604>)
 8004174:	2180      	movs	r1, #128	; 0x80
 8004176:	0549      	lsls	r1, r1, #21
 8004178:	430a      	orrs	r2, r1
 800417a:	63da      	str	r2, [r3, #60]	; 0x3c
 800417c:	4ba3      	ldr	r3, [pc, #652]	; (800440c <HAL_RCC_OscConfig+0x604>)
 800417e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004180:	2380      	movs	r3, #128	; 0x80
 8004182:	055b      	lsls	r3, r3, #21
 8004184:	4013      	ands	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800418a:	231f      	movs	r3, #31
 800418c:	18fb      	adds	r3, r7, r3
 800418e:	2201      	movs	r2, #1
 8004190:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004192:	4b9f      	ldr	r3, [pc, #636]	; (8004410 <HAL_RCC_OscConfig+0x608>)
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	2380      	movs	r3, #128	; 0x80
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	4013      	ands	r3, r2
 800419c:	d11a      	bne.n	80041d4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800419e:	4b9c      	ldr	r3, [pc, #624]	; (8004410 <HAL_RCC_OscConfig+0x608>)
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	4b9b      	ldr	r3, [pc, #620]	; (8004410 <HAL_RCC_OscConfig+0x608>)
 80041a4:	2180      	movs	r1, #128	; 0x80
 80041a6:	0049      	lsls	r1, r1, #1
 80041a8:	430a      	orrs	r2, r1
 80041aa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80041ac:	f7fe f8d2 	bl	8002354 <HAL_GetTick>
 80041b0:	0003      	movs	r3, r0
 80041b2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b6:	f7fe f8cd 	bl	8002354 <HAL_GetTick>
 80041ba:	0002      	movs	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e11c      	b.n	8004402 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041c8:	4b91      	ldr	r3, [pc, #580]	; (8004410 <HAL_RCC_OscConfig+0x608>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	2380      	movs	r3, #128	; 0x80
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	4013      	ands	r3, r2
 80041d2:	d0f0      	beq.n	80041b6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d106      	bne.n	80041ea <HAL_RCC_OscConfig+0x3e2>
 80041dc:	4b8b      	ldr	r3, [pc, #556]	; (800440c <HAL_RCC_OscConfig+0x604>)
 80041de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041e0:	4b8a      	ldr	r3, [pc, #552]	; (800440c <HAL_RCC_OscConfig+0x604>)
 80041e2:	2101      	movs	r1, #1
 80041e4:	430a      	orrs	r2, r1
 80041e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80041e8:	e01c      	b.n	8004224 <HAL_RCC_OscConfig+0x41c>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	2b05      	cmp	r3, #5
 80041f0:	d10c      	bne.n	800420c <HAL_RCC_OscConfig+0x404>
 80041f2:	4b86      	ldr	r3, [pc, #536]	; (800440c <HAL_RCC_OscConfig+0x604>)
 80041f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041f6:	4b85      	ldr	r3, [pc, #532]	; (800440c <HAL_RCC_OscConfig+0x604>)
 80041f8:	2104      	movs	r1, #4
 80041fa:	430a      	orrs	r2, r1
 80041fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80041fe:	4b83      	ldr	r3, [pc, #524]	; (800440c <HAL_RCC_OscConfig+0x604>)
 8004200:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004202:	4b82      	ldr	r3, [pc, #520]	; (800440c <HAL_RCC_OscConfig+0x604>)
 8004204:	2101      	movs	r1, #1
 8004206:	430a      	orrs	r2, r1
 8004208:	65da      	str	r2, [r3, #92]	; 0x5c
 800420a:	e00b      	b.n	8004224 <HAL_RCC_OscConfig+0x41c>
 800420c:	4b7f      	ldr	r3, [pc, #508]	; (800440c <HAL_RCC_OscConfig+0x604>)
 800420e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004210:	4b7e      	ldr	r3, [pc, #504]	; (800440c <HAL_RCC_OscConfig+0x604>)
 8004212:	2101      	movs	r1, #1
 8004214:	438a      	bics	r2, r1
 8004216:	65da      	str	r2, [r3, #92]	; 0x5c
 8004218:	4b7c      	ldr	r3, [pc, #496]	; (800440c <HAL_RCC_OscConfig+0x604>)
 800421a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800421c:	4b7b      	ldr	r3, [pc, #492]	; (800440c <HAL_RCC_OscConfig+0x604>)
 800421e:	2104      	movs	r1, #4
 8004220:	438a      	bics	r2, r1
 8004222:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d014      	beq.n	8004256 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422c:	f7fe f892 	bl	8002354 <HAL_GetTick>
 8004230:	0003      	movs	r3, r0
 8004232:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004234:	e009      	b.n	800424a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004236:	f7fe f88d 	bl	8002354 <HAL_GetTick>
 800423a:	0002      	movs	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	4a74      	ldr	r2, [pc, #464]	; (8004414 <HAL_RCC_OscConfig+0x60c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e0db      	b.n	8004402 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800424a:	4b70      	ldr	r3, [pc, #448]	; (800440c <HAL_RCC_OscConfig+0x604>)
 800424c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424e:	2202      	movs	r2, #2
 8004250:	4013      	ands	r3, r2
 8004252:	d0f0      	beq.n	8004236 <HAL_RCC_OscConfig+0x42e>
 8004254:	e013      	b.n	800427e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004256:	f7fe f87d 	bl	8002354 <HAL_GetTick>
 800425a:	0003      	movs	r3, r0
 800425c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800425e:	e009      	b.n	8004274 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004260:	f7fe f878 	bl	8002354 <HAL_GetTick>
 8004264:	0002      	movs	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	4a6a      	ldr	r2, [pc, #424]	; (8004414 <HAL_RCC_OscConfig+0x60c>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e0c6      	b.n	8004402 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004274:	4b65      	ldr	r3, [pc, #404]	; (800440c <HAL_RCC_OscConfig+0x604>)
 8004276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004278:	2202      	movs	r2, #2
 800427a:	4013      	ands	r3, r2
 800427c:	d1f0      	bne.n	8004260 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800427e:	231f      	movs	r3, #31
 8004280:	18fb      	adds	r3, r7, r3
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d105      	bne.n	8004294 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004288:	4b60      	ldr	r3, [pc, #384]	; (800440c <HAL_RCC_OscConfig+0x604>)
 800428a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800428c:	4b5f      	ldr	r3, [pc, #380]	; (800440c <HAL_RCC_OscConfig+0x604>)
 800428e:	4962      	ldr	r1, [pc, #392]	; (8004418 <HAL_RCC_OscConfig+0x610>)
 8004290:	400a      	ands	r2, r1
 8004292:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d100      	bne.n	800429e <HAL_RCC_OscConfig+0x496>
 800429c:	e0b0      	b.n	8004400 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800429e:	4b5b      	ldr	r3, [pc, #364]	; (800440c <HAL_RCC_OscConfig+0x604>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	2238      	movs	r2, #56	; 0x38
 80042a4:	4013      	ands	r3, r2
 80042a6:	2b10      	cmp	r3, #16
 80042a8:	d100      	bne.n	80042ac <HAL_RCC_OscConfig+0x4a4>
 80042aa:	e078      	b.n	800439e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d153      	bne.n	800435c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042b4:	4b55      	ldr	r3, [pc, #340]	; (800440c <HAL_RCC_OscConfig+0x604>)
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	4b54      	ldr	r3, [pc, #336]	; (800440c <HAL_RCC_OscConfig+0x604>)
 80042ba:	4958      	ldr	r1, [pc, #352]	; (800441c <HAL_RCC_OscConfig+0x614>)
 80042bc:	400a      	ands	r2, r1
 80042be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c0:	f7fe f848 	bl	8002354 <HAL_GetTick>
 80042c4:	0003      	movs	r3, r0
 80042c6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ca:	f7fe f843 	bl	8002354 <HAL_GetTick>
 80042ce:	0002      	movs	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e092      	b.n	8004402 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042dc:	4b4b      	ldr	r3, [pc, #300]	; (800440c <HAL_RCC_OscConfig+0x604>)
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	2380      	movs	r3, #128	; 0x80
 80042e2:	049b      	lsls	r3, r3, #18
 80042e4:	4013      	ands	r3, r2
 80042e6:	d1f0      	bne.n	80042ca <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042e8:	4b48      	ldr	r3, [pc, #288]	; (800440c <HAL_RCC_OscConfig+0x604>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	4a4c      	ldr	r2, [pc, #304]	; (8004420 <HAL_RCC_OscConfig+0x618>)
 80042ee:	4013      	ands	r3, r2
 80042f0:	0019      	movs	r1, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1a      	ldr	r2, [r3, #32]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	431a      	orrs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004300:	021b      	lsls	r3, r3, #8
 8004302:	431a      	orrs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004308:	431a      	orrs	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430e:	431a      	orrs	r2, r3
 8004310:	4b3e      	ldr	r3, [pc, #248]	; (800440c <HAL_RCC_OscConfig+0x604>)
 8004312:	430a      	orrs	r2, r1
 8004314:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004316:	4b3d      	ldr	r3, [pc, #244]	; (800440c <HAL_RCC_OscConfig+0x604>)
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	4b3c      	ldr	r3, [pc, #240]	; (800440c <HAL_RCC_OscConfig+0x604>)
 800431c:	2180      	movs	r1, #128	; 0x80
 800431e:	0449      	lsls	r1, r1, #17
 8004320:	430a      	orrs	r2, r1
 8004322:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004324:	4b39      	ldr	r3, [pc, #228]	; (800440c <HAL_RCC_OscConfig+0x604>)
 8004326:	68da      	ldr	r2, [r3, #12]
 8004328:	4b38      	ldr	r3, [pc, #224]	; (800440c <HAL_RCC_OscConfig+0x604>)
 800432a:	2180      	movs	r1, #128	; 0x80
 800432c:	0549      	lsls	r1, r1, #21
 800432e:	430a      	orrs	r2, r1
 8004330:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004332:	f7fe f80f 	bl	8002354 <HAL_GetTick>
 8004336:	0003      	movs	r3, r0
 8004338:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800433c:	f7fe f80a 	bl	8002354 <HAL_GetTick>
 8004340:	0002      	movs	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e059      	b.n	8004402 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800434e:	4b2f      	ldr	r3, [pc, #188]	; (800440c <HAL_RCC_OscConfig+0x604>)
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	2380      	movs	r3, #128	; 0x80
 8004354:	049b      	lsls	r3, r3, #18
 8004356:	4013      	ands	r3, r2
 8004358:	d0f0      	beq.n	800433c <HAL_RCC_OscConfig+0x534>
 800435a:	e051      	b.n	8004400 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435c:	4b2b      	ldr	r3, [pc, #172]	; (800440c <HAL_RCC_OscConfig+0x604>)
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	4b2a      	ldr	r3, [pc, #168]	; (800440c <HAL_RCC_OscConfig+0x604>)
 8004362:	492e      	ldr	r1, [pc, #184]	; (800441c <HAL_RCC_OscConfig+0x614>)
 8004364:	400a      	ands	r2, r1
 8004366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004368:	f7fd fff4 	bl	8002354 <HAL_GetTick>
 800436c:	0003      	movs	r3, r0
 800436e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004370:	e008      	b.n	8004384 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004372:	f7fd ffef 	bl	8002354 <HAL_GetTick>
 8004376:	0002      	movs	r2, r0
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d901      	bls.n	8004384 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e03e      	b.n	8004402 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004384:	4b21      	ldr	r3, [pc, #132]	; (800440c <HAL_RCC_OscConfig+0x604>)
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	2380      	movs	r3, #128	; 0x80
 800438a:	049b      	lsls	r3, r3, #18
 800438c:	4013      	ands	r3, r2
 800438e:	d1f0      	bne.n	8004372 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004390:	4b1e      	ldr	r3, [pc, #120]	; (800440c <HAL_RCC_OscConfig+0x604>)
 8004392:	68da      	ldr	r2, [r3, #12]
 8004394:	4b1d      	ldr	r3, [pc, #116]	; (800440c <HAL_RCC_OscConfig+0x604>)
 8004396:	4923      	ldr	r1, [pc, #140]	; (8004424 <HAL_RCC_OscConfig+0x61c>)
 8004398:	400a      	ands	r2, r1
 800439a:	60da      	str	r2, [r3, #12]
 800439c:	e030      	b.n	8004400 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d101      	bne.n	80043aa <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e02b      	b.n	8004402 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80043aa:	4b18      	ldr	r3, [pc, #96]	; (800440c <HAL_RCC_OscConfig+0x604>)
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	2203      	movs	r2, #3
 80043b4:	401a      	ands	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d11e      	bne.n	80043fc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2270      	movs	r2, #112	; 0x70
 80043c2:	401a      	ands	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d117      	bne.n	80043fc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	23fe      	movs	r3, #254	; 0xfe
 80043d0:	01db      	lsls	r3, r3, #7
 80043d2:	401a      	ands	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043da:	429a      	cmp	r2, r3
 80043dc:	d10e      	bne.n	80043fc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	23f8      	movs	r3, #248	; 0xf8
 80043e2:	039b      	lsls	r3, r3, #14
 80043e4:	401a      	ands	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d106      	bne.n	80043fc <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	0f5b      	lsrs	r3, r3, #29
 80043f2:	075a      	lsls	r2, r3, #29
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d001      	beq.n	8004400 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e000      	b.n	8004402 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	0018      	movs	r0, r3
 8004404:	46bd      	mov	sp, r7
 8004406:	b008      	add	sp, #32
 8004408:	bd80      	pop	{r7, pc}
 800440a:	46c0      	nop			; (mov r8, r8)
 800440c:	40021000 	.word	0x40021000
 8004410:	40007000 	.word	0x40007000
 8004414:	00001388 	.word	0x00001388
 8004418:	efffffff 	.word	0xefffffff
 800441c:	feffffff 	.word	0xfeffffff
 8004420:	1fc1808c 	.word	0x1fc1808c
 8004424:	effefffc 	.word	0xeffefffc

08004428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e0e9      	b.n	8004610 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800443c:	4b76      	ldr	r3, [pc, #472]	; (8004618 <HAL_RCC_ClockConfig+0x1f0>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2207      	movs	r2, #7
 8004442:	4013      	ands	r3, r2
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d91e      	bls.n	8004488 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444a:	4b73      	ldr	r3, [pc, #460]	; (8004618 <HAL_RCC_ClockConfig+0x1f0>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2207      	movs	r2, #7
 8004450:	4393      	bics	r3, r2
 8004452:	0019      	movs	r1, r3
 8004454:	4b70      	ldr	r3, [pc, #448]	; (8004618 <HAL_RCC_ClockConfig+0x1f0>)
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800445c:	f7fd ff7a 	bl	8002354 <HAL_GetTick>
 8004460:	0003      	movs	r3, r0
 8004462:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004464:	e009      	b.n	800447a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004466:	f7fd ff75 	bl	8002354 <HAL_GetTick>
 800446a:	0002      	movs	r2, r0
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	4a6a      	ldr	r2, [pc, #424]	; (800461c <HAL_RCC_ClockConfig+0x1f4>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d901      	bls.n	800447a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e0ca      	b.n	8004610 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800447a:	4b67      	ldr	r3, [pc, #412]	; (8004618 <HAL_RCC_ClockConfig+0x1f0>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2207      	movs	r2, #7
 8004480:	4013      	ands	r3, r2
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	429a      	cmp	r2, r3
 8004486:	d1ee      	bne.n	8004466 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2202      	movs	r2, #2
 800448e:	4013      	ands	r3, r2
 8004490:	d015      	beq.n	80044be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2204      	movs	r2, #4
 8004498:	4013      	ands	r3, r2
 800449a:	d006      	beq.n	80044aa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800449c:	4b60      	ldr	r3, [pc, #384]	; (8004620 <HAL_RCC_ClockConfig+0x1f8>)
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	4b5f      	ldr	r3, [pc, #380]	; (8004620 <HAL_RCC_ClockConfig+0x1f8>)
 80044a2:	21e0      	movs	r1, #224	; 0xe0
 80044a4:	01c9      	lsls	r1, r1, #7
 80044a6:	430a      	orrs	r2, r1
 80044a8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044aa:	4b5d      	ldr	r3, [pc, #372]	; (8004620 <HAL_RCC_ClockConfig+0x1f8>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	4a5d      	ldr	r2, [pc, #372]	; (8004624 <HAL_RCC_ClockConfig+0x1fc>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	0019      	movs	r1, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689a      	ldr	r2, [r3, #8]
 80044b8:	4b59      	ldr	r3, [pc, #356]	; (8004620 <HAL_RCC_ClockConfig+0x1f8>)
 80044ba:	430a      	orrs	r2, r1
 80044bc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2201      	movs	r2, #1
 80044c4:	4013      	ands	r3, r2
 80044c6:	d057      	beq.n	8004578 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d107      	bne.n	80044e0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044d0:	4b53      	ldr	r3, [pc, #332]	; (8004620 <HAL_RCC_ClockConfig+0x1f8>)
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	2380      	movs	r3, #128	; 0x80
 80044d6:	029b      	lsls	r3, r3, #10
 80044d8:	4013      	ands	r3, r2
 80044da:	d12b      	bne.n	8004534 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e097      	b.n	8004610 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d107      	bne.n	80044f8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044e8:	4b4d      	ldr	r3, [pc, #308]	; (8004620 <HAL_RCC_ClockConfig+0x1f8>)
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	2380      	movs	r3, #128	; 0x80
 80044ee:	049b      	lsls	r3, r3, #18
 80044f0:	4013      	ands	r3, r2
 80044f2:	d11f      	bne.n	8004534 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e08b      	b.n	8004610 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d107      	bne.n	8004510 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004500:	4b47      	ldr	r3, [pc, #284]	; (8004620 <HAL_RCC_ClockConfig+0x1f8>)
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	2380      	movs	r3, #128	; 0x80
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	4013      	ands	r3, r2
 800450a:	d113      	bne.n	8004534 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e07f      	b.n	8004610 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2b03      	cmp	r3, #3
 8004516:	d106      	bne.n	8004526 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004518:	4b41      	ldr	r3, [pc, #260]	; (8004620 <HAL_RCC_ClockConfig+0x1f8>)
 800451a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800451c:	2202      	movs	r2, #2
 800451e:	4013      	ands	r3, r2
 8004520:	d108      	bne.n	8004534 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e074      	b.n	8004610 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004526:	4b3e      	ldr	r3, [pc, #248]	; (8004620 <HAL_RCC_ClockConfig+0x1f8>)
 8004528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800452a:	2202      	movs	r2, #2
 800452c:	4013      	ands	r3, r2
 800452e:	d101      	bne.n	8004534 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e06d      	b.n	8004610 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004534:	4b3a      	ldr	r3, [pc, #232]	; (8004620 <HAL_RCC_ClockConfig+0x1f8>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	2207      	movs	r2, #7
 800453a:	4393      	bics	r3, r2
 800453c:	0019      	movs	r1, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	4b37      	ldr	r3, [pc, #220]	; (8004620 <HAL_RCC_ClockConfig+0x1f8>)
 8004544:	430a      	orrs	r2, r1
 8004546:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004548:	f7fd ff04 	bl	8002354 <HAL_GetTick>
 800454c:	0003      	movs	r3, r0
 800454e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004550:	e009      	b.n	8004566 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004552:	f7fd feff 	bl	8002354 <HAL_GetTick>
 8004556:	0002      	movs	r2, r0
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	4a2f      	ldr	r2, [pc, #188]	; (800461c <HAL_RCC_ClockConfig+0x1f4>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e054      	b.n	8004610 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004566:	4b2e      	ldr	r3, [pc, #184]	; (8004620 <HAL_RCC_ClockConfig+0x1f8>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	2238      	movs	r2, #56	; 0x38
 800456c:	401a      	ands	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	429a      	cmp	r2, r3
 8004576:	d1ec      	bne.n	8004552 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004578:	4b27      	ldr	r3, [pc, #156]	; (8004618 <HAL_RCC_ClockConfig+0x1f0>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2207      	movs	r2, #7
 800457e:	4013      	ands	r3, r2
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	429a      	cmp	r2, r3
 8004584:	d21e      	bcs.n	80045c4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004586:	4b24      	ldr	r3, [pc, #144]	; (8004618 <HAL_RCC_ClockConfig+0x1f0>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2207      	movs	r2, #7
 800458c:	4393      	bics	r3, r2
 800458e:	0019      	movs	r1, r3
 8004590:	4b21      	ldr	r3, [pc, #132]	; (8004618 <HAL_RCC_ClockConfig+0x1f0>)
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004598:	f7fd fedc 	bl	8002354 <HAL_GetTick>
 800459c:	0003      	movs	r3, r0
 800459e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80045a0:	e009      	b.n	80045b6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045a2:	f7fd fed7 	bl	8002354 <HAL_GetTick>
 80045a6:	0002      	movs	r2, r0
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	4a1b      	ldr	r2, [pc, #108]	; (800461c <HAL_RCC_ClockConfig+0x1f4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e02c      	b.n	8004610 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80045b6:	4b18      	ldr	r3, [pc, #96]	; (8004618 <HAL_RCC_ClockConfig+0x1f0>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2207      	movs	r2, #7
 80045bc:	4013      	ands	r3, r2
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d1ee      	bne.n	80045a2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2204      	movs	r2, #4
 80045ca:	4013      	ands	r3, r2
 80045cc:	d009      	beq.n	80045e2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80045ce:	4b14      	ldr	r3, [pc, #80]	; (8004620 <HAL_RCC_ClockConfig+0x1f8>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	4a15      	ldr	r2, [pc, #84]	; (8004628 <HAL_RCC_ClockConfig+0x200>)
 80045d4:	4013      	ands	r3, r2
 80045d6:	0019      	movs	r1, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68da      	ldr	r2, [r3, #12]
 80045dc:	4b10      	ldr	r3, [pc, #64]	; (8004620 <HAL_RCC_ClockConfig+0x1f8>)
 80045de:	430a      	orrs	r2, r1
 80045e0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80045e2:	f000 f829 	bl	8004638 <HAL_RCC_GetSysClockFreq>
 80045e6:	0001      	movs	r1, r0
 80045e8:	4b0d      	ldr	r3, [pc, #52]	; (8004620 <HAL_RCC_ClockConfig+0x1f8>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	0a1b      	lsrs	r3, r3, #8
 80045ee:	220f      	movs	r2, #15
 80045f0:	401a      	ands	r2, r3
 80045f2:	4b0e      	ldr	r3, [pc, #56]	; (800462c <HAL_RCC_ClockConfig+0x204>)
 80045f4:	0092      	lsls	r2, r2, #2
 80045f6:	58d3      	ldr	r3, [r2, r3]
 80045f8:	221f      	movs	r2, #31
 80045fa:	4013      	ands	r3, r2
 80045fc:	000a      	movs	r2, r1
 80045fe:	40da      	lsrs	r2, r3
 8004600:	4b0b      	ldr	r3, [pc, #44]	; (8004630 <HAL_RCC_ClockConfig+0x208>)
 8004602:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004604:	4b0b      	ldr	r3, [pc, #44]	; (8004634 <HAL_RCC_ClockConfig+0x20c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	0018      	movs	r0, r3
 800460a:	f7fd fe47 	bl	800229c <HAL_InitTick>
 800460e:	0003      	movs	r3, r0
}
 8004610:	0018      	movs	r0, r3
 8004612:	46bd      	mov	sp, r7
 8004614:	b004      	add	sp, #16
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40022000 	.word	0x40022000
 800461c:	00001388 	.word	0x00001388
 8004620:	40021000 	.word	0x40021000
 8004624:	fffff0ff 	.word	0xfffff0ff
 8004628:	ffff8fff 	.word	0xffff8fff
 800462c:	08006af0 	.word	0x08006af0
 8004630:	20000004 	.word	0x20000004
 8004634:	20000008 	.word	0x20000008

08004638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800463e:	4b3c      	ldr	r3, [pc, #240]	; (8004730 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	2238      	movs	r2, #56	; 0x38
 8004644:	4013      	ands	r3, r2
 8004646:	d10f      	bne.n	8004668 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004648:	4b39      	ldr	r3, [pc, #228]	; (8004730 <HAL_RCC_GetSysClockFreq+0xf8>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	0adb      	lsrs	r3, r3, #11
 800464e:	2207      	movs	r2, #7
 8004650:	4013      	ands	r3, r2
 8004652:	2201      	movs	r2, #1
 8004654:	409a      	lsls	r2, r3
 8004656:	0013      	movs	r3, r2
 8004658:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800465a:	6839      	ldr	r1, [r7, #0]
 800465c:	4835      	ldr	r0, [pc, #212]	; (8004734 <HAL_RCC_GetSysClockFreq+0xfc>)
 800465e:	f7fb fd4f 	bl	8000100 <__udivsi3>
 8004662:	0003      	movs	r3, r0
 8004664:	613b      	str	r3, [r7, #16]
 8004666:	e05d      	b.n	8004724 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004668:	4b31      	ldr	r3, [pc, #196]	; (8004730 <HAL_RCC_GetSysClockFreq+0xf8>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	2238      	movs	r2, #56	; 0x38
 800466e:	4013      	ands	r3, r2
 8004670:	2b08      	cmp	r3, #8
 8004672:	d102      	bne.n	800467a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004674:	4b2f      	ldr	r3, [pc, #188]	; (8004734 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004676:	613b      	str	r3, [r7, #16]
 8004678:	e054      	b.n	8004724 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800467a:	4b2d      	ldr	r3, [pc, #180]	; (8004730 <HAL_RCC_GetSysClockFreq+0xf8>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	2238      	movs	r2, #56	; 0x38
 8004680:	4013      	ands	r3, r2
 8004682:	2b10      	cmp	r3, #16
 8004684:	d138      	bne.n	80046f8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004686:	4b2a      	ldr	r3, [pc, #168]	; (8004730 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	2203      	movs	r2, #3
 800468c:	4013      	ands	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004690:	4b27      	ldr	r3, [pc, #156]	; (8004730 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	091b      	lsrs	r3, r3, #4
 8004696:	2207      	movs	r2, #7
 8004698:	4013      	ands	r3, r2
 800469a:	3301      	adds	r3, #1
 800469c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2b03      	cmp	r3, #3
 80046a2:	d10d      	bne.n	80046c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	4823      	ldr	r0, [pc, #140]	; (8004734 <HAL_RCC_GetSysClockFreq+0xfc>)
 80046a8:	f7fb fd2a 	bl	8000100 <__udivsi3>
 80046ac:	0003      	movs	r3, r0
 80046ae:	0019      	movs	r1, r3
 80046b0:	4b1f      	ldr	r3, [pc, #124]	; (8004730 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	0a1b      	lsrs	r3, r3, #8
 80046b6:	227f      	movs	r2, #127	; 0x7f
 80046b8:	4013      	ands	r3, r2
 80046ba:	434b      	muls	r3, r1
 80046bc:	617b      	str	r3, [r7, #20]
        break;
 80046be:	e00d      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80046c0:	68b9      	ldr	r1, [r7, #8]
 80046c2:	481c      	ldr	r0, [pc, #112]	; (8004734 <HAL_RCC_GetSysClockFreq+0xfc>)
 80046c4:	f7fb fd1c 	bl	8000100 <__udivsi3>
 80046c8:	0003      	movs	r3, r0
 80046ca:	0019      	movs	r1, r3
 80046cc:	4b18      	ldr	r3, [pc, #96]	; (8004730 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	0a1b      	lsrs	r3, r3, #8
 80046d2:	227f      	movs	r2, #127	; 0x7f
 80046d4:	4013      	ands	r3, r2
 80046d6:	434b      	muls	r3, r1
 80046d8:	617b      	str	r3, [r7, #20]
        break;
 80046da:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80046dc:	4b14      	ldr	r3, [pc, #80]	; (8004730 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	0f5b      	lsrs	r3, r3, #29
 80046e2:	2207      	movs	r2, #7
 80046e4:	4013      	ands	r3, r2
 80046e6:	3301      	adds	r3, #1
 80046e8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80046ea:	6879      	ldr	r1, [r7, #4]
 80046ec:	6978      	ldr	r0, [r7, #20]
 80046ee:	f7fb fd07 	bl	8000100 <__udivsi3>
 80046f2:	0003      	movs	r3, r0
 80046f4:	613b      	str	r3, [r7, #16]
 80046f6:	e015      	b.n	8004724 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80046f8:	4b0d      	ldr	r3, [pc, #52]	; (8004730 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	2238      	movs	r2, #56	; 0x38
 80046fe:	4013      	ands	r3, r2
 8004700:	2b20      	cmp	r3, #32
 8004702:	d103      	bne.n	800470c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004704:	2380      	movs	r3, #128	; 0x80
 8004706:	021b      	lsls	r3, r3, #8
 8004708:	613b      	str	r3, [r7, #16]
 800470a:	e00b      	b.n	8004724 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800470c:	4b08      	ldr	r3, [pc, #32]	; (8004730 <HAL_RCC_GetSysClockFreq+0xf8>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	2238      	movs	r2, #56	; 0x38
 8004712:	4013      	ands	r3, r2
 8004714:	2b18      	cmp	r3, #24
 8004716:	d103      	bne.n	8004720 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004718:	23fa      	movs	r3, #250	; 0xfa
 800471a:	01db      	lsls	r3, r3, #7
 800471c:	613b      	str	r3, [r7, #16]
 800471e:	e001      	b.n	8004724 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004724:	693b      	ldr	r3, [r7, #16]
}
 8004726:	0018      	movs	r0, r3
 8004728:	46bd      	mov	sp, r7
 800472a:	b006      	add	sp, #24
 800472c:	bd80      	pop	{r7, pc}
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	40021000 	.word	0x40021000
 8004734:	00f42400 	.word	0x00f42400

08004738 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800473c:	4b02      	ldr	r3, [pc, #8]	; (8004748 <HAL_RCC_GetHCLKFreq+0x10>)
 800473e:	681b      	ldr	r3, [r3, #0]
}
 8004740:	0018      	movs	r0, r3
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	46c0      	nop			; (mov r8, r8)
 8004748:	20000004 	.word	0x20000004

0800474c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800474c:	b5b0      	push	{r4, r5, r7, lr}
 800474e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004750:	f7ff fff2 	bl	8004738 <HAL_RCC_GetHCLKFreq>
 8004754:	0004      	movs	r4, r0
 8004756:	f7ff fb4b 	bl	8003df0 <LL_RCC_GetAPB1Prescaler>
 800475a:	0003      	movs	r3, r0
 800475c:	0b1a      	lsrs	r2, r3, #12
 800475e:	4b05      	ldr	r3, [pc, #20]	; (8004774 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004760:	0092      	lsls	r2, r2, #2
 8004762:	58d3      	ldr	r3, [r2, r3]
 8004764:	221f      	movs	r2, #31
 8004766:	4013      	ands	r3, r2
 8004768:	40dc      	lsrs	r4, r3
 800476a:	0023      	movs	r3, r4
}
 800476c:	0018      	movs	r0, r3
 800476e:	46bd      	mov	sp, r7
 8004770:	bdb0      	pop	{r4, r5, r7, pc}
 8004772:	46c0      	nop			; (mov r8, r8)
 8004774:	08006b30 	.word	0x08006b30

08004778 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004780:	2313      	movs	r3, #19
 8004782:	18fb      	adds	r3, r7, r3
 8004784:	2200      	movs	r2, #0
 8004786:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004788:	2312      	movs	r3, #18
 800478a:	18fb      	adds	r3, r7, r3
 800478c:	2200      	movs	r2, #0
 800478e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	2380      	movs	r3, #128	; 0x80
 8004796:	029b      	lsls	r3, r3, #10
 8004798:	4013      	ands	r3, r2
 800479a:	d100      	bne.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800479c:	e0a3      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800479e:	2011      	movs	r0, #17
 80047a0:	183b      	adds	r3, r7, r0
 80047a2:	2200      	movs	r2, #0
 80047a4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047a6:	4b86      	ldr	r3, [pc, #536]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047aa:	2380      	movs	r3, #128	; 0x80
 80047ac:	055b      	lsls	r3, r3, #21
 80047ae:	4013      	ands	r3, r2
 80047b0:	d110      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047b2:	4b83      	ldr	r3, [pc, #524]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047b6:	4b82      	ldr	r3, [pc, #520]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047b8:	2180      	movs	r1, #128	; 0x80
 80047ba:	0549      	lsls	r1, r1, #21
 80047bc:	430a      	orrs	r2, r1
 80047be:	63da      	str	r2, [r3, #60]	; 0x3c
 80047c0:	4b7f      	ldr	r3, [pc, #508]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047c4:	2380      	movs	r3, #128	; 0x80
 80047c6:	055b      	lsls	r3, r3, #21
 80047c8:	4013      	ands	r3, r2
 80047ca:	60bb      	str	r3, [r7, #8]
 80047cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ce:	183b      	adds	r3, r7, r0
 80047d0:	2201      	movs	r2, #1
 80047d2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047d4:	4b7b      	ldr	r3, [pc, #492]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	4b7a      	ldr	r3, [pc, #488]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80047da:	2180      	movs	r1, #128	; 0x80
 80047dc:	0049      	lsls	r1, r1, #1
 80047de:	430a      	orrs	r2, r1
 80047e0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047e2:	f7fd fdb7 	bl	8002354 <HAL_GetTick>
 80047e6:	0003      	movs	r3, r0
 80047e8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047ea:	e00b      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ec:	f7fd fdb2 	bl	8002354 <HAL_GetTick>
 80047f0:	0002      	movs	r2, r0
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d904      	bls.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80047fa:	2313      	movs	r3, #19
 80047fc:	18fb      	adds	r3, r7, r3
 80047fe:	2203      	movs	r2, #3
 8004800:	701a      	strb	r2, [r3, #0]
        break;
 8004802:	e005      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004804:	4b6f      	ldr	r3, [pc, #444]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	2380      	movs	r3, #128	; 0x80
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	4013      	ands	r3, r2
 800480e:	d0ed      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004810:	2313      	movs	r3, #19
 8004812:	18fb      	adds	r3, r7, r3
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d154      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800481a:	4b69      	ldr	r3, [pc, #420]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800481c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800481e:	23c0      	movs	r3, #192	; 0xc0
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4013      	ands	r3, r2
 8004824:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d019      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	429a      	cmp	r2, r3
 8004834:	d014      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004836:	4b62      	ldr	r3, [pc, #392]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800483a:	4a63      	ldr	r2, [pc, #396]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800483c:	4013      	ands	r3, r2
 800483e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004840:	4b5f      	ldr	r3, [pc, #380]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004842:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004844:	4b5e      	ldr	r3, [pc, #376]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004846:	2180      	movs	r1, #128	; 0x80
 8004848:	0249      	lsls	r1, r1, #9
 800484a:	430a      	orrs	r2, r1
 800484c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800484e:	4b5c      	ldr	r3, [pc, #368]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004850:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004852:	4b5b      	ldr	r3, [pc, #364]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004854:	495d      	ldr	r1, [pc, #372]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004856:	400a      	ands	r2, r1
 8004858:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800485a:	4b59      	ldr	r3, [pc, #356]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	2201      	movs	r2, #1
 8004864:	4013      	ands	r3, r2
 8004866:	d016      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004868:	f7fd fd74 	bl	8002354 <HAL_GetTick>
 800486c:	0003      	movs	r3, r0
 800486e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004870:	e00c      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004872:	f7fd fd6f 	bl	8002354 <HAL_GetTick>
 8004876:	0002      	movs	r2, r0
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	4a54      	ldr	r2, [pc, #336]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d904      	bls.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004882:	2313      	movs	r3, #19
 8004884:	18fb      	adds	r3, r7, r3
 8004886:	2203      	movs	r2, #3
 8004888:	701a      	strb	r2, [r3, #0]
            break;
 800488a:	e004      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800488c:	4b4c      	ldr	r3, [pc, #304]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800488e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004890:	2202      	movs	r2, #2
 8004892:	4013      	ands	r3, r2
 8004894:	d0ed      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004896:	2313      	movs	r3, #19
 8004898:	18fb      	adds	r3, r7, r3
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10a      	bne.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048a0:	4b47      	ldr	r3, [pc, #284]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80048a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a4:	4a48      	ldr	r2, [pc, #288]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80048a6:	4013      	ands	r3, r2
 80048a8:	0019      	movs	r1, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	699a      	ldr	r2, [r3, #24]
 80048ae:	4b44      	ldr	r3, [pc, #272]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80048b0:	430a      	orrs	r2, r1
 80048b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80048b4:	e00c      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048b6:	2312      	movs	r3, #18
 80048b8:	18fb      	adds	r3, r7, r3
 80048ba:	2213      	movs	r2, #19
 80048bc:	18ba      	adds	r2, r7, r2
 80048be:	7812      	ldrb	r2, [r2, #0]
 80048c0:	701a      	strb	r2, [r3, #0]
 80048c2:	e005      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c4:	2312      	movs	r3, #18
 80048c6:	18fb      	adds	r3, r7, r3
 80048c8:	2213      	movs	r2, #19
 80048ca:	18ba      	adds	r2, r7, r2
 80048cc:	7812      	ldrb	r2, [r2, #0]
 80048ce:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048d0:	2311      	movs	r3, #17
 80048d2:	18fb      	adds	r3, r7, r3
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d105      	bne.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048da:	4b39      	ldr	r3, [pc, #228]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80048dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048de:	4b38      	ldr	r3, [pc, #224]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80048e0:	493c      	ldr	r1, [pc, #240]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80048e2:	400a      	ands	r2, r1
 80048e4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2201      	movs	r2, #1
 80048ec:	4013      	ands	r3, r2
 80048ee:	d009      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048f0:	4b33      	ldr	r3, [pc, #204]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80048f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f4:	2203      	movs	r2, #3
 80048f6:	4393      	bics	r3, r2
 80048f8:	0019      	movs	r1, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	4b30      	ldr	r3, [pc, #192]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004900:	430a      	orrs	r2, r1
 8004902:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2202      	movs	r2, #2
 800490a:	4013      	ands	r3, r2
 800490c:	d009      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800490e:	4b2c      	ldr	r3, [pc, #176]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004912:	220c      	movs	r2, #12
 8004914:	4393      	bics	r3, r2
 8004916:	0019      	movs	r1, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	4b28      	ldr	r3, [pc, #160]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800491e:	430a      	orrs	r2, r1
 8004920:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2220      	movs	r2, #32
 8004928:	4013      	ands	r3, r2
 800492a:	d009      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800492c:	4b24      	ldr	r3, [pc, #144]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800492e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004930:	4a29      	ldr	r2, [pc, #164]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004932:	4013      	ands	r3, r2
 8004934:	0019      	movs	r1, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	4b21      	ldr	r3, [pc, #132]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800493c:	430a      	orrs	r2, r1
 800493e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	2380      	movs	r3, #128	; 0x80
 8004946:	01db      	lsls	r3, r3, #7
 8004948:	4013      	ands	r3, r2
 800494a:	d015      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800494c:	4b1c      	ldr	r3, [pc, #112]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800494e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	0899      	lsrs	r1, r3, #2
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	695a      	ldr	r2, [r3, #20]
 8004958:	4b19      	ldr	r3, [pc, #100]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800495a:	430a      	orrs	r2, r1
 800495c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695a      	ldr	r2, [r3, #20]
 8004962:	2380      	movs	r3, #128	; 0x80
 8004964:	05db      	lsls	r3, r3, #23
 8004966:	429a      	cmp	r2, r3
 8004968:	d106      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800496a:	4b15      	ldr	r3, [pc, #84]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	4b14      	ldr	r3, [pc, #80]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004970:	2180      	movs	r1, #128	; 0x80
 8004972:	0249      	lsls	r1, r1, #9
 8004974:	430a      	orrs	r2, r1
 8004976:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	2380      	movs	r3, #128	; 0x80
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	4013      	ands	r3, r2
 8004982:	d016      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004984:	4b0e      	ldr	r3, [pc, #56]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004988:	4a14      	ldr	r2, [pc, #80]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800498a:	4013      	ands	r3, r2
 800498c:	0019      	movs	r1, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691a      	ldr	r2, [r3, #16]
 8004992:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004994:	430a      	orrs	r2, r1
 8004996:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	691a      	ldr	r2, [r3, #16]
 800499c:	2380      	movs	r3, #128	; 0x80
 800499e:	01db      	lsls	r3, r3, #7
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d106      	bne.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80049a4:	4b06      	ldr	r3, [pc, #24]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80049a6:	68da      	ldr	r2, [r3, #12]
 80049a8:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80049aa:	2180      	movs	r1, #128	; 0x80
 80049ac:	0249      	lsls	r1, r1, #9
 80049ae:	430a      	orrs	r2, r1
 80049b0:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80049b2:	2312      	movs	r3, #18
 80049b4:	18fb      	adds	r3, r7, r3
 80049b6:	781b      	ldrb	r3, [r3, #0]
}
 80049b8:	0018      	movs	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	b006      	add	sp, #24
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	40021000 	.word	0x40021000
 80049c4:	40007000 	.word	0x40007000
 80049c8:	fffffcff 	.word	0xfffffcff
 80049cc:	fffeffff 	.word	0xfffeffff
 80049d0:	00001388 	.word	0x00001388
 80049d4:	efffffff 	.word	0xefffffff
 80049d8:	ffffcfff 	.word	0xffffcfff
 80049dc:	ffff3fff 	.word	0xffff3fff

080049e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e0a8      	b.n	8004b44 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d109      	bne.n	8004a0e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	2382      	movs	r3, #130	; 0x82
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d009      	beq.n	8004a1a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	61da      	str	r2, [r3, #28]
 8004a0c:	e005      	b.n	8004a1a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	225d      	movs	r2, #93	; 0x5d
 8004a24:	5c9b      	ldrb	r3, [r3, r2]
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d107      	bne.n	8004a3c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	225c      	movs	r2, #92	; 0x5c
 8004a30:	2100      	movs	r1, #0
 8004a32:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	0018      	movs	r0, r3
 8004a38:	f7fc fd00 	bl	800143c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	225d      	movs	r2, #93	; 0x5d
 8004a40:	2102      	movs	r1, #2
 8004a42:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2140      	movs	r1, #64	; 0x40
 8004a50:	438a      	bics	r2, r1
 8004a52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	23e0      	movs	r3, #224	; 0xe0
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d902      	bls.n	8004a66 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a60:	2300      	movs	r3, #0
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	e002      	b.n	8004a6c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a66:	2380      	movs	r3, #128	; 0x80
 8004a68:	015b      	lsls	r3, r3, #5
 8004a6a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68da      	ldr	r2, [r3, #12]
 8004a70:	23f0      	movs	r3, #240	; 0xf0
 8004a72:	011b      	lsls	r3, r3, #4
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d008      	beq.n	8004a8a <HAL_SPI_Init+0xaa>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68da      	ldr	r2, [r3, #12]
 8004a7c:	23e0      	movs	r3, #224	; 0xe0
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d002      	beq.n	8004a8a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	2382      	movs	r3, #130	; 0x82
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	401a      	ands	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6899      	ldr	r1, [r3, #8]
 8004a98:	2384      	movs	r3, #132	; 0x84
 8004a9a:	021b      	lsls	r3, r3, #8
 8004a9c:	400b      	ands	r3, r1
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	2102      	movs	r1, #2
 8004aa6:	400b      	ands	r3, r1
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	2101      	movs	r1, #1
 8004ab0:	400b      	ands	r3, r1
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6999      	ldr	r1, [r3, #24]
 8004ab8:	2380      	movs	r3, #128	; 0x80
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	400b      	ands	r3, r1
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	2138      	movs	r1, #56	; 0x38
 8004ac6:	400b      	ands	r3, r1
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	2180      	movs	r1, #128	; 0x80
 8004ad0:	400b      	ands	r3, r1
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	0011      	movs	r1, r2
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ada:	2380      	movs	r3, #128	; 0x80
 8004adc:	019b      	lsls	r3, r3, #6
 8004ade:	401a      	ands	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	0c1b      	lsrs	r3, r3, #16
 8004aee:	2204      	movs	r2, #4
 8004af0:	401a      	ands	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	2110      	movs	r1, #16
 8004af8:	400b      	ands	r3, r1
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b00:	2108      	movs	r1, #8
 8004b02:	400b      	ands	r3, r1
 8004b04:	431a      	orrs	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68d9      	ldr	r1, [r3, #12]
 8004b0a:	23f0      	movs	r3, #240	; 0xf0
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	400b      	ands	r3, r1
 8004b10:	431a      	orrs	r2, r3
 8004b12:	0011      	movs	r1, r2
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	2380      	movs	r3, #128	; 0x80
 8004b18:	015b      	lsls	r3, r3, #5
 8004b1a:	401a      	ands	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	69da      	ldr	r2, [r3, #28]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4907      	ldr	r1, [pc, #28]	; (8004b4c <HAL_SPI_Init+0x16c>)
 8004b30:	400a      	ands	r2, r1
 8004b32:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	225d      	movs	r2, #93	; 0x5d
 8004b3e:	2101      	movs	r1, #1
 8004b40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	0018      	movs	r0, r3
 8004b46:	46bd      	mov	sp, r7
 8004b48:	b004      	add	sp, #16
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	fffff7ff 	.word	0xfffff7ff

08004b50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e04a      	b.n	8004bf8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	223d      	movs	r2, #61	; 0x3d
 8004b66:	5c9b      	ldrb	r3, [r3, r2]
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d107      	bne.n	8004b7e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	223c      	movs	r2, #60	; 0x3c
 8004b72:	2100      	movs	r1, #0
 8004b74:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	0018      	movs	r0, r3
 8004b7a:	f7fd f8eb 	bl	8001d54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	223d      	movs	r2, #61	; 0x3d
 8004b82:	2102      	movs	r1, #2
 8004b84:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	0019      	movs	r1, r3
 8004b90:	0010      	movs	r0, r2
 8004b92:	f000 fe09 	bl	80057a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2248      	movs	r2, #72	; 0x48
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	223e      	movs	r2, #62	; 0x3e
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	5499      	strb	r1, [r3, r2]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	223f      	movs	r2, #63	; 0x3f
 8004baa:	2101      	movs	r1, #1
 8004bac:	5499      	strb	r1, [r3, r2]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2240      	movs	r2, #64	; 0x40
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	5499      	strb	r1, [r3, r2]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2241      	movs	r2, #65	; 0x41
 8004bba:	2101      	movs	r1, #1
 8004bbc:	5499      	strb	r1, [r3, r2]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2242      	movs	r2, #66	; 0x42
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	5499      	strb	r1, [r3, r2]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2243      	movs	r2, #67	; 0x43
 8004bca:	2101      	movs	r1, #1
 8004bcc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2244      	movs	r2, #68	; 0x44
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	5499      	strb	r1, [r3, r2]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2245      	movs	r2, #69	; 0x45
 8004bda:	2101      	movs	r1, #1
 8004bdc:	5499      	strb	r1, [r3, r2]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2246      	movs	r2, #70	; 0x46
 8004be2:	2101      	movs	r1, #1
 8004be4:	5499      	strb	r1, [r3, r2]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2247      	movs	r2, #71	; 0x47
 8004bea:	2101      	movs	r1, #1
 8004bec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	223d      	movs	r2, #61	; 0x3d
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	b002      	add	sp, #8
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	223d      	movs	r2, #61	; 0x3d
 8004c0c:	5c9b      	ldrb	r3, [r3, r2]
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d001      	beq.n	8004c18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e034      	b.n	8004c82 <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	223d      	movs	r2, #61	; 0x3d
 8004c1c:	2102      	movs	r1, #2
 8004c1e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a19      	ldr	r2, [pc, #100]	; (8004c8c <HAL_TIM_Base_Start+0x8c>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d009      	beq.n	8004c3e <HAL_TIM_Base_Start+0x3e>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a18      	ldr	r2, [pc, #96]	; (8004c90 <HAL_TIM_Base_Start+0x90>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d004      	beq.n	8004c3e <HAL_TIM_Base_Start+0x3e>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a16      	ldr	r2, [pc, #88]	; (8004c94 <HAL_TIM_Base_Start+0x94>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d116      	bne.n	8004c6c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	4a14      	ldr	r2, [pc, #80]	; (8004c98 <HAL_TIM_Base_Start+0x98>)
 8004c46:	4013      	ands	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2b06      	cmp	r3, #6
 8004c4e:	d016      	beq.n	8004c7e <HAL_TIM_Base_Start+0x7e>
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	2380      	movs	r3, #128	; 0x80
 8004c54:	025b      	lsls	r3, r3, #9
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d011      	beq.n	8004c7e <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2101      	movs	r1, #1
 8004c66:	430a      	orrs	r2, r1
 8004c68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c6a:	e008      	b.n	8004c7e <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2101      	movs	r1, #1
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	e000      	b.n	8004c80 <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c7e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	0018      	movs	r0, r3
 8004c84:	46bd      	mov	sp, r7
 8004c86:	b004      	add	sp, #16
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	46c0      	nop			; (mov r8, r8)
 8004c8c:	40012c00 	.word	0x40012c00
 8004c90:	40000400 	.word	0x40000400
 8004c94:	40014000 	.word	0x40014000
 8004c98:	00010007 	.word	0x00010007

08004c9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e04a      	b.n	8004d44 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	223d      	movs	r2, #61	; 0x3d
 8004cb2:	5c9b      	ldrb	r3, [r3, r2]
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d107      	bne.n	8004cca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	223c      	movs	r2, #60	; 0x3c
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	f7fd f8a5 	bl	8001e14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	223d      	movs	r2, #61	; 0x3d
 8004cce:	2102      	movs	r1, #2
 8004cd0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	3304      	adds	r3, #4
 8004cda:	0019      	movs	r1, r3
 8004cdc:	0010      	movs	r0, r2
 8004cde:	f000 fd63 	bl	80057a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2248      	movs	r2, #72	; 0x48
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	223e      	movs	r2, #62	; 0x3e
 8004cee:	2101      	movs	r1, #1
 8004cf0:	5499      	strb	r1, [r3, r2]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	223f      	movs	r2, #63	; 0x3f
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	5499      	strb	r1, [r3, r2]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2240      	movs	r2, #64	; 0x40
 8004cfe:	2101      	movs	r1, #1
 8004d00:	5499      	strb	r1, [r3, r2]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2241      	movs	r2, #65	; 0x41
 8004d06:	2101      	movs	r1, #1
 8004d08:	5499      	strb	r1, [r3, r2]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2242      	movs	r2, #66	; 0x42
 8004d0e:	2101      	movs	r1, #1
 8004d10:	5499      	strb	r1, [r3, r2]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2243      	movs	r2, #67	; 0x43
 8004d16:	2101      	movs	r1, #1
 8004d18:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2244      	movs	r2, #68	; 0x44
 8004d1e:	2101      	movs	r1, #1
 8004d20:	5499      	strb	r1, [r3, r2]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2245      	movs	r2, #69	; 0x45
 8004d26:	2101      	movs	r1, #1
 8004d28:	5499      	strb	r1, [r3, r2]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2246      	movs	r2, #70	; 0x46
 8004d2e:	2101      	movs	r1, #1
 8004d30:	5499      	strb	r1, [r3, r2]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2247      	movs	r2, #71	; 0x47
 8004d36:	2101      	movs	r1, #1
 8004d38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	223d      	movs	r2, #61	; 0x3d
 8004d3e:	2101      	movs	r1, #1
 8004d40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	0018      	movs	r0, r3
 8004d46:	46bd      	mov	sp, r7
 8004d48:	b002      	add	sp, #8
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d108      	bne.n	8004d6e <HAL_TIM_PWM_Start+0x22>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	223e      	movs	r2, #62	; 0x3e
 8004d60:	5c9b      	ldrb	r3, [r3, r2]
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	3b01      	subs	r3, #1
 8004d66:	1e5a      	subs	r2, r3, #1
 8004d68:	4193      	sbcs	r3, r2
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	e037      	b.n	8004dde <HAL_TIM_PWM_Start+0x92>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b04      	cmp	r3, #4
 8004d72:	d108      	bne.n	8004d86 <HAL_TIM_PWM_Start+0x3a>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	223f      	movs	r2, #63	; 0x3f
 8004d78:	5c9b      	ldrb	r3, [r3, r2]
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	1e5a      	subs	r2, r3, #1
 8004d80:	4193      	sbcs	r3, r2
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	e02b      	b.n	8004dde <HAL_TIM_PWM_Start+0x92>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b08      	cmp	r3, #8
 8004d8a:	d108      	bne.n	8004d9e <HAL_TIM_PWM_Start+0x52>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2240      	movs	r2, #64	; 0x40
 8004d90:	5c9b      	ldrb	r3, [r3, r2]
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	3b01      	subs	r3, #1
 8004d96:	1e5a      	subs	r2, r3, #1
 8004d98:	4193      	sbcs	r3, r2
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	e01f      	b.n	8004dde <HAL_TIM_PWM_Start+0x92>
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b0c      	cmp	r3, #12
 8004da2:	d108      	bne.n	8004db6 <HAL_TIM_PWM_Start+0x6a>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2241      	movs	r2, #65	; 0x41
 8004da8:	5c9b      	ldrb	r3, [r3, r2]
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	3b01      	subs	r3, #1
 8004dae:	1e5a      	subs	r2, r3, #1
 8004db0:	4193      	sbcs	r3, r2
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	e013      	b.n	8004dde <HAL_TIM_PWM_Start+0x92>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b10      	cmp	r3, #16
 8004dba:	d108      	bne.n	8004dce <HAL_TIM_PWM_Start+0x82>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2242      	movs	r2, #66	; 0x42
 8004dc0:	5c9b      	ldrb	r3, [r3, r2]
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	1e5a      	subs	r2, r3, #1
 8004dc8:	4193      	sbcs	r3, r2
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	e007      	b.n	8004dde <HAL_TIM_PWM_Start+0x92>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2243      	movs	r2, #67	; 0x43
 8004dd2:	5c9b      	ldrb	r3, [r3, r2]
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	1e5a      	subs	r2, r3, #1
 8004dda:	4193      	sbcs	r3, r2
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e085      	b.n	8004ef2 <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d104      	bne.n	8004df6 <HAL_TIM_PWM_Start+0xaa>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	223e      	movs	r2, #62	; 0x3e
 8004df0:	2102      	movs	r1, #2
 8004df2:	5499      	strb	r1, [r3, r2]
 8004df4:	e023      	b.n	8004e3e <HAL_TIM_PWM_Start+0xf2>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d104      	bne.n	8004e06 <HAL_TIM_PWM_Start+0xba>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	223f      	movs	r2, #63	; 0x3f
 8004e00:	2102      	movs	r1, #2
 8004e02:	5499      	strb	r1, [r3, r2]
 8004e04:	e01b      	b.n	8004e3e <HAL_TIM_PWM_Start+0xf2>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d104      	bne.n	8004e16 <HAL_TIM_PWM_Start+0xca>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2240      	movs	r2, #64	; 0x40
 8004e10:	2102      	movs	r1, #2
 8004e12:	5499      	strb	r1, [r3, r2]
 8004e14:	e013      	b.n	8004e3e <HAL_TIM_PWM_Start+0xf2>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b0c      	cmp	r3, #12
 8004e1a:	d104      	bne.n	8004e26 <HAL_TIM_PWM_Start+0xda>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2241      	movs	r2, #65	; 0x41
 8004e20:	2102      	movs	r1, #2
 8004e22:	5499      	strb	r1, [r3, r2]
 8004e24:	e00b      	b.n	8004e3e <HAL_TIM_PWM_Start+0xf2>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b10      	cmp	r3, #16
 8004e2a:	d104      	bne.n	8004e36 <HAL_TIM_PWM_Start+0xea>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2242      	movs	r2, #66	; 0x42
 8004e30:	2102      	movs	r1, #2
 8004e32:	5499      	strb	r1, [r3, r2]
 8004e34:	e003      	b.n	8004e3e <HAL_TIM_PWM_Start+0xf2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2243      	movs	r2, #67	; 0x43
 8004e3a:	2102      	movs	r1, #2
 8004e3c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6839      	ldr	r1, [r7, #0]
 8004e44:	2201      	movs	r2, #1
 8004e46:	0018      	movs	r0, r3
 8004e48:	f000 ffe8 	bl	8005e1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a2a      	ldr	r2, [pc, #168]	; (8004efc <HAL_TIM_PWM_Start+0x1b0>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00e      	beq.n	8004e74 <HAL_TIM_PWM_Start+0x128>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a29      	ldr	r2, [pc, #164]	; (8004f00 <HAL_TIM_PWM_Start+0x1b4>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d009      	beq.n	8004e74 <HAL_TIM_PWM_Start+0x128>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a27      	ldr	r2, [pc, #156]	; (8004f04 <HAL_TIM_PWM_Start+0x1b8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d004      	beq.n	8004e74 <HAL_TIM_PWM_Start+0x128>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a26      	ldr	r2, [pc, #152]	; (8004f08 <HAL_TIM_PWM_Start+0x1bc>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d101      	bne.n	8004e78 <HAL_TIM_PWM_Start+0x12c>
 8004e74:	2301      	movs	r3, #1
 8004e76:	e000      	b.n	8004e7a <HAL_TIM_PWM_Start+0x12e>
 8004e78:	2300      	movs	r3, #0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d008      	beq.n	8004e90 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2180      	movs	r1, #128	; 0x80
 8004e8a:	0209      	lsls	r1, r1, #8
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a19      	ldr	r2, [pc, #100]	; (8004efc <HAL_TIM_PWM_Start+0x1b0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d009      	beq.n	8004eae <HAL_TIM_PWM_Start+0x162>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a1b      	ldr	r2, [pc, #108]	; (8004f0c <HAL_TIM_PWM_Start+0x1c0>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d004      	beq.n	8004eae <HAL_TIM_PWM_Start+0x162>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a15      	ldr	r2, [pc, #84]	; (8004f00 <HAL_TIM_PWM_Start+0x1b4>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d116      	bne.n	8004edc <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	4a16      	ldr	r2, [pc, #88]	; (8004f10 <HAL_TIM_PWM_Start+0x1c4>)
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2b06      	cmp	r3, #6
 8004ebe:	d016      	beq.n	8004eee <HAL_TIM_PWM_Start+0x1a2>
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	2380      	movs	r3, #128	; 0x80
 8004ec4:	025b      	lsls	r3, r3, #9
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d011      	beq.n	8004eee <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eda:	e008      	b.n	8004eee <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2101      	movs	r1, #1
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	e000      	b.n	8004ef0 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eee:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	b004      	add	sp, #16
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	46c0      	nop			; (mov r8, r8)
 8004efc:	40012c00 	.word	0x40012c00
 8004f00:	40014000 	.word	0x40014000
 8004f04:	40014400 	.word	0x40014400
 8004f08:	40014800 	.word	0x40014800
 8004f0c:	40000400 	.word	0x40000400
 8004f10:	00010007 	.word	0x00010007

08004f14 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6839      	ldr	r1, [r7, #0]
 8004f24:	2200      	movs	r2, #0
 8004f26:	0018      	movs	r0, r3
 8004f28:	f000 ff78 	bl	8005e1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a37      	ldr	r2, [pc, #220]	; (8005010 <HAL_TIM_PWM_Stop+0xfc>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d00e      	beq.n	8004f54 <HAL_TIM_PWM_Stop+0x40>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a36      	ldr	r2, [pc, #216]	; (8005014 <HAL_TIM_PWM_Stop+0x100>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d009      	beq.n	8004f54 <HAL_TIM_PWM_Stop+0x40>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a34      	ldr	r2, [pc, #208]	; (8005018 <HAL_TIM_PWM_Stop+0x104>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d004      	beq.n	8004f54 <HAL_TIM_PWM_Stop+0x40>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a33      	ldr	r2, [pc, #204]	; (800501c <HAL_TIM_PWM_Stop+0x108>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d101      	bne.n	8004f58 <HAL_TIM_PWM_Stop+0x44>
 8004f54:	2301      	movs	r3, #1
 8004f56:	e000      	b.n	8004f5a <HAL_TIM_PWM_Stop+0x46>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d013      	beq.n	8004f86 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	4a2e      	ldr	r2, [pc, #184]	; (8005020 <HAL_TIM_PWM_Stop+0x10c>)
 8004f66:	4013      	ands	r3, r2
 8004f68:	d10d      	bne.n	8004f86 <HAL_TIM_PWM_Stop+0x72>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	4a2c      	ldr	r2, [pc, #176]	; (8005024 <HAL_TIM_PWM_Stop+0x110>)
 8004f72:	4013      	ands	r3, r2
 8004f74:	d107      	bne.n	8004f86 <HAL_TIM_PWM_Stop+0x72>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4929      	ldr	r1, [pc, #164]	; (8005028 <HAL_TIM_PWM_Stop+0x114>)
 8004f82:	400a      	ands	r2, r1
 8004f84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	4a24      	ldr	r2, [pc, #144]	; (8005020 <HAL_TIM_PWM_Stop+0x10c>)
 8004f8e:	4013      	ands	r3, r2
 8004f90:	d10d      	bne.n	8004fae <HAL_TIM_PWM_Stop+0x9a>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	4a22      	ldr	r2, [pc, #136]	; (8005024 <HAL_TIM_PWM_Stop+0x110>)
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	d107      	bne.n	8004fae <HAL_TIM_PWM_Stop+0x9a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2101      	movs	r1, #1
 8004faa:	438a      	bics	r2, r1
 8004fac:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d104      	bne.n	8004fbe <HAL_TIM_PWM_Stop+0xaa>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	223e      	movs	r2, #62	; 0x3e
 8004fb8:	2101      	movs	r1, #1
 8004fba:	5499      	strb	r1, [r3, r2]
 8004fbc:	e023      	b.n	8005006 <HAL_TIM_PWM_Stop+0xf2>
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b04      	cmp	r3, #4
 8004fc2:	d104      	bne.n	8004fce <HAL_TIM_PWM_Stop+0xba>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	223f      	movs	r2, #63	; 0x3f
 8004fc8:	2101      	movs	r1, #1
 8004fca:	5499      	strb	r1, [r3, r2]
 8004fcc:	e01b      	b.n	8005006 <HAL_TIM_PWM_Stop+0xf2>
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2b08      	cmp	r3, #8
 8004fd2:	d104      	bne.n	8004fde <HAL_TIM_PWM_Stop+0xca>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2240      	movs	r2, #64	; 0x40
 8004fd8:	2101      	movs	r1, #1
 8004fda:	5499      	strb	r1, [r3, r2]
 8004fdc:	e013      	b.n	8005006 <HAL_TIM_PWM_Stop+0xf2>
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	2b0c      	cmp	r3, #12
 8004fe2:	d104      	bne.n	8004fee <HAL_TIM_PWM_Stop+0xda>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2241      	movs	r2, #65	; 0x41
 8004fe8:	2101      	movs	r1, #1
 8004fea:	5499      	strb	r1, [r3, r2]
 8004fec:	e00b      	b.n	8005006 <HAL_TIM_PWM_Stop+0xf2>
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	2b10      	cmp	r3, #16
 8004ff2:	d104      	bne.n	8004ffe <HAL_TIM_PWM_Stop+0xea>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2242      	movs	r2, #66	; 0x42
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	5499      	strb	r1, [r3, r2]
 8004ffc:	e003      	b.n	8005006 <HAL_TIM_PWM_Stop+0xf2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2243      	movs	r2, #67	; 0x43
 8005002:	2101      	movs	r1, #1
 8005004:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	0018      	movs	r0, r3
 800500a:	46bd      	mov	sp, r7
 800500c:	b002      	add	sp, #8
 800500e:	bd80      	pop	{r7, pc}
 8005010:	40012c00 	.word	0x40012c00
 8005014:	40014000 	.word	0x40014000
 8005018:	40014400 	.word	0x40014400
 800501c:	40014800 	.word	0x40014800
 8005020:	00001111 	.word	0x00001111
 8005024:	00000444 	.word	0x00000444
 8005028:	ffff7fff 	.word	0xffff7fff

0800502c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e090      	b.n	8005162 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	223d      	movs	r2, #61	; 0x3d
 8005044:	5c9b      	ldrb	r3, [r3, r2]
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	d107      	bne.n	800505c <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	223c      	movs	r2, #60	; 0x3c
 8005050:	2100      	movs	r1, #0
 8005052:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	0018      	movs	r0, r3
 8005058:	f7fc fde8 	bl	8001c2c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	223d      	movs	r2, #61	; 0x3d
 8005060:	2102      	movs	r1, #2
 8005062:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689a      	ldr	r2, [r3, #8]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	493f      	ldr	r1, [pc, #252]	; (800516c <HAL_TIM_Encoder_Init+0x140>)
 8005070:	400a      	ands	r2, r1
 8005072:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3304      	adds	r3, #4
 800507c:	0019      	movs	r1, r3
 800507e:	0010      	movs	r0, r2
 8005080:	f000 fb92 	bl	80057a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	4a31      	ldr	r2, [pc, #196]	; (8005170 <HAL_TIM_Encoder_Init+0x144>)
 80050aa:	4013      	ands	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	689a      	ldr	r2, [r3, #8]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	021b      	lsls	r3, r3, #8
 80050b8:	4313      	orrs	r3, r2
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	4313      	orrs	r3, r2
 80050be:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	4a2c      	ldr	r2, [pc, #176]	; (8005174 <HAL_TIM_Encoder_Init+0x148>)
 80050c4:	4013      	ands	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	4a2b      	ldr	r2, [pc, #172]	; (8005178 <HAL_TIM_Encoder_Init+0x14c>)
 80050cc:	4013      	ands	r3, r2
 80050ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	68da      	ldr	r2, [r3, #12]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	021b      	lsls	r3, r3, #8
 80050da:	4313      	orrs	r3, r2
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	4313      	orrs	r3, r2
 80050e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	011a      	lsls	r2, r3, #4
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	031b      	lsls	r3, r3, #12
 80050ee:	4313      	orrs	r3, r2
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2222      	movs	r2, #34	; 0x22
 80050fa:	4393      	bics	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2288      	movs	r2, #136	; 0x88
 8005102:	4393      	bics	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	011b      	lsls	r3, r3, #4
 8005110:	4313      	orrs	r3, r2
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	4313      	orrs	r3, r2
 8005116:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2248      	movs	r2, #72	; 0x48
 8005134:	2101      	movs	r1, #1
 8005136:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	223e      	movs	r2, #62	; 0x3e
 800513c:	2101      	movs	r1, #1
 800513e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	223f      	movs	r2, #63	; 0x3f
 8005144:	2101      	movs	r1, #1
 8005146:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2244      	movs	r2, #68	; 0x44
 800514c:	2101      	movs	r1, #1
 800514e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2245      	movs	r2, #69	; 0x45
 8005154:	2101      	movs	r1, #1
 8005156:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	223d      	movs	r2, #61	; 0x3d
 800515c:	2101      	movs	r1, #1
 800515e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	0018      	movs	r0, r3
 8005164:	46bd      	mov	sp, r7
 8005166:	b006      	add	sp, #24
 8005168:	bd80      	pop	{r7, pc}
 800516a:	46c0      	nop			; (mov r8, r8)
 800516c:	fffebff8 	.word	0xfffebff8
 8005170:	fffffcfc 	.word	0xfffffcfc
 8005174:	fffff3f3 	.word	0xfffff3f3
 8005178:	ffff0f0f 	.word	0xffff0f0f

0800517c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800517c:	b590      	push	{r4, r7, lr}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005186:	200f      	movs	r0, #15
 8005188:	183b      	adds	r3, r7, r0
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	213e      	movs	r1, #62	; 0x3e
 800518e:	5c52      	ldrb	r2, [r2, r1]
 8005190:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005192:	230e      	movs	r3, #14
 8005194:	18fb      	adds	r3, r7, r3
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	213f      	movs	r1, #63	; 0x3f
 800519a:	5c52      	ldrb	r2, [r2, r1]
 800519c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800519e:	240d      	movs	r4, #13
 80051a0:	193b      	adds	r3, r7, r4
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	2144      	movs	r1, #68	; 0x44
 80051a6:	5c52      	ldrb	r2, [r2, r1]
 80051a8:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80051aa:	230c      	movs	r3, #12
 80051ac:	18fb      	adds	r3, r7, r3
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	2145      	movs	r1, #69	; 0x45
 80051b2:	5c52      	ldrb	r2, [r2, r1]
 80051b4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d112      	bne.n	80051e2 <HAL_TIM_Encoder_Start_IT+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051bc:	183b      	adds	r3, r7, r0
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d103      	bne.n	80051cc <HAL_TIM_Encoder_Start_IT+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80051c4:	193b      	adds	r3, r7, r4
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d001      	beq.n	80051d0 <HAL_TIM_Encoder_Start_IT+0x54>
    {
      return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e095      	b.n	80052fc <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	223e      	movs	r2, #62	; 0x3e
 80051d4:	2102      	movs	r1, #2
 80051d6:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2244      	movs	r2, #68	; 0x44
 80051dc:	2102      	movs	r1, #2
 80051de:	5499      	strb	r1, [r3, r2]
 80051e0:	e03d      	b.n	800525e <HAL_TIM_Encoder_Start_IT+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b04      	cmp	r3, #4
 80051e6:	d114      	bne.n	8005212 <HAL_TIM_Encoder_Start_IT+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80051e8:	230e      	movs	r3, #14
 80051ea:	18fb      	adds	r3, r7, r3
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d104      	bne.n	80051fc <HAL_TIM_Encoder_Start_IT+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80051f2:	230c      	movs	r3, #12
 80051f4:	18fb      	adds	r3, r7, r3
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d001      	beq.n	8005200 <HAL_TIM_Encoder_Start_IT+0x84>
    {
      return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e07d      	b.n	80052fc <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	223f      	movs	r2, #63	; 0x3f
 8005204:	2102      	movs	r1, #2
 8005206:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2245      	movs	r2, #69	; 0x45
 800520c:	2102      	movs	r1, #2
 800520e:	5499      	strb	r1, [r3, r2]
 8005210:	e025      	b.n	800525e <HAL_TIM_Encoder_Start_IT+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005212:	230f      	movs	r3, #15
 8005214:	18fb      	adds	r3, r7, r3
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d10e      	bne.n	800523a <HAL_TIM_Encoder_Start_IT+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800521c:	230e      	movs	r3, #14
 800521e:	18fb      	adds	r3, r7, r3
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d109      	bne.n	800523a <HAL_TIM_Encoder_Start_IT+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005226:	230d      	movs	r3, #13
 8005228:	18fb      	adds	r3, r7, r3
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d104      	bne.n	800523a <HAL_TIM_Encoder_Start_IT+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005230:	230c      	movs	r3, #12
 8005232:	18fb      	adds	r3, r7, r3
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d001      	beq.n	800523e <HAL_TIM_Encoder_Start_IT+0xc2>
    {
      return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e05e      	b.n	80052fc <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	223e      	movs	r2, #62	; 0x3e
 8005242:	2102      	movs	r1, #2
 8005244:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	223f      	movs	r2, #63	; 0x3f
 800524a:	2102      	movs	r1, #2
 800524c:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2244      	movs	r2, #68	; 0x44
 8005252:	2102      	movs	r1, #2
 8005254:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2245      	movs	r2, #69	; 0x45
 800525a:	2102      	movs	r1, #2
 800525c:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d003      	beq.n	800526c <HAL_TIM_Encoder_Start_IT+0xf0>
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	2b04      	cmp	r3, #4
 8005268:	d010      	beq.n	800528c <HAL_TIM_Encoder_Start_IT+0x110>
 800526a:	e01f      	b.n	80052ac <HAL_TIM_Encoder_Start_IT+0x130>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2201      	movs	r2, #1
 8005272:	2100      	movs	r1, #0
 8005274:	0018      	movs	r0, r3
 8005276:	f000 fdd1 	bl	8005e1c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68da      	ldr	r2, [r3, #12]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2102      	movs	r1, #2
 8005286:	430a      	orrs	r2, r1
 8005288:	60da      	str	r2, [r3, #12]
      break;
 800528a:	e02e      	b.n	80052ea <HAL_TIM_Encoder_Start_IT+0x16e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2201      	movs	r2, #1
 8005292:	2104      	movs	r1, #4
 8005294:	0018      	movs	r0, r3
 8005296:	f000 fdc1 	bl	8005e1c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68da      	ldr	r2, [r3, #12]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2104      	movs	r1, #4
 80052a6:	430a      	orrs	r2, r1
 80052a8:	60da      	str	r2, [r3, #12]
      break;
 80052aa:	e01e      	b.n	80052ea <HAL_TIM_Encoder_Start_IT+0x16e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2201      	movs	r2, #1
 80052b2:	2100      	movs	r1, #0
 80052b4:	0018      	movs	r0, r3
 80052b6:	f000 fdb1 	bl	8005e1c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2201      	movs	r2, #1
 80052c0:	2104      	movs	r1, #4
 80052c2:	0018      	movs	r0, r3
 80052c4:	f000 fdaa 	bl	8005e1c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68da      	ldr	r2, [r3, #12]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2102      	movs	r1, #2
 80052d4:	430a      	orrs	r2, r1
 80052d6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68da      	ldr	r2, [r3, #12]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2104      	movs	r1, #4
 80052e4:	430a      	orrs	r2, r1
 80052e6:	60da      	str	r2, [r3, #12]
      break;
 80052e8:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2101      	movs	r1, #1
 80052f6:	430a      	orrs	r2, r1
 80052f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	0018      	movs	r0, r3
 80052fe:	46bd      	mov	sp, r7
 8005300:	b005      	add	sp, #20
 8005302:	bd90      	pop	{r4, r7, pc}

08005304 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	2202      	movs	r2, #2
 8005314:	4013      	ands	r3, r2
 8005316:	2b02      	cmp	r3, #2
 8005318:	d124      	bne.n	8005364 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	2202      	movs	r2, #2
 8005322:	4013      	ands	r3, r2
 8005324:	2b02      	cmp	r3, #2
 8005326:	d11d      	bne.n	8005364 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2203      	movs	r2, #3
 800532e:	4252      	negs	r2, r2
 8005330:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	2203      	movs	r2, #3
 8005340:	4013      	ands	r3, r2
 8005342:	d004      	beq.n	800534e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	0018      	movs	r0, r3
 8005348:	f7fb f8fe 	bl	8000548 <HAL_TIM_IC_CaptureCallback>
 800534c:	e007      	b.n	800535e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	0018      	movs	r0, r3
 8005352:	f000 fa11 	bl	8005778 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	0018      	movs	r0, r3
 800535a:	f000 fa15 	bl	8005788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	2204      	movs	r2, #4
 800536c:	4013      	ands	r3, r2
 800536e:	2b04      	cmp	r3, #4
 8005370:	d125      	bne.n	80053be <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	2204      	movs	r2, #4
 800537a:	4013      	ands	r3, r2
 800537c:	2b04      	cmp	r3, #4
 800537e:	d11e      	bne.n	80053be <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2205      	movs	r2, #5
 8005386:	4252      	negs	r2, r2
 8005388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2202      	movs	r2, #2
 800538e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699a      	ldr	r2, [r3, #24]
 8005396:	23c0      	movs	r3, #192	; 0xc0
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4013      	ands	r3, r2
 800539c:	d004      	beq.n	80053a8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	0018      	movs	r0, r3
 80053a2:	f7fb f8d1 	bl	8000548 <HAL_TIM_IC_CaptureCallback>
 80053a6:	e007      	b.n	80053b8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	0018      	movs	r0, r3
 80053ac:	f000 f9e4 	bl	8005778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	0018      	movs	r0, r3
 80053b4:	f000 f9e8 	bl	8005788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	2208      	movs	r2, #8
 80053c6:	4013      	ands	r3, r2
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	d124      	bne.n	8005416 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	2208      	movs	r2, #8
 80053d4:	4013      	ands	r3, r2
 80053d6:	2b08      	cmp	r3, #8
 80053d8:	d11d      	bne.n	8005416 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2209      	movs	r2, #9
 80053e0:	4252      	negs	r2, r2
 80053e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2204      	movs	r2, #4
 80053e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	69db      	ldr	r3, [r3, #28]
 80053f0:	2203      	movs	r2, #3
 80053f2:	4013      	ands	r3, r2
 80053f4:	d004      	beq.n	8005400 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	0018      	movs	r0, r3
 80053fa:	f7fb f8a5 	bl	8000548 <HAL_TIM_IC_CaptureCallback>
 80053fe:	e007      	b.n	8005410 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	0018      	movs	r0, r3
 8005404:	f000 f9b8 	bl	8005778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	0018      	movs	r0, r3
 800540c:	f000 f9bc 	bl	8005788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	2210      	movs	r2, #16
 800541e:	4013      	ands	r3, r2
 8005420:	2b10      	cmp	r3, #16
 8005422:	d125      	bne.n	8005470 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	2210      	movs	r2, #16
 800542c:	4013      	ands	r3, r2
 800542e:	2b10      	cmp	r3, #16
 8005430:	d11e      	bne.n	8005470 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2211      	movs	r2, #17
 8005438:	4252      	negs	r2, r2
 800543a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2208      	movs	r2, #8
 8005440:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	69da      	ldr	r2, [r3, #28]
 8005448:	23c0      	movs	r3, #192	; 0xc0
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4013      	ands	r3, r2
 800544e:	d004      	beq.n	800545a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	0018      	movs	r0, r3
 8005454:	f7fb f878 	bl	8000548 <HAL_TIM_IC_CaptureCallback>
 8005458:	e007      	b.n	800546a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	0018      	movs	r0, r3
 800545e:	f000 f98b 	bl	8005778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	0018      	movs	r0, r3
 8005466:	f000 f98f 	bl	8005788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	2201      	movs	r2, #1
 8005478:	4013      	ands	r3, r2
 800547a:	2b01      	cmp	r3, #1
 800547c:	d10f      	bne.n	800549e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	2201      	movs	r2, #1
 8005486:	4013      	ands	r3, r2
 8005488:	2b01      	cmp	r3, #1
 800548a:	d108      	bne.n	800549e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2202      	movs	r2, #2
 8005492:	4252      	negs	r2, r2
 8005494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	0018      	movs	r0, r3
 800549a:	f000 f965 	bl	8005768 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	2280      	movs	r2, #128	; 0x80
 80054a6:	4013      	ands	r3, r2
 80054a8:	2b80      	cmp	r3, #128	; 0x80
 80054aa:	d10f      	bne.n	80054cc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	2280      	movs	r2, #128	; 0x80
 80054b4:	4013      	ands	r3, r2
 80054b6:	2b80      	cmp	r3, #128	; 0x80
 80054b8:	d108      	bne.n	80054cc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2281      	movs	r2, #129	; 0x81
 80054c0:	4252      	negs	r2, r2
 80054c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	0018      	movs	r0, r3
 80054c8:	f000 fde2 	bl	8006090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	691a      	ldr	r2, [r3, #16]
 80054d2:	2380      	movs	r3, #128	; 0x80
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	401a      	ands	r2, r3
 80054d8:	2380      	movs	r3, #128	; 0x80
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	429a      	cmp	r2, r3
 80054de:	d10e      	bne.n	80054fe <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	2280      	movs	r2, #128	; 0x80
 80054e8:	4013      	ands	r3, r2
 80054ea:	2b80      	cmp	r3, #128	; 0x80
 80054ec:	d107      	bne.n	80054fe <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a1c      	ldr	r2, [pc, #112]	; (8005564 <HAL_TIM_IRQHandler+0x260>)
 80054f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	0018      	movs	r0, r3
 80054fa:	f000 fdd1 	bl	80060a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	2240      	movs	r2, #64	; 0x40
 8005506:	4013      	ands	r3, r2
 8005508:	2b40      	cmp	r3, #64	; 0x40
 800550a:	d10f      	bne.n	800552c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	2240      	movs	r2, #64	; 0x40
 8005514:	4013      	ands	r3, r2
 8005516:	2b40      	cmp	r3, #64	; 0x40
 8005518:	d108      	bne.n	800552c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2241      	movs	r2, #65	; 0x41
 8005520:	4252      	negs	r2, r2
 8005522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	0018      	movs	r0, r3
 8005528:	f000 f936 	bl	8005798 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	2220      	movs	r2, #32
 8005534:	4013      	ands	r3, r2
 8005536:	2b20      	cmp	r3, #32
 8005538:	d10f      	bne.n	800555a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	2220      	movs	r2, #32
 8005542:	4013      	ands	r3, r2
 8005544:	2b20      	cmp	r3, #32
 8005546:	d108      	bne.n	800555a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2221      	movs	r2, #33	; 0x21
 800554e:	4252      	negs	r2, r2
 8005550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	0018      	movs	r0, r3
 8005556:	f000 fd93 	bl	8006080 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800555a:	46c0      	nop			; (mov r8, r8)
 800555c:	46bd      	mov	sp, r7
 800555e:	b002      	add	sp, #8
 8005560:	bd80      	pop	{r7, pc}
 8005562:	46c0      	nop			; (mov r8, r8)
 8005564:	fffffeff 	.word	0xfffffeff

08005568 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005574:	2317      	movs	r3, #23
 8005576:	18fb      	adds	r3, r7, r3
 8005578:	2200      	movs	r2, #0
 800557a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	223c      	movs	r2, #60	; 0x3c
 8005580:	5c9b      	ldrb	r3, [r3, r2]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d101      	bne.n	800558a <HAL_TIM_PWM_ConfigChannel+0x22>
 8005586:	2302      	movs	r3, #2
 8005588:	e0e5      	b.n	8005756 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	223c      	movs	r2, #60	; 0x3c
 800558e:	2101      	movs	r1, #1
 8005590:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b14      	cmp	r3, #20
 8005596:	d900      	bls.n	800559a <HAL_TIM_PWM_ConfigChannel+0x32>
 8005598:	e0d1      	b.n	800573e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	009a      	lsls	r2, r3, #2
 800559e:	4b70      	ldr	r3, [pc, #448]	; (8005760 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80055a0:	18d3      	adds	r3, r2, r3
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	0011      	movs	r1, r2
 80055ae:	0018      	movs	r0, r3
 80055b0:	f000 f970 	bl	8005894 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699a      	ldr	r2, [r3, #24]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2108      	movs	r1, #8
 80055c0:	430a      	orrs	r2, r1
 80055c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	699a      	ldr	r2, [r3, #24]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2104      	movs	r1, #4
 80055d0:	438a      	bics	r2, r1
 80055d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6999      	ldr	r1, [r3, #24]
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	691a      	ldr	r2, [r3, #16]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	619a      	str	r2, [r3, #24]
      break;
 80055e6:	e0af      	b.n	8005748 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	0011      	movs	r1, r2
 80055f0:	0018      	movs	r0, r3
 80055f2:	f000 f9d9 	bl	80059a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	699a      	ldr	r2, [r3, #24]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2180      	movs	r1, #128	; 0x80
 8005602:	0109      	lsls	r1, r1, #4
 8005604:	430a      	orrs	r2, r1
 8005606:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	699a      	ldr	r2, [r3, #24]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4954      	ldr	r1, [pc, #336]	; (8005764 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005614:	400a      	ands	r2, r1
 8005616:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6999      	ldr	r1, [r3, #24]
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	021a      	lsls	r2, r3, #8
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	430a      	orrs	r2, r1
 800562a:	619a      	str	r2, [r3, #24]
      break;
 800562c:	e08c      	b.n	8005748 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	0011      	movs	r1, r2
 8005636:	0018      	movs	r0, r3
 8005638:	f000 fa3a 	bl	8005ab0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	69da      	ldr	r2, [r3, #28]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2108      	movs	r1, #8
 8005648:	430a      	orrs	r2, r1
 800564a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	69da      	ldr	r2, [r3, #28]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2104      	movs	r1, #4
 8005658:	438a      	bics	r2, r1
 800565a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	69d9      	ldr	r1, [r3, #28]
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	691a      	ldr	r2, [r3, #16]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	61da      	str	r2, [r3, #28]
      break;
 800566e:	e06b      	b.n	8005748 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	0011      	movs	r1, r2
 8005678:	0018      	movs	r0, r3
 800567a:	f000 faa1 	bl	8005bc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	69da      	ldr	r2, [r3, #28]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2180      	movs	r1, #128	; 0x80
 800568a:	0109      	lsls	r1, r1, #4
 800568c:	430a      	orrs	r2, r1
 800568e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	69da      	ldr	r2, [r3, #28]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4932      	ldr	r1, [pc, #200]	; (8005764 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800569c:	400a      	ands	r2, r1
 800569e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	69d9      	ldr	r1, [r3, #28]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	021a      	lsls	r2, r3, #8
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	430a      	orrs	r2, r1
 80056b2:	61da      	str	r2, [r3, #28]
      break;
 80056b4:	e048      	b.n	8005748 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	0011      	movs	r1, r2
 80056be:	0018      	movs	r0, r3
 80056c0:	f000 fae8 	bl	8005c94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2108      	movs	r1, #8
 80056d0:	430a      	orrs	r2, r1
 80056d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2104      	movs	r1, #4
 80056e0:	438a      	bics	r2, r1
 80056e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	691a      	ldr	r2, [r3, #16]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056f6:	e027      	b.n	8005748 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	0011      	movs	r1, r2
 8005700:	0018      	movs	r0, r3
 8005702:	f000 fb27 	bl	8005d54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2180      	movs	r1, #128	; 0x80
 8005712:	0109      	lsls	r1, r1, #4
 8005714:	430a      	orrs	r2, r1
 8005716:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4910      	ldr	r1, [pc, #64]	; (8005764 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005724:	400a      	ands	r2, r1
 8005726:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	021a      	lsls	r2, r3, #8
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800573c:	e004      	b.n	8005748 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800573e:	2317      	movs	r3, #23
 8005740:	18fb      	adds	r3, r7, r3
 8005742:	2201      	movs	r2, #1
 8005744:	701a      	strb	r2, [r3, #0]
      break;
 8005746:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	223c      	movs	r2, #60	; 0x3c
 800574c:	2100      	movs	r1, #0
 800574e:	5499      	strb	r1, [r3, r2]

  return status;
 8005750:	2317      	movs	r3, #23
 8005752:	18fb      	adds	r3, r7, r3
 8005754:	781b      	ldrb	r3, [r3, #0]
}
 8005756:	0018      	movs	r0, r3
 8005758:	46bd      	mov	sp, r7
 800575a:	b006      	add	sp, #24
 800575c:	bd80      	pop	{r7, pc}
 800575e:	46c0      	nop			; (mov r8, r8)
 8005760:	08006b50 	.word	0x08006b50
 8005764:	fffffbff 	.word	0xfffffbff

08005768 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005770:	46c0      	nop			; (mov r8, r8)
 8005772:	46bd      	mov	sp, r7
 8005774:	b002      	add	sp, #8
 8005776:	bd80      	pop	{r7, pc}

08005778 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005780:	46c0      	nop			; (mov r8, r8)
 8005782:	46bd      	mov	sp, r7
 8005784:	b002      	add	sp, #8
 8005786:	bd80      	pop	{r7, pc}

08005788 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005790:	46c0      	nop			; (mov r8, r8)
 8005792:	46bd      	mov	sp, r7
 8005794:	b002      	add	sp, #8
 8005796:	bd80      	pop	{r7, pc}

08005798 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057a0:	46c0      	nop			; (mov r8, r8)
 80057a2:	46bd      	mov	sp, r7
 80057a4:	b002      	add	sp, #8
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a2f      	ldr	r2, [pc, #188]	; (8005878 <TIM_Base_SetConfig+0xd0>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d003      	beq.n	80057c8 <TIM_Base_SetConfig+0x20>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a2e      	ldr	r2, [pc, #184]	; (800587c <TIM_Base_SetConfig+0xd4>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d108      	bne.n	80057da <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2270      	movs	r2, #112	; 0x70
 80057cc:	4393      	bics	r3, r2
 80057ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a26      	ldr	r2, [pc, #152]	; (8005878 <TIM_Base_SetConfig+0xd0>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d013      	beq.n	800580a <TIM_Base_SetConfig+0x62>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a25      	ldr	r2, [pc, #148]	; (800587c <TIM_Base_SetConfig+0xd4>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d00f      	beq.n	800580a <TIM_Base_SetConfig+0x62>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a24      	ldr	r2, [pc, #144]	; (8005880 <TIM_Base_SetConfig+0xd8>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d00b      	beq.n	800580a <TIM_Base_SetConfig+0x62>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a23      	ldr	r2, [pc, #140]	; (8005884 <TIM_Base_SetConfig+0xdc>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d007      	beq.n	800580a <TIM_Base_SetConfig+0x62>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a22      	ldr	r2, [pc, #136]	; (8005888 <TIM_Base_SetConfig+0xe0>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d003      	beq.n	800580a <TIM_Base_SetConfig+0x62>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a21      	ldr	r2, [pc, #132]	; (800588c <TIM_Base_SetConfig+0xe4>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d108      	bne.n	800581c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	4a20      	ldr	r2, [pc, #128]	; (8005890 <TIM_Base_SetConfig+0xe8>)
 800580e:	4013      	ands	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	4313      	orrs	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2280      	movs	r2, #128	; 0x80
 8005820:	4393      	bics	r3, r2
 8005822:	001a      	movs	r2, r3
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	4313      	orrs	r3, r2
 800582a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	689a      	ldr	r2, [r3, #8]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a0c      	ldr	r2, [pc, #48]	; (8005878 <TIM_Base_SetConfig+0xd0>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d00b      	beq.n	8005862 <TIM_Base_SetConfig+0xba>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a0d      	ldr	r2, [pc, #52]	; (8005884 <TIM_Base_SetConfig+0xdc>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d007      	beq.n	8005862 <TIM_Base_SetConfig+0xba>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a0c      	ldr	r2, [pc, #48]	; (8005888 <TIM_Base_SetConfig+0xe0>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d003      	beq.n	8005862 <TIM_Base_SetConfig+0xba>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a0b      	ldr	r2, [pc, #44]	; (800588c <TIM_Base_SetConfig+0xe4>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d103      	bne.n	800586a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	691a      	ldr	r2, [r3, #16]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	615a      	str	r2, [r3, #20]
}
 8005870:	46c0      	nop			; (mov r8, r8)
 8005872:	46bd      	mov	sp, r7
 8005874:	b004      	add	sp, #16
 8005876:	bd80      	pop	{r7, pc}
 8005878:	40012c00 	.word	0x40012c00
 800587c:	40000400 	.word	0x40000400
 8005880:	40002000 	.word	0x40002000
 8005884:	40014000 	.word	0x40014000
 8005888:	40014400 	.word	0x40014400
 800588c:	40014800 	.word	0x40014800
 8005890:	fffffcff 	.word	0xfffffcff

08005894 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	2201      	movs	r2, #1
 80058a4:	4393      	bics	r3, r2
 80058a6:	001a      	movs	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4a32      	ldr	r2, [pc, #200]	; (800598c <TIM_OC1_SetConfig+0xf8>)
 80058c2:	4013      	ands	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2203      	movs	r2, #3
 80058ca:	4393      	bics	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	2202      	movs	r2, #2
 80058dc:	4393      	bics	r3, r2
 80058de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a28      	ldr	r2, [pc, #160]	; (8005990 <TIM_OC1_SetConfig+0xfc>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d00b      	beq.n	800590a <TIM_OC1_SetConfig+0x76>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a27      	ldr	r2, [pc, #156]	; (8005994 <TIM_OC1_SetConfig+0x100>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d007      	beq.n	800590a <TIM_OC1_SetConfig+0x76>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a26      	ldr	r2, [pc, #152]	; (8005998 <TIM_OC1_SetConfig+0x104>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d003      	beq.n	800590a <TIM_OC1_SetConfig+0x76>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a25      	ldr	r2, [pc, #148]	; (800599c <TIM_OC1_SetConfig+0x108>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d10c      	bne.n	8005924 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	2208      	movs	r2, #8
 800590e:	4393      	bics	r3, r2
 8005910:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	4313      	orrs	r3, r2
 800591a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	2204      	movs	r2, #4
 8005920:	4393      	bics	r3, r2
 8005922:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a1a      	ldr	r2, [pc, #104]	; (8005990 <TIM_OC1_SetConfig+0xfc>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d00b      	beq.n	8005944 <TIM_OC1_SetConfig+0xb0>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a19      	ldr	r2, [pc, #100]	; (8005994 <TIM_OC1_SetConfig+0x100>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d007      	beq.n	8005944 <TIM_OC1_SetConfig+0xb0>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a18      	ldr	r2, [pc, #96]	; (8005998 <TIM_OC1_SetConfig+0x104>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d003      	beq.n	8005944 <TIM_OC1_SetConfig+0xb0>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a17      	ldr	r2, [pc, #92]	; (800599c <TIM_OC1_SetConfig+0x108>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d111      	bne.n	8005968 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	4a16      	ldr	r2, [pc, #88]	; (80059a0 <TIM_OC1_SetConfig+0x10c>)
 8005948:	4013      	ands	r3, r2
 800594a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	4a15      	ldr	r2, [pc, #84]	; (80059a4 <TIM_OC1_SetConfig+0x110>)
 8005950:	4013      	ands	r3, r2
 8005952:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	4313      	orrs	r3, r2
 800595c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	4313      	orrs	r3, r2
 8005966:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	621a      	str	r2, [r3, #32]
}
 8005982:	46c0      	nop			; (mov r8, r8)
 8005984:	46bd      	mov	sp, r7
 8005986:	b006      	add	sp, #24
 8005988:	bd80      	pop	{r7, pc}
 800598a:	46c0      	nop			; (mov r8, r8)
 800598c:	fffeff8f 	.word	0xfffeff8f
 8005990:	40012c00 	.word	0x40012c00
 8005994:	40014000 	.word	0x40014000
 8005998:	40014400 	.word	0x40014400
 800599c:	40014800 	.word	0x40014800
 80059a0:	fffffeff 	.word	0xfffffeff
 80059a4:	fffffdff 	.word	0xfffffdff

080059a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	2210      	movs	r2, #16
 80059b8:	4393      	bics	r3, r2
 80059ba:	001a      	movs	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a1b      	ldr	r3, [r3, #32]
 80059c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	4a2e      	ldr	r2, [pc, #184]	; (8005a90 <TIM_OC2_SetConfig+0xe8>)
 80059d6:	4013      	ands	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	4a2d      	ldr	r2, [pc, #180]	; (8005a94 <TIM_OC2_SetConfig+0xec>)
 80059de:	4013      	ands	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	021b      	lsls	r3, r3, #8
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	2220      	movs	r2, #32
 80059f2:	4393      	bics	r3, r2
 80059f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	011b      	lsls	r3, r3, #4
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a24      	ldr	r2, [pc, #144]	; (8005a98 <TIM_OC2_SetConfig+0xf0>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d10d      	bne.n	8005a26 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	2280      	movs	r2, #128	; 0x80
 8005a0e:	4393      	bics	r3, r2
 8005a10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	2240      	movs	r2, #64	; 0x40
 8005a22:	4393      	bics	r3, r2
 8005a24:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a1b      	ldr	r2, [pc, #108]	; (8005a98 <TIM_OC2_SetConfig+0xf0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d00b      	beq.n	8005a46 <TIM_OC2_SetConfig+0x9e>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a1a      	ldr	r2, [pc, #104]	; (8005a9c <TIM_OC2_SetConfig+0xf4>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d007      	beq.n	8005a46 <TIM_OC2_SetConfig+0x9e>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a19      	ldr	r2, [pc, #100]	; (8005aa0 <TIM_OC2_SetConfig+0xf8>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d003      	beq.n	8005a46 <TIM_OC2_SetConfig+0x9e>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a18      	ldr	r2, [pc, #96]	; (8005aa4 <TIM_OC2_SetConfig+0xfc>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d113      	bne.n	8005a6e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	4a17      	ldr	r2, [pc, #92]	; (8005aa8 <TIM_OC2_SetConfig+0x100>)
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	4a16      	ldr	r2, [pc, #88]	; (8005aac <TIM_OC2_SetConfig+0x104>)
 8005a52:	4013      	ands	r3, r2
 8005a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	621a      	str	r2, [r3, #32]
}
 8005a88:	46c0      	nop			; (mov r8, r8)
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	b006      	add	sp, #24
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	feff8fff 	.word	0xfeff8fff
 8005a94:	fffffcff 	.word	0xfffffcff
 8005a98:	40012c00 	.word	0x40012c00
 8005a9c:	40014000 	.word	0x40014000
 8005aa0:	40014400 	.word	0x40014400
 8005aa4:	40014800 	.word	0x40014800
 8005aa8:	fffffbff 	.word	0xfffffbff
 8005aac:	fffff7ff 	.word	0xfffff7ff

08005ab0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	4a35      	ldr	r2, [pc, #212]	; (8005b94 <TIM_OC3_SetConfig+0xe4>)
 8005ac0:	401a      	ands	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4a2f      	ldr	r2, [pc, #188]	; (8005b98 <TIM_OC3_SetConfig+0xe8>)
 8005adc:	4013      	ands	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2203      	movs	r2, #3
 8005ae4:	4393      	bics	r3, r2
 8005ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	4a29      	ldr	r2, [pc, #164]	; (8005b9c <TIM_OC3_SetConfig+0xec>)
 8005af6:	4013      	ands	r3, r2
 8005af8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	021b      	lsls	r3, r3, #8
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a25      	ldr	r2, [pc, #148]	; (8005ba0 <TIM_OC3_SetConfig+0xf0>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d10d      	bne.n	8005b2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	4a24      	ldr	r2, [pc, #144]	; (8005ba4 <TIM_OC3_SetConfig+0xf4>)
 8005b12:	4013      	ands	r3, r2
 8005b14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	021b      	lsls	r3, r3, #8
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	4a20      	ldr	r2, [pc, #128]	; (8005ba8 <TIM_OC3_SetConfig+0xf8>)
 8005b26:	4013      	ands	r3, r2
 8005b28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a1c      	ldr	r2, [pc, #112]	; (8005ba0 <TIM_OC3_SetConfig+0xf0>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d00b      	beq.n	8005b4a <TIM_OC3_SetConfig+0x9a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a1d      	ldr	r2, [pc, #116]	; (8005bac <TIM_OC3_SetConfig+0xfc>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d007      	beq.n	8005b4a <TIM_OC3_SetConfig+0x9a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a1c      	ldr	r2, [pc, #112]	; (8005bb0 <TIM_OC3_SetConfig+0x100>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d003      	beq.n	8005b4a <TIM_OC3_SetConfig+0x9a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a1b      	ldr	r2, [pc, #108]	; (8005bb4 <TIM_OC3_SetConfig+0x104>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d113      	bne.n	8005b72 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	4a1a      	ldr	r2, [pc, #104]	; (8005bb8 <TIM_OC3_SetConfig+0x108>)
 8005b4e:	4013      	ands	r3, r2
 8005b50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	4a19      	ldr	r2, [pc, #100]	; (8005bbc <TIM_OC3_SetConfig+0x10c>)
 8005b56:	4013      	ands	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	011b      	lsls	r3, r3, #4
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	011b      	lsls	r3, r3, #4
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	621a      	str	r2, [r3, #32]
}
 8005b8c:	46c0      	nop			; (mov r8, r8)
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	b006      	add	sp, #24
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	fffffeff 	.word	0xfffffeff
 8005b98:	fffeff8f 	.word	0xfffeff8f
 8005b9c:	fffffdff 	.word	0xfffffdff
 8005ba0:	40012c00 	.word	0x40012c00
 8005ba4:	fffff7ff 	.word	0xfffff7ff
 8005ba8:	fffffbff 	.word	0xfffffbff
 8005bac:	40014000 	.word	0x40014000
 8005bb0:	40014400 	.word	0x40014400
 8005bb4:	40014800 	.word	0x40014800
 8005bb8:	ffffefff 	.word	0xffffefff
 8005bbc:	ffffdfff 	.word	0xffffdfff

08005bc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	4a28      	ldr	r2, [pc, #160]	; (8005c70 <TIM_OC4_SetConfig+0xb0>)
 8005bd0:	401a      	ands	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4a22      	ldr	r2, [pc, #136]	; (8005c74 <TIM_OC4_SetConfig+0xb4>)
 8005bec:	4013      	ands	r3, r2
 8005bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4a21      	ldr	r2, [pc, #132]	; (8005c78 <TIM_OC4_SetConfig+0xb8>)
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	021b      	lsls	r3, r3, #8
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	4a1d      	ldr	r2, [pc, #116]	; (8005c7c <TIM_OC4_SetConfig+0xbc>)
 8005c08:	4013      	ands	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	031b      	lsls	r3, r3, #12
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a19      	ldr	r2, [pc, #100]	; (8005c80 <TIM_OC4_SetConfig+0xc0>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d00b      	beq.n	8005c38 <TIM_OC4_SetConfig+0x78>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a18      	ldr	r2, [pc, #96]	; (8005c84 <TIM_OC4_SetConfig+0xc4>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d007      	beq.n	8005c38 <TIM_OC4_SetConfig+0x78>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a17      	ldr	r2, [pc, #92]	; (8005c88 <TIM_OC4_SetConfig+0xc8>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d003      	beq.n	8005c38 <TIM_OC4_SetConfig+0x78>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a16      	ldr	r2, [pc, #88]	; (8005c8c <TIM_OC4_SetConfig+0xcc>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d109      	bne.n	8005c4c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	4a15      	ldr	r2, [pc, #84]	; (8005c90 <TIM_OC4_SetConfig+0xd0>)
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	695b      	ldr	r3, [r3, #20]
 8005c44:	019b      	lsls	r3, r3, #6
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	621a      	str	r2, [r3, #32]
}
 8005c66:	46c0      	nop			; (mov r8, r8)
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	b006      	add	sp, #24
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	46c0      	nop			; (mov r8, r8)
 8005c70:	ffffefff 	.word	0xffffefff
 8005c74:	feff8fff 	.word	0xfeff8fff
 8005c78:	fffffcff 	.word	0xfffffcff
 8005c7c:	ffffdfff 	.word	0xffffdfff
 8005c80:	40012c00 	.word	0x40012c00
 8005c84:	40014000 	.word	0x40014000
 8005c88:	40014400 	.word	0x40014400
 8005c8c:	40014800 	.word	0x40014800
 8005c90:	ffffbfff 	.word	0xffffbfff

08005c94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	4a25      	ldr	r2, [pc, #148]	; (8005d38 <TIM_OC5_SetConfig+0xa4>)
 8005ca4:	401a      	ands	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4a1f      	ldr	r2, [pc, #124]	; (8005d3c <TIM_OC5_SetConfig+0xa8>)
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	4a1b      	ldr	r2, [pc, #108]	; (8005d40 <TIM_OC5_SetConfig+0xac>)
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	041b      	lsls	r3, r3, #16
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a17      	ldr	r2, [pc, #92]	; (8005d44 <TIM_OC5_SetConfig+0xb0>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d00b      	beq.n	8005d02 <TIM_OC5_SetConfig+0x6e>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a16      	ldr	r2, [pc, #88]	; (8005d48 <TIM_OC5_SetConfig+0xb4>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d007      	beq.n	8005d02 <TIM_OC5_SetConfig+0x6e>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a15      	ldr	r2, [pc, #84]	; (8005d4c <TIM_OC5_SetConfig+0xb8>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d003      	beq.n	8005d02 <TIM_OC5_SetConfig+0x6e>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a14      	ldr	r2, [pc, #80]	; (8005d50 <TIM_OC5_SetConfig+0xbc>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d109      	bne.n	8005d16 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	4a0c      	ldr	r2, [pc, #48]	; (8005d38 <TIM_OC5_SetConfig+0xa4>)
 8005d06:	4013      	ands	r3, r2
 8005d08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	021b      	lsls	r3, r3, #8
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	685a      	ldr	r2, [r3, #4]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	621a      	str	r2, [r3, #32]
}
 8005d30:	46c0      	nop			; (mov r8, r8)
 8005d32:	46bd      	mov	sp, r7
 8005d34:	b006      	add	sp, #24
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	fffeffff 	.word	0xfffeffff
 8005d3c:	fffeff8f 	.word	0xfffeff8f
 8005d40:	fffdffff 	.word	0xfffdffff
 8005d44:	40012c00 	.word	0x40012c00
 8005d48:	40014000 	.word	0x40014000
 8005d4c:	40014400 	.word	0x40014400
 8005d50:	40014800 	.word	0x40014800

08005d54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	4a26      	ldr	r2, [pc, #152]	; (8005dfc <TIM_OC6_SetConfig+0xa8>)
 8005d64:	401a      	ands	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4a20      	ldr	r2, [pc, #128]	; (8005e00 <TIM_OC6_SetConfig+0xac>)
 8005d80:	4013      	ands	r3, r2
 8005d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	021b      	lsls	r3, r3, #8
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	4a1c      	ldr	r2, [pc, #112]	; (8005e04 <TIM_OC6_SetConfig+0xb0>)
 8005d94:	4013      	ands	r3, r2
 8005d96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	051b      	lsls	r3, r3, #20
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a18      	ldr	r2, [pc, #96]	; (8005e08 <TIM_OC6_SetConfig+0xb4>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d00b      	beq.n	8005dc4 <TIM_OC6_SetConfig+0x70>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a17      	ldr	r2, [pc, #92]	; (8005e0c <TIM_OC6_SetConfig+0xb8>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d007      	beq.n	8005dc4 <TIM_OC6_SetConfig+0x70>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a16      	ldr	r2, [pc, #88]	; (8005e10 <TIM_OC6_SetConfig+0xbc>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d003      	beq.n	8005dc4 <TIM_OC6_SetConfig+0x70>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a15      	ldr	r2, [pc, #84]	; (8005e14 <TIM_OC6_SetConfig+0xc0>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d109      	bne.n	8005dd8 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	4a14      	ldr	r2, [pc, #80]	; (8005e18 <TIM_OC6_SetConfig+0xc4>)
 8005dc8:	4013      	ands	r3, r2
 8005dca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	029b      	lsls	r3, r3, #10
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	621a      	str	r2, [r3, #32]
}
 8005df2:	46c0      	nop			; (mov r8, r8)
 8005df4:	46bd      	mov	sp, r7
 8005df6:	b006      	add	sp, #24
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	46c0      	nop			; (mov r8, r8)
 8005dfc:	ffefffff 	.word	0xffefffff
 8005e00:	feff8fff 	.word	0xfeff8fff
 8005e04:	ffdfffff 	.word	0xffdfffff
 8005e08:	40012c00 	.word	0x40012c00
 8005e0c:	40014000 	.word	0x40014000
 8005e10:	40014400 	.word	0x40014400
 8005e14:	40014800 	.word	0x40014800
 8005e18:	fffbffff 	.word	0xfffbffff

08005e1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	221f      	movs	r2, #31
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	2201      	movs	r2, #1
 8005e30:	409a      	lsls	r2, r3
 8005e32:	0013      	movs	r3, r2
 8005e34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	43d2      	mvns	r2, r2
 8005e3e:	401a      	ands	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6a1a      	ldr	r2, [r3, #32]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	211f      	movs	r1, #31
 8005e4c:	400b      	ands	r3, r1
 8005e4e:	6879      	ldr	r1, [r7, #4]
 8005e50:	4099      	lsls	r1, r3
 8005e52:	000b      	movs	r3, r1
 8005e54:	431a      	orrs	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	621a      	str	r2, [r3, #32]
}
 8005e5a:	46c0      	nop			; (mov r8, r8)
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	b006      	add	sp, #24
 8005e60:	bd80      	pop	{r7, pc}
	...

08005e64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	223c      	movs	r2, #60	; 0x3c
 8005e72:	5c9b      	ldrb	r3, [r3, r2]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d101      	bne.n	8005e7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	e04f      	b.n	8005f1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	223c      	movs	r2, #60	; 0x3c
 8005e80:	2101      	movs	r1, #1
 8005e82:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	223d      	movs	r2, #61	; 0x3d
 8005e88:	2102      	movs	r1, #2
 8005e8a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a20      	ldr	r2, [pc, #128]	; (8005f24 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d108      	bne.n	8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	4a1f      	ldr	r2, [pc, #124]	; (8005f28 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005eaa:	4013      	ands	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2270      	movs	r2, #112	; 0x70
 8005ebc:	4393      	bics	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a13      	ldr	r2, [pc, #76]	; (8005f24 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d009      	beq.n	8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a12      	ldr	r2, [pc, #72]	; (8005f2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d004      	beq.n	8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a11      	ldr	r2, [pc, #68]	; (8005f30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d10c      	bne.n	8005f0a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2280      	movs	r2, #128	; 0x80
 8005ef4:	4393      	bics	r3, r2
 8005ef6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	223d      	movs	r2, #61	; 0x3d
 8005f0e:	2101      	movs	r1, #1
 8005f10:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	223c      	movs	r2, #60	; 0x3c
 8005f16:	2100      	movs	r1, #0
 8005f18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	0018      	movs	r0, r3
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	b004      	add	sp, #16
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	40012c00 	.word	0x40012c00
 8005f28:	ff0fffff 	.word	0xff0fffff
 8005f2c:	40000400 	.word	0x40000400
 8005f30:	40014000 	.word	0x40014000

08005f34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	223c      	movs	r2, #60	; 0x3c
 8005f46:	5c9b      	ldrb	r3, [r3, r2]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d101      	bne.n	8005f50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	e079      	b.n	8006044 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	223c      	movs	r2, #60	; 0x3c
 8005f54:	2101      	movs	r1, #1
 8005f56:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	22ff      	movs	r2, #255	; 0xff
 8005f5c:	4393      	bics	r3, r2
 8005f5e:	001a      	movs	r2, r3
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4a38      	ldr	r2, [pc, #224]	; (800604c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8005f6c:	401a      	ands	r2, r3
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	4a35      	ldr	r2, [pc, #212]	; (8006050 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005f7a:	401a      	ands	r2, r3
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	4a33      	ldr	r2, [pc, #204]	; (8006054 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005f88:	401a      	ands	r2, r3
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	4a30      	ldr	r2, [pc, #192]	; (8006058 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005f96:	401a      	ands	r2, r3
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4a2e      	ldr	r2, [pc, #184]	; (800605c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8005fa4:	401a      	ands	r2, r3
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	4a2b      	ldr	r2, [pc, #172]	; (8006060 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8005fb2:	401a      	ands	r2, r3
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4a29      	ldr	r2, [pc, #164]	; (8006064 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8005fc0:	401a      	ands	r2, r3
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	041b      	lsls	r3, r3, #16
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a25      	ldr	r2, [pc, #148]	; (8006068 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d106      	bne.n	8005fe4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	4a24      	ldr	r2, [pc, #144]	; (800606c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005fda:	401a      	ands	r2, r3
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	69db      	ldr	r3, [r3, #28]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a1f      	ldr	r2, [pc, #124]	; (8006068 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d121      	bne.n	8006032 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	4a1f      	ldr	r2, [pc, #124]	; (8006070 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005ff2:	401a      	ands	r2, r3
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff8:	051b      	lsls	r3, r3, #20
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	4a1c      	ldr	r2, [pc, #112]	; (8006074 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8006002:	401a      	ands	r2, r3
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	6a1b      	ldr	r3, [r3, #32]
 8006008:	4313      	orrs	r3, r2
 800600a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4a1a      	ldr	r2, [pc, #104]	; (8006078 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8006010:	401a      	ands	r2, r3
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006016:	4313      	orrs	r3, r2
 8006018:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a12      	ldr	r2, [pc, #72]	; (8006068 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d106      	bne.n	8006032 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	4a15      	ldr	r2, [pc, #84]	; (800607c <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8006028:	401a      	ands	r2, r3
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602e:	4313      	orrs	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	223c      	movs	r2, #60	; 0x3c
 800603e:	2100      	movs	r1, #0
 8006040:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	0018      	movs	r0, r3
 8006046:	46bd      	mov	sp, r7
 8006048:	b004      	add	sp, #16
 800604a:	bd80      	pop	{r7, pc}
 800604c:	fffffcff 	.word	0xfffffcff
 8006050:	fffffbff 	.word	0xfffffbff
 8006054:	fffff7ff 	.word	0xfffff7ff
 8006058:	ffffefff 	.word	0xffffefff
 800605c:	ffffdfff 	.word	0xffffdfff
 8006060:	ffffbfff 	.word	0xffffbfff
 8006064:	fff0ffff 	.word	0xfff0ffff
 8006068:	40012c00 	.word	0x40012c00
 800606c:	efffffff 	.word	0xefffffff
 8006070:	ff0fffff 	.word	0xff0fffff
 8006074:	feffffff 	.word	0xfeffffff
 8006078:	fdffffff 	.word	0xfdffffff
 800607c:	dfffffff 	.word	0xdfffffff

08006080 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006088:	46c0      	nop			; (mov r8, r8)
 800608a:	46bd      	mov	sp, r7
 800608c:	b002      	add	sp, #8
 800608e:	bd80      	pop	{r7, pc}

08006090 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006098:	46c0      	nop			; (mov r8, r8)
 800609a:	46bd      	mov	sp, r7
 800609c:	b002      	add	sp, #8
 800609e:	bd80      	pop	{r7, pc}

080060a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80060a8:	46c0      	nop			; (mov r8, r8)
 80060aa:	46bd      	mov	sp, r7
 80060ac:	b002      	add	sp, #8
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d101      	bne.n	80060c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e046      	b.n	8006150 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2288      	movs	r2, #136	; 0x88
 80060c6:	589b      	ldr	r3, [r3, r2]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d107      	bne.n	80060dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2284      	movs	r2, #132	; 0x84
 80060d0:	2100      	movs	r1, #0
 80060d2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	0018      	movs	r0, r3
 80060d8:	f7fb fffc 	bl	80020d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2288      	movs	r2, #136	; 0x88
 80060e0:	2124      	movs	r1, #36	; 0x24
 80060e2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2101      	movs	r1, #1
 80060f0:	438a      	bics	r2, r1
 80060f2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	0018      	movs	r0, r3
 80060f8:	f000 f830 	bl	800615c <UART_SetConfig>
 80060fc:	0003      	movs	r3, r0
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d101      	bne.n	8006106 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e024      	b.n	8006150 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610a:	2b00      	cmp	r3, #0
 800610c:	d003      	beq.n	8006116 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	0018      	movs	r0, r3
 8006112:	f000 f9c7 	bl	80064a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	490d      	ldr	r1, [pc, #52]	; (8006158 <HAL_UART_Init+0xa8>)
 8006122:	400a      	ands	r2, r1
 8006124:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	212a      	movs	r1, #42	; 0x2a
 8006132:	438a      	bics	r2, r1
 8006134:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2101      	movs	r1, #1
 8006142:	430a      	orrs	r2, r1
 8006144:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	0018      	movs	r0, r3
 800614a:	f000 fa5f 	bl	800660c <UART_CheckIdleState>
 800614e:	0003      	movs	r3, r0
}
 8006150:	0018      	movs	r0, r3
 8006152:	46bd      	mov	sp, r7
 8006154:	b002      	add	sp, #8
 8006156:	bd80      	pop	{r7, pc}
 8006158:	ffffb7ff 	.word	0xffffb7ff

0800615c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b088      	sub	sp, #32
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006164:	231a      	movs	r3, #26
 8006166:	18fb      	adds	r3, r7, r3
 8006168:	2200      	movs	r2, #0
 800616a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	689a      	ldr	r2, [r3, #8]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	431a      	orrs	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	431a      	orrs	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	69db      	ldr	r3, [r3, #28]
 8006180:	4313      	orrs	r3, r2
 8006182:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4abc      	ldr	r2, [pc, #752]	; (800647c <UART_SetConfig+0x320>)
 800618c:	4013      	ands	r3, r2
 800618e:	0019      	movs	r1, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	69fa      	ldr	r2, [r7, #28]
 8006196:	430a      	orrs	r2, r1
 8006198:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	4ab7      	ldr	r2, [pc, #732]	; (8006480 <UART_SetConfig+0x324>)
 80061a2:	4013      	ands	r3, r2
 80061a4:	0019      	movs	r1, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68da      	ldr	r2, [r3, #12]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a1b      	ldr	r3, [r3, #32]
 80061bc:	69fa      	ldr	r2, [r7, #28]
 80061be:	4313      	orrs	r3, r2
 80061c0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	4aae      	ldr	r2, [pc, #696]	; (8006484 <UART_SetConfig+0x328>)
 80061ca:	4013      	ands	r3, r2
 80061cc:	0019      	movs	r1, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	69fa      	ldr	r2, [r7, #28]
 80061d4:	430a      	orrs	r2, r1
 80061d6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061de:	220f      	movs	r2, #15
 80061e0:	4393      	bics	r3, r2
 80061e2:	0019      	movs	r1, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4aa4      	ldr	r2, [pc, #656]	; (8006488 <UART_SetConfig+0x32c>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d127      	bne.n	800624a <UART_SetConfig+0xee>
 80061fa:	4ba4      	ldr	r3, [pc, #656]	; (800648c <UART_SetConfig+0x330>)
 80061fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fe:	2203      	movs	r2, #3
 8006200:	4013      	ands	r3, r2
 8006202:	2b03      	cmp	r3, #3
 8006204:	d017      	beq.n	8006236 <UART_SetConfig+0xda>
 8006206:	d81b      	bhi.n	8006240 <UART_SetConfig+0xe4>
 8006208:	2b02      	cmp	r3, #2
 800620a:	d00a      	beq.n	8006222 <UART_SetConfig+0xc6>
 800620c:	d818      	bhi.n	8006240 <UART_SetConfig+0xe4>
 800620e:	2b00      	cmp	r3, #0
 8006210:	d002      	beq.n	8006218 <UART_SetConfig+0xbc>
 8006212:	2b01      	cmp	r3, #1
 8006214:	d00a      	beq.n	800622c <UART_SetConfig+0xd0>
 8006216:	e013      	b.n	8006240 <UART_SetConfig+0xe4>
 8006218:	231b      	movs	r3, #27
 800621a:	18fb      	adds	r3, r7, r3
 800621c:	2200      	movs	r2, #0
 800621e:	701a      	strb	r2, [r3, #0]
 8006220:	e058      	b.n	80062d4 <UART_SetConfig+0x178>
 8006222:	231b      	movs	r3, #27
 8006224:	18fb      	adds	r3, r7, r3
 8006226:	2202      	movs	r2, #2
 8006228:	701a      	strb	r2, [r3, #0]
 800622a:	e053      	b.n	80062d4 <UART_SetConfig+0x178>
 800622c:	231b      	movs	r3, #27
 800622e:	18fb      	adds	r3, r7, r3
 8006230:	2204      	movs	r2, #4
 8006232:	701a      	strb	r2, [r3, #0]
 8006234:	e04e      	b.n	80062d4 <UART_SetConfig+0x178>
 8006236:	231b      	movs	r3, #27
 8006238:	18fb      	adds	r3, r7, r3
 800623a:	2208      	movs	r2, #8
 800623c:	701a      	strb	r2, [r3, #0]
 800623e:	e049      	b.n	80062d4 <UART_SetConfig+0x178>
 8006240:	231b      	movs	r3, #27
 8006242:	18fb      	adds	r3, r7, r3
 8006244:	2210      	movs	r2, #16
 8006246:	701a      	strb	r2, [r3, #0]
 8006248:	e044      	b.n	80062d4 <UART_SetConfig+0x178>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a90      	ldr	r2, [pc, #576]	; (8006490 <UART_SetConfig+0x334>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d127      	bne.n	80062a4 <UART_SetConfig+0x148>
 8006254:	4b8d      	ldr	r3, [pc, #564]	; (800648c <UART_SetConfig+0x330>)
 8006256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006258:	220c      	movs	r2, #12
 800625a:	4013      	ands	r3, r2
 800625c:	2b0c      	cmp	r3, #12
 800625e:	d017      	beq.n	8006290 <UART_SetConfig+0x134>
 8006260:	d81b      	bhi.n	800629a <UART_SetConfig+0x13e>
 8006262:	2b08      	cmp	r3, #8
 8006264:	d00a      	beq.n	800627c <UART_SetConfig+0x120>
 8006266:	d818      	bhi.n	800629a <UART_SetConfig+0x13e>
 8006268:	2b00      	cmp	r3, #0
 800626a:	d002      	beq.n	8006272 <UART_SetConfig+0x116>
 800626c:	2b04      	cmp	r3, #4
 800626e:	d00a      	beq.n	8006286 <UART_SetConfig+0x12a>
 8006270:	e013      	b.n	800629a <UART_SetConfig+0x13e>
 8006272:	231b      	movs	r3, #27
 8006274:	18fb      	adds	r3, r7, r3
 8006276:	2200      	movs	r2, #0
 8006278:	701a      	strb	r2, [r3, #0]
 800627a:	e02b      	b.n	80062d4 <UART_SetConfig+0x178>
 800627c:	231b      	movs	r3, #27
 800627e:	18fb      	adds	r3, r7, r3
 8006280:	2202      	movs	r2, #2
 8006282:	701a      	strb	r2, [r3, #0]
 8006284:	e026      	b.n	80062d4 <UART_SetConfig+0x178>
 8006286:	231b      	movs	r3, #27
 8006288:	18fb      	adds	r3, r7, r3
 800628a:	2204      	movs	r2, #4
 800628c:	701a      	strb	r2, [r3, #0]
 800628e:	e021      	b.n	80062d4 <UART_SetConfig+0x178>
 8006290:	231b      	movs	r3, #27
 8006292:	18fb      	adds	r3, r7, r3
 8006294:	2208      	movs	r2, #8
 8006296:	701a      	strb	r2, [r3, #0]
 8006298:	e01c      	b.n	80062d4 <UART_SetConfig+0x178>
 800629a:	231b      	movs	r3, #27
 800629c:	18fb      	adds	r3, r7, r3
 800629e:	2210      	movs	r2, #16
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	e017      	b.n	80062d4 <UART_SetConfig+0x178>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a7a      	ldr	r2, [pc, #488]	; (8006494 <UART_SetConfig+0x338>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d104      	bne.n	80062b8 <UART_SetConfig+0x15c>
 80062ae:	231b      	movs	r3, #27
 80062b0:	18fb      	adds	r3, r7, r3
 80062b2:	2200      	movs	r2, #0
 80062b4:	701a      	strb	r2, [r3, #0]
 80062b6:	e00d      	b.n	80062d4 <UART_SetConfig+0x178>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a76      	ldr	r2, [pc, #472]	; (8006498 <UART_SetConfig+0x33c>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d104      	bne.n	80062cc <UART_SetConfig+0x170>
 80062c2:	231b      	movs	r3, #27
 80062c4:	18fb      	adds	r3, r7, r3
 80062c6:	2200      	movs	r2, #0
 80062c8:	701a      	strb	r2, [r3, #0]
 80062ca:	e003      	b.n	80062d4 <UART_SetConfig+0x178>
 80062cc:	231b      	movs	r3, #27
 80062ce:	18fb      	adds	r3, r7, r3
 80062d0:	2210      	movs	r2, #16
 80062d2:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	69da      	ldr	r2, [r3, #28]
 80062d8:	2380      	movs	r3, #128	; 0x80
 80062da:	021b      	lsls	r3, r3, #8
 80062dc:	429a      	cmp	r2, r3
 80062de:	d000      	beq.n	80062e2 <UART_SetConfig+0x186>
 80062e0:	e065      	b.n	80063ae <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80062e2:	231b      	movs	r3, #27
 80062e4:	18fb      	adds	r3, r7, r3
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	2b08      	cmp	r3, #8
 80062ea:	d015      	beq.n	8006318 <UART_SetConfig+0x1bc>
 80062ec:	dc18      	bgt.n	8006320 <UART_SetConfig+0x1c4>
 80062ee:	2b04      	cmp	r3, #4
 80062f0:	d00d      	beq.n	800630e <UART_SetConfig+0x1b2>
 80062f2:	dc15      	bgt.n	8006320 <UART_SetConfig+0x1c4>
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d002      	beq.n	80062fe <UART_SetConfig+0x1a2>
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d005      	beq.n	8006308 <UART_SetConfig+0x1ac>
 80062fc:	e010      	b.n	8006320 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062fe:	f7fe fa25 	bl	800474c <HAL_RCC_GetPCLK1Freq>
 8006302:	0003      	movs	r3, r0
 8006304:	617b      	str	r3, [r7, #20]
        break;
 8006306:	e012      	b.n	800632e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006308:	4b64      	ldr	r3, [pc, #400]	; (800649c <UART_SetConfig+0x340>)
 800630a:	617b      	str	r3, [r7, #20]
        break;
 800630c:	e00f      	b.n	800632e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800630e:	f7fe f993 	bl	8004638 <HAL_RCC_GetSysClockFreq>
 8006312:	0003      	movs	r3, r0
 8006314:	617b      	str	r3, [r7, #20]
        break;
 8006316:	e00a      	b.n	800632e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006318:	2380      	movs	r3, #128	; 0x80
 800631a:	021b      	lsls	r3, r3, #8
 800631c:	617b      	str	r3, [r7, #20]
        break;
 800631e:	e006      	b.n	800632e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006324:	231a      	movs	r3, #26
 8006326:	18fb      	adds	r3, r7, r3
 8006328:	2201      	movs	r2, #1
 800632a:	701a      	strb	r2, [r3, #0]
        break;
 800632c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d100      	bne.n	8006336 <UART_SetConfig+0x1da>
 8006334:	e08d      	b.n	8006452 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800633a:	4b59      	ldr	r3, [pc, #356]	; (80064a0 <UART_SetConfig+0x344>)
 800633c:	0052      	lsls	r2, r2, #1
 800633e:	5ad3      	ldrh	r3, [r2, r3]
 8006340:	0019      	movs	r1, r3
 8006342:	6978      	ldr	r0, [r7, #20]
 8006344:	f7f9 fedc 	bl	8000100 <__udivsi3>
 8006348:	0003      	movs	r3, r0
 800634a:	005a      	lsls	r2, r3, #1
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	085b      	lsrs	r3, r3, #1
 8006352:	18d2      	adds	r2, r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	0019      	movs	r1, r3
 800635a:	0010      	movs	r0, r2
 800635c:	f7f9 fed0 	bl	8000100 <__udivsi3>
 8006360:	0003      	movs	r3, r0
 8006362:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	2b0f      	cmp	r3, #15
 8006368:	d91c      	bls.n	80063a4 <UART_SetConfig+0x248>
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	2380      	movs	r3, #128	; 0x80
 800636e:	025b      	lsls	r3, r3, #9
 8006370:	429a      	cmp	r2, r3
 8006372:	d217      	bcs.n	80063a4 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	b29a      	uxth	r2, r3
 8006378:	200e      	movs	r0, #14
 800637a:	183b      	adds	r3, r7, r0
 800637c:	210f      	movs	r1, #15
 800637e:	438a      	bics	r2, r1
 8006380:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	085b      	lsrs	r3, r3, #1
 8006386:	b29b      	uxth	r3, r3
 8006388:	2207      	movs	r2, #7
 800638a:	4013      	ands	r3, r2
 800638c:	b299      	uxth	r1, r3
 800638e:	183b      	adds	r3, r7, r0
 8006390:	183a      	adds	r2, r7, r0
 8006392:	8812      	ldrh	r2, [r2, #0]
 8006394:	430a      	orrs	r2, r1
 8006396:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	183a      	adds	r2, r7, r0
 800639e:	8812      	ldrh	r2, [r2, #0]
 80063a0:	60da      	str	r2, [r3, #12]
 80063a2:	e056      	b.n	8006452 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80063a4:	231a      	movs	r3, #26
 80063a6:	18fb      	adds	r3, r7, r3
 80063a8:	2201      	movs	r2, #1
 80063aa:	701a      	strb	r2, [r3, #0]
 80063ac:	e051      	b.n	8006452 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063ae:	231b      	movs	r3, #27
 80063b0:	18fb      	adds	r3, r7, r3
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	2b08      	cmp	r3, #8
 80063b6:	d015      	beq.n	80063e4 <UART_SetConfig+0x288>
 80063b8:	dc18      	bgt.n	80063ec <UART_SetConfig+0x290>
 80063ba:	2b04      	cmp	r3, #4
 80063bc:	d00d      	beq.n	80063da <UART_SetConfig+0x27e>
 80063be:	dc15      	bgt.n	80063ec <UART_SetConfig+0x290>
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d002      	beq.n	80063ca <UART_SetConfig+0x26e>
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d005      	beq.n	80063d4 <UART_SetConfig+0x278>
 80063c8:	e010      	b.n	80063ec <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063ca:	f7fe f9bf 	bl	800474c <HAL_RCC_GetPCLK1Freq>
 80063ce:	0003      	movs	r3, r0
 80063d0:	617b      	str	r3, [r7, #20]
        break;
 80063d2:	e012      	b.n	80063fa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063d4:	4b31      	ldr	r3, [pc, #196]	; (800649c <UART_SetConfig+0x340>)
 80063d6:	617b      	str	r3, [r7, #20]
        break;
 80063d8:	e00f      	b.n	80063fa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063da:	f7fe f92d 	bl	8004638 <HAL_RCC_GetSysClockFreq>
 80063de:	0003      	movs	r3, r0
 80063e0:	617b      	str	r3, [r7, #20]
        break;
 80063e2:	e00a      	b.n	80063fa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063e4:	2380      	movs	r3, #128	; 0x80
 80063e6:	021b      	lsls	r3, r3, #8
 80063e8:	617b      	str	r3, [r7, #20]
        break;
 80063ea:	e006      	b.n	80063fa <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80063ec:	2300      	movs	r3, #0
 80063ee:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80063f0:	231a      	movs	r3, #26
 80063f2:	18fb      	adds	r3, r7, r3
 80063f4:	2201      	movs	r2, #1
 80063f6:	701a      	strb	r2, [r3, #0]
        break;
 80063f8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d028      	beq.n	8006452 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006404:	4b26      	ldr	r3, [pc, #152]	; (80064a0 <UART_SetConfig+0x344>)
 8006406:	0052      	lsls	r2, r2, #1
 8006408:	5ad3      	ldrh	r3, [r2, r3]
 800640a:	0019      	movs	r1, r3
 800640c:	6978      	ldr	r0, [r7, #20]
 800640e:	f7f9 fe77 	bl	8000100 <__udivsi3>
 8006412:	0003      	movs	r3, r0
 8006414:	001a      	movs	r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	085b      	lsrs	r3, r3, #1
 800641c:	18d2      	adds	r2, r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	0019      	movs	r1, r3
 8006424:	0010      	movs	r0, r2
 8006426:	f7f9 fe6b 	bl	8000100 <__udivsi3>
 800642a:	0003      	movs	r3, r0
 800642c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	2b0f      	cmp	r3, #15
 8006432:	d90a      	bls.n	800644a <UART_SetConfig+0x2ee>
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	2380      	movs	r3, #128	; 0x80
 8006438:	025b      	lsls	r3, r3, #9
 800643a:	429a      	cmp	r2, r3
 800643c:	d205      	bcs.n	800644a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	b29a      	uxth	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	60da      	str	r2, [r3, #12]
 8006448:	e003      	b.n	8006452 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800644a:	231a      	movs	r3, #26
 800644c:	18fb      	adds	r3, r7, r3
 800644e:	2201      	movs	r2, #1
 8006450:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	226a      	movs	r2, #106	; 0x6a
 8006456:	2101      	movs	r1, #1
 8006458:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2268      	movs	r2, #104	; 0x68
 800645e:	2101      	movs	r1, #1
 8006460:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800646e:	231a      	movs	r3, #26
 8006470:	18fb      	adds	r3, r7, r3
 8006472:	781b      	ldrb	r3, [r3, #0]
}
 8006474:	0018      	movs	r0, r3
 8006476:	46bd      	mov	sp, r7
 8006478:	b008      	add	sp, #32
 800647a:	bd80      	pop	{r7, pc}
 800647c:	cfff69f3 	.word	0xcfff69f3
 8006480:	ffffcfff 	.word	0xffffcfff
 8006484:	11fff4ff 	.word	0x11fff4ff
 8006488:	40013800 	.word	0x40013800
 800648c:	40021000 	.word	0x40021000
 8006490:	40004400 	.word	0x40004400
 8006494:	40004800 	.word	0x40004800
 8006498:	40004c00 	.word	0x40004c00
 800649c:	00f42400 	.word	0x00f42400
 80064a0:	08006ba4 	.word	0x08006ba4

080064a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b0:	2201      	movs	r2, #1
 80064b2:	4013      	ands	r3, r2
 80064b4:	d00b      	beq.n	80064ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	4a4a      	ldr	r2, [pc, #296]	; (80065e8 <UART_AdvFeatureConfig+0x144>)
 80064be:	4013      	ands	r3, r2
 80064c0:	0019      	movs	r1, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	430a      	orrs	r2, r1
 80064cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d2:	2202      	movs	r2, #2
 80064d4:	4013      	ands	r3, r2
 80064d6:	d00b      	beq.n	80064f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	4a43      	ldr	r2, [pc, #268]	; (80065ec <UART_AdvFeatureConfig+0x148>)
 80064e0:	4013      	ands	r3, r2
 80064e2:	0019      	movs	r1, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	430a      	orrs	r2, r1
 80064ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f4:	2204      	movs	r2, #4
 80064f6:	4013      	ands	r3, r2
 80064f8:	d00b      	beq.n	8006512 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	4a3b      	ldr	r2, [pc, #236]	; (80065f0 <UART_AdvFeatureConfig+0x14c>)
 8006502:	4013      	ands	r3, r2
 8006504:	0019      	movs	r1, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	430a      	orrs	r2, r1
 8006510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006516:	2208      	movs	r2, #8
 8006518:	4013      	ands	r3, r2
 800651a:	d00b      	beq.n	8006534 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	4a34      	ldr	r2, [pc, #208]	; (80065f4 <UART_AdvFeatureConfig+0x150>)
 8006524:	4013      	ands	r3, r2
 8006526:	0019      	movs	r1, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	430a      	orrs	r2, r1
 8006532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006538:	2210      	movs	r2, #16
 800653a:	4013      	ands	r3, r2
 800653c:	d00b      	beq.n	8006556 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	4a2c      	ldr	r2, [pc, #176]	; (80065f8 <UART_AdvFeatureConfig+0x154>)
 8006546:	4013      	ands	r3, r2
 8006548:	0019      	movs	r1, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	430a      	orrs	r2, r1
 8006554:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655a:	2220      	movs	r2, #32
 800655c:	4013      	ands	r3, r2
 800655e:	d00b      	beq.n	8006578 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	4a25      	ldr	r2, [pc, #148]	; (80065fc <UART_AdvFeatureConfig+0x158>)
 8006568:	4013      	ands	r3, r2
 800656a:	0019      	movs	r1, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	430a      	orrs	r2, r1
 8006576:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657c:	2240      	movs	r2, #64	; 0x40
 800657e:	4013      	ands	r3, r2
 8006580:	d01d      	beq.n	80065be <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	4a1d      	ldr	r2, [pc, #116]	; (8006600 <UART_AdvFeatureConfig+0x15c>)
 800658a:	4013      	ands	r3, r2
 800658c:	0019      	movs	r1, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	430a      	orrs	r2, r1
 8006598:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800659e:	2380      	movs	r3, #128	; 0x80
 80065a0:	035b      	lsls	r3, r3, #13
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d10b      	bne.n	80065be <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	4a15      	ldr	r2, [pc, #84]	; (8006604 <UART_AdvFeatureConfig+0x160>)
 80065ae:	4013      	ands	r3, r2
 80065b0:	0019      	movs	r1, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	430a      	orrs	r2, r1
 80065bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c2:	2280      	movs	r2, #128	; 0x80
 80065c4:	4013      	ands	r3, r2
 80065c6:	d00b      	beq.n	80065e0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	4a0e      	ldr	r2, [pc, #56]	; (8006608 <UART_AdvFeatureConfig+0x164>)
 80065d0:	4013      	ands	r3, r2
 80065d2:	0019      	movs	r1, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	430a      	orrs	r2, r1
 80065de:	605a      	str	r2, [r3, #4]
  }
}
 80065e0:	46c0      	nop			; (mov r8, r8)
 80065e2:	46bd      	mov	sp, r7
 80065e4:	b002      	add	sp, #8
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	fffdffff 	.word	0xfffdffff
 80065ec:	fffeffff 	.word	0xfffeffff
 80065f0:	fffbffff 	.word	0xfffbffff
 80065f4:	ffff7fff 	.word	0xffff7fff
 80065f8:	ffffefff 	.word	0xffffefff
 80065fc:	ffffdfff 	.word	0xffffdfff
 8006600:	ffefffff 	.word	0xffefffff
 8006604:	ff9fffff 	.word	0xff9fffff
 8006608:	fff7ffff 	.word	0xfff7ffff

0800660c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af02      	add	r7, sp, #8
 8006612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2290      	movs	r2, #144	; 0x90
 8006618:	2100      	movs	r1, #0
 800661a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800661c:	f7fb fe9a 	bl	8002354 <HAL_GetTick>
 8006620:	0003      	movs	r3, r0
 8006622:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2208      	movs	r2, #8
 800662c:	4013      	ands	r3, r2
 800662e:	2b08      	cmp	r3, #8
 8006630:	d10c      	bne.n	800664c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2280      	movs	r2, #128	; 0x80
 8006636:	0391      	lsls	r1, r2, #14
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	4a1a      	ldr	r2, [pc, #104]	; (80066a4 <UART_CheckIdleState+0x98>)
 800663c:	9200      	str	r2, [sp, #0]
 800663e:	2200      	movs	r2, #0
 8006640:	f000 f832 	bl	80066a8 <UART_WaitOnFlagUntilTimeout>
 8006644:	1e03      	subs	r3, r0, #0
 8006646:	d001      	beq.n	800664c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e026      	b.n	800669a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2204      	movs	r2, #4
 8006654:	4013      	ands	r3, r2
 8006656:	2b04      	cmp	r3, #4
 8006658:	d10c      	bne.n	8006674 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2280      	movs	r2, #128	; 0x80
 800665e:	03d1      	lsls	r1, r2, #15
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	4a10      	ldr	r2, [pc, #64]	; (80066a4 <UART_CheckIdleState+0x98>)
 8006664:	9200      	str	r2, [sp, #0]
 8006666:	2200      	movs	r2, #0
 8006668:	f000 f81e 	bl	80066a8 <UART_WaitOnFlagUntilTimeout>
 800666c:	1e03      	subs	r3, r0, #0
 800666e:	d001      	beq.n	8006674 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e012      	b.n	800669a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2288      	movs	r2, #136	; 0x88
 8006678:	2120      	movs	r1, #32
 800667a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	228c      	movs	r2, #140	; 0x8c
 8006680:	2120      	movs	r1, #32
 8006682:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2284      	movs	r2, #132	; 0x84
 8006694:	2100      	movs	r1, #0
 8006696:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	0018      	movs	r0, r3
 800669c:	46bd      	mov	sp, r7
 800669e:	b004      	add	sp, #16
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	46c0      	nop			; (mov r8, r8)
 80066a4:	01ffffff 	.word	0x01ffffff

080066a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b094      	sub	sp, #80	; 0x50
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	603b      	str	r3, [r7, #0]
 80066b4:	1dfb      	adds	r3, r7, #7
 80066b6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066b8:	e0a7      	b.n	800680a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066bc:	3301      	adds	r3, #1
 80066be:	d100      	bne.n	80066c2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80066c0:	e0a3      	b.n	800680a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066c2:	f7fb fe47 	bl	8002354 <HAL_GetTick>
 80066c6:	0002      	movs	r2, r0
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d302      	bcc.n	80066d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80066d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d13f      	bne.n	8006758 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066d8:	f3ef 8310 	mrs	r3, PRIMASK
 80066dc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80066de:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80066e0:	647b      	str	r3, [r7, #68]	; 0x44
 80066e2:	2301      	movs	r3, #1
 80066e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e8:	f383 8810 	msr	PRIMASK, r3
}
 80066ec:	46c0      	nop			; (mov r8, r8)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	494e      	ldr	r1, [pc, #312]	; (8006834 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80066fa:	400a      	ands	r2, r1
 80066fc:	601a      	str	r2, [r3, #0]
 80066fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006700:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006704:	f383 8810 	msr	PRIMASK, r3
}
 8006708:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800670a:	f3ef 8310 	mrs	r3, PRIMASK
 800670e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006712:	643b      	str	r3, [r7, #64]	; 0x40
 8006714:	2301      	movs	r3, #1
 8006716:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671a:	f383 8810 	msr	PRIMASK, r3
}
 800671e:	46c0      	nop			; (mov r8, r8)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689a      	ldr	r2, [r3, #8]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2101      	movs	r1, #1
 800672c:	438a      	bics	r2, r1
 800672e:	609a      	str	r2, [r3, #8]
 8006730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006732:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006736:	f383 8810 	msr	PRIMASK, r3
}
 800673a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2288      	movs	r2, #136	; 0x88
 8006740:	2120      	movs	r1, #32
 8006742:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	228c      	movs	r2, #140	; 0x8c
 8006748:	2120      	movs	r1, #32
 800674a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2284      	movs	r2, #132	; 0x84
 8006750:	2100      	movs	r1, #0
 8006752:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e069      	b.n	800682c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2204      	movs	r2, #4
 8006760:	4013      	ands	r3, r2
 8006762:	d052      	beq.n	800680a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	69da      	ldr	r2, [r3, #28]
 800676a:	2380      	movs	r3, #128	; 0x80
 800676c:	011b      	lsls	r3, r3, #4
 800676e:	401a      	ands	r2, r3
 8006770:	2380      	movs	r3, #128	; 0x80
 8006772:	011b      	lsls	r3, r3, #4
 8006774:	429a      	cmp	r2, r3
 8006776:	d148      	bne.n	800680a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2280      	movs	r2, #128	; 0x80
 800677e:	0112      	lsls	r2, r2, #4
 8006780:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006782:	f3ef 8310 	mrs	r3, PRIMASK
 8006786:	613b      	str	r3, [r7, #16]
  return(result);
 8006788:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800678a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800678c:	2301      	movs	r3, #1
 800678e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f383 8810 	msr	PRIMASK, r3
}
 8006796:	46c0      	nop			; (mov r8, r8)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4924      	ldr	r1, [pc, #144]	; (8006834 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80067a4:	400a      	ands	r2, r1
 80067a6:	601a      	str	r2, [r3, #0]
 80067a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	f383 8810 	msr	PRIMASK, r3
}
 80067b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067b4:	f3ef 8310 	mrs	r3, PRIMASK
 80067b8:	61fb      	str	r3, [r7, #28]
  return(result);
 80067ba:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80067be:	2301      	movs	r3, #1
 80067c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067c2:	6a3b      	ldr	r3, [r7, #32]
 80067c4:	f383 8810 	msr	PRIMASK, r3
}
 80067c8:	46c0      	nop			; (mov r8, r8)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	689a      	ldr	r2, [r3, #8]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2101      	movs	r1, #1
 80067d6:	438a      	bics	r2, r1
 80067d8:	609a      	str	r2, [r3, #8]
 80067da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067dc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	f383 8810 	msr	PRIMASK, r3
}
 80067e4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2288      	movs	r2, #136	; 0x88
 80067ea:	2120      	movs	r1, #32
 80067ec:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	228c      	movs	r2, #140	; 0x8c
 80067f2:	2120      	movs	r1, #32
 80067f4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2290      	movs	r2, #144	; 0x90
 80067fa:	2120      	movs	r1, #32
 80067fc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2284      	movs	r2, #132	; 0x84
 8006802:	2100      	movs	r1, #0
 8006804:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e010      	b.n	800682c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	4013      	ands	r3, r2
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	1ad3      	subs	r3, r2, r3
 8006818:	425a      	negs	r2, r3
 800681a:	4153      	adcs	r3, r2
 800681c:	b2db      	uxtb	r3, r3
 800681e:	001a      	movs	r2, r3
 8006820:	1dfb      	adds	r3, r7, #7
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	429a      	cmp	r2, r3
 8006826:	d100      	bne.n	800682a <UART_WaitOnFlagUntilTimeout+0x182>
 8006828:	e747      	b.n	80066ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	0018      	movs	r0, r3
 800682e:	46bd      	mov	sp, r7
 8006830:	b014      	add	sp, #80	; 0x50
 8006832:	bd80      	pop	{r7, pc}
 8006834:	fffffe5f 	.word	0xfffffe5f

08006838 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2284      	movs	r2, #132	; 0x84
 8006844:	5c9b      	ldrb	r3, [r3, r2]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d101      	bne.n	800684e <HAL_UARTEx_DisableFifoMode+0x16>
 800684a:	2302      	movs	r3, #2
 800684c:	e027      	b.n	800689e <HAL_UARTEx_DisableFifoMode+0x66>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2284      	movs	r2, #132	; 0x84
 8006852:	2101      	movs	r1, #1
 8006854:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2288      	movs	r2, #136	; 0x88
 800685a:	2124      	movs	r1, #36	; 0x24
 800685c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2101      	movs	r1, #1
 8006872:	438a      	bics	r2, r1
 8006874:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	4a0b      	ldr	r2, [pc, #44]	; (80068a8 <HAL_UARTEx_DisableFifoMode+0x70>)
 800687a:	4013      	ands	r3, r2
 800687c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2288      	movs	r2, #136	; 0x88
 8006890:	2120      	movs	r1, #32
 8006892:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2284      	movs	r2, #132	; 0x84
 8006898:	2100      	movs	r1, #0
 800689a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	0018      	movs	r0, r3
 80068a0:	46bd      	mov	sp, r7
 80068a2:	b004      	add	sp, #16
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	46c0      	nop			; (mov r8, r8)
 80068a8:	dfffffff 	.word	0xdfffffff

080068ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2284      	movs	r2, #132	; 0x84
 80068ba:	5c9b      	ldrb	r3, [r3, r2]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d101      	bne.n	80068c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80068c0:	2302      	movs	r3, #2
 80068c2:	e02e      	b.n	8006922 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2284      	movs	r2, #132	; 0x84
 80068c8:	2101      	movs	r1, #1
 80068ca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2288      	movs	r2, #136	; 0x88
 80068d0:	2124      	movs	r1, #36	; 0x24
 80068d2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2101      	movs	r1, #1
 80068e8:	438a      	bics	r2, r1
 80068ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	00db      	lsls	r3, r3, #3
 80068f4:	08d9      	lsrs	r1, r3, #3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	430a      	orrs	r2, r1
 80068fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	0018      	movs	r0, r3
 8006904:	f000 f854 	bl	80069b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2288      	movs	r2, #136	; 0x88
 8006914:	2120      	movs	r1, #32
 8006916:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2284      	movs	r2, #132	; 0x84
 800691c:	2100      	movs	r1, #0
 800691e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	0018      	movs	r0, r3
 8006924:	46bd      	mov	sp, r7
 8006926:	b004      	add	sp, #16
 8006928:	bd80      	pop	{r7, pc}
	...

0800692c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2284      	movs	r2, #132	; 0x84
 800693a:	5c9b      	ldrb	r3, [r3, r2]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d101      	bne.n	8006944 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006940:	2302      	movs	r3, #2
 8006942:	e02f      	b.n	80069a4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2284      	movs	r2, #132	; 0x84
 8006948:	2101      	movs	r1, #1
 800694a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2288      	movs	r2, #136	; 0x88
 8006950:	2124      	movs	r1, #36	; 0x24
 8006952:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2101      	movs	r1, #1
 8006968:	438a      	bics	r2, r1
 800696a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	4a0e      	ldr	r2, [pc, #56]	; (80069ac <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006974:	4013      	ands	r3, r2
 8006976:	0019      	movs	r1, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	430a      	orrs	r2, r1
 8006980:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	0018      	movs	r0, r3
 8006986:	f000 f813 	bl	80069b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2288      	movs	r2, #136	; 0x88
 8006996:	2120      	movs	r1, #32
 8006998:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2284      	movs	r2, #132	; 0x84
 800699e:	2100      	movs	r1, #0
 80069a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	0018      	movs	r0, r3
 80069a6:	46bd      	mov	sp, r7
 80069a8:	b004      	add	sp, #16
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	f1ffffff 	.word	0xf1ffffff

080069b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80069b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d108      	bne.n	80069d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	226a      	movs	r2, #106	; 0x6a
 80069c4:	2101      	movs	r1, #1
 80069c6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2268      	movs	r2, #104	; 0x68
 80069cc:	2101      	movs	r1, #1
 80069ce:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80069d0:	e043      	b.n	8006a5a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80069d2:	260f      	movs	r6, #15
 80069d4:	19bb      	adds	r3, r7, r6
 80069d6:	2208      	movs	r2, #8
 80069d8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80069da:	200e      	movs	r0, #14
 80069dc:	183b      	adds	r3, r7, r0
 80069de:	2208      	movs	r2, #8
 80069e0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	0e5b      	lsrs	r3, r3, #25
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	240d      	movs	r4, #13
 80069ee:	193b      	adds	r3, r7, r4
 80069f0:	2107      	movs	r1, #7
 80069f2:	400a      	ands	r2, r1
 80069f4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	0f5b      	lsrs	r3, r3, #29
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	250c      	movs	r5, #12
 8006a02:	197b      	adds	r3, r7, r5
 8006a04:	2107      	movs	r1, #7
 8006a06:	400a      	ands	r2, r1
 8006a08:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a0a:	183b      	adds	r3, r7, r0
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	197a      	adds	r2, r7, r5
 8006a10:	7812      	ldrb	r2, [r2, #0]
 8006a12:	4914      	ldr	r1, [pc, #80]	; (8006a64 <UARTEx_SetNbDataToProcess+0xb4>)
 8006a14:	5c8a      	ldrb	r2, [r1, r2]
 8006a16:	435a      	muls	r2, r3
 8006a18:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006a1a:	197b      	adds	r3, r7, r5
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	4a12      	ldr	r2, [pc, #72]	; (8006a68 <UARTEx_SetNbDataToProcess+0xb8>)
 8006a20:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a22:	0019      	movs	r1, r3
 8006a24:	f7f9 fbf6 	bl	8000214 <__divsi3>
 8006a28:	0003      	movs	r3, r0
 8006a2a:	b299      	uxth	r1, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	226a      	movs	r2, #106	; 0x6a
 8006a30:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a32:	19bb      	adds	r3, r7, r6
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	193a      	adds	r2, r7, r4
 8006a38:	7812      	ldrb	r2, [r2, #0]
 8006a3a:	490a      	ldr	r1, [pc, #40]	; (8006a64 <UARTEx_SetNbDataToProcess+0xb4>)
 8006a3c:	5c8a      	ldrb	r2, [r1, r2]
 8006a3e:	435a      	muls	r2, r3
 8006a40:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006a42:	193b      	adds	r3, r7, r4
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	4a08      	ldr	r2, [pc, #32]	; (8006a68 <UARTEx_SetNbDataToProcess+0xb8>)
 8006a48:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a4a:	0019      	movs	r1, r3
 8006a4c:	f7f9 fbe2 	bl	8000214 <__divsi3>
 8006a50:	0003      	movs	r3, r0
 8006a52:	b299      	uxth	r1, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2268      	movs	r2, #104	; 0x68
 8006a58:	5299      	strh	r1, [r3, r2]
}
 8006a5a:	46c0      	nop			; (mov r8, r8)
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	b005      	add	sp, #20
 8006a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a62:	46c0      	nop			; (mov r8, r8)
 8006a64:	08006bbc 	.word	0x08006bbc
 8006a68:	08006bc4 	.word	0x08006bc4

08006a6c <memset>:
 8006a6c:	0003      	movs	r3, r0
 8006a6e:	1882      	adds	r2, r0, r2
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d100      	bne.n	8006a76 <memset+0xa>
 8006a74:	4770      	bx	lr
 8006a76:	7019      	strb	r1, [r3, #0]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	e7f9      	b.n	8006a70 <memset+0x4>

08006a7c <__libc_init_array>:
 8006a7c:	b570      	push	{r4, r5, r6, lr}
 8006a7e:	2600      	movs	r6, #0
 8006a80:	4c0c      	ldr	r4, [pc, #48]	; (8006ab4 <__libc_init_array+0x38>)
 8006a82:	4d0d      	ldr	r5, [pc, #52]	; (8006ab8 <__libc_init_array+0x3c>)
 8006a84:	1b64      	subs	r4, r4, r5
 8006a86:	10a4      	asrs	r4, r4, #2
 8006a88:	42a6      	cmp	r6, r4
 8006a8a:	d109      	bne.n	8006aa0 <__libc_init_array+0x24>
 8006a8c:	2600      	movs	r6, #0
 8006a8e:	f000 f823 	bl	8006ad8 <_init>
 8006a92:	4c0a      	ldr	r4, [pc, #40]	; (8006abc <__libc_init_array+0x40>)
 8006a94:	4d0a      	ldr	r5, [pc, #40]	; (8006ac0 <__libc_init_array+0x44>)
 8006a96:	1b64      	subs	r4, r4, r5
 8006a98:	10a4      	asrs	r4, r4, #2
 8006a9a:	42a6      	cmp	r6, r4
 8006a9c:	d105      	bne.n	8006aaa <__libc_init_array+0x2e>
 8006a9e:	bd70      	pop	{r4, r5, r6, pc}
 8006aa0:	00b3      	lsls	r3, r6, #2
 8006aa2:	58eb      	ldr	r3, [r5, r3]
 8006aa4:	4798      	blx	r3
 8006aa6:	3601      	adds	r6, #1
 8006aa8:	e7ee      	b.n	8006a88 <__libc_init_array+0xc>
 8006aaa:	00b3      	lsls	r3, r6, #2
 8006aac:	58eb      	ldr	r3, [r5, r3]
 8006aae:	4798      	blx	r3
 8006ab0:	3601      	adds	r6, #1
 8006ab2:	e7f2      	b.n	8006a9a <__libc_init_array+0x1e>
 8006ab4:	08006bcc 	.word	0x08006bcc
 8006ab8:	08006bcc 	.word	0x08006bcc
 8006abc:	08006bd0 	.word	0x08006bd0
 8006ac0:	08006bcc 	.word	0x08006bcc

08006ac4 <memcpy>:
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	b510      	push	{r4, lr}
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d100      	bne.n	8006ace <memcpy+0xa>
 8006acc:	bd10      	pop	{r4, pc}
 8006ace:	5ccc      	ldrb	r4, [r1, r3]
 8006ad0:	54c4      	strb	r4, [r0, r3]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	e7f8      	b.n	8006ac8 <memcpy+0x4>
	...

08006ad8 <_init>:
 8006ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ada:	46c0      	nop			; (mov r8, r8)
 8006adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ade:	bc08      	pop	{r3}
 8006ae0:	469e      	mov	lr, r3
 8006ae2:	4770      	bx	lr

08006ae4 <_fini>:
 8006ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ae6:	46c0      	nop			; (mov r8, r8)
 8006ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aea:	bc08      	pop	{r3}
 8006aec:	469e      	mov	lr, r3
 8006aee:	4770      	bx	lr
