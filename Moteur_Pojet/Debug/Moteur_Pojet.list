
Moteur_Pojet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059a8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005a60  08005a60  00015a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b3c  08005b3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005b3c  08005b3c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b3c  08005b3c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b3c  08005b3c  00015b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b40  08005b40  00015b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005b44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  2000000c  08005b50  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  08005b50  00020498  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016c1a  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036ef  00000000  00000000  00036c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d8  00000000  00000000  0003a380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f75  00000000  00000000  0003b758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019085  00000000  00000000  0003c6cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a682  00000000  00000000  00055752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009abce  00000000  00000000  0006fdd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004694  00000000  00000000  0010a9a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0010f038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005a48 	.word	0x08005a48

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08005a48 	.word	0x08005a48

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <HAL_GPIO_EXTI_Rising_Callback>:

struct CAPT_BTN_MAP_struct CAPT_BTN_MAP;


void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	0002      	movs	r2, r0
 80003f4:	1dbb      	adds	r3, r7, #6
 80003f6:	801a      	strh	r2, [r3, #0]
	switch (GPIO_Pin)
 80003f8:	1dbb      	adds	r3, r7, #6
 80003fa:	881b      	ldrh	r3, [r3, #0]
 80003fc:	2280      	movs	r2, #128	; 0x80
 80003fe:	0212      	lsls	r2, r2, #8
 8000400:	4293      	cmp	r3, r2
 8000402:	d050      	beq.n	80004a6 <HAL_GPIO_EXTI_Rising_Callback+0xba>
 8000404:	2280      	movs	r2, #128	; 0x80
 8000406:	0212      	lsls	r2, r2, #8
 8000408:	4293      	cmp	r3, r2
 800040a:	dd00      	ble.n	800040e <HAL_GPIO_EXTI_Rising_Callback+0x22>
 800040c:	e081      	b.n	8000512 <HAL_GPIO_EXTI_Rising_Callback+0x126>
 800040e:	2280      	movs	r2, #128	; 0x80
 8000410:	01d2      	lsls	r2, r2, #7
 8000412:	4293      	cmp	r3, r2
 8000414:	d041      	beq.n	800049a <HAL_GPIO_EXTI_Rising_Callback+0xae>
 8000416:	2280      	movs	r2, #128	; 0x80
 8000418:	01d2      	lsls	r2, r2, #7
 800041a:	4293      	cmp	r3, r2
 800041c:	dd00      	ble.n	8000420 <HAL_GPIO_EXTI_Rising_Callback+0x34>
 800041e:	e078      	b.n	8000512 <HAL_GPIO_EXTI_Rising_Callback+0x126>
 8000420:	2280      	movs	r2, #128	; 0x80
 8000422:	0192      	lsls	r2, r2, #6
 8000424:	4293      	cmp	r3, r2
 8000426:	d032      	beq.n	800048e <HAL_GPIO_EXTI_Rising_Callback+0xa2>
 8000428:	2280      	movs	r2, #128	; 0x80
 800042a:	0192      	lsls	r2, r2, #6
 800042c:	4293      	cmp	r3, r2
 800042e:	dd00      	ble.n	8000432 <HAL_GPIO_EXTI_Rising_Callback+0x46>
 8000430:	e06f      	b.n	8000512 <HAL_GPIO_EXTI_Rising_Callback+0x126>
 8000432:	2280      	movs	r2, #128	; 0x80
 8000434:	0092      	lsls	r2, r2, #2
 8000436:	4293      	cmp	r3, r2
 8000438:	d05b      	beq.n	80004f2 <HAL_GPIO_EXTI_Rising_Callback+0x106>
 800043a:	2280      	movs	r2, #128	; 0x80
 800043c:	0092      	lsls	r2, r2, #2
 800043e:	4293      	cmp	r3, r2
 8000440:	dd00      	ble.n	8000444 <HAL_GPIO_EXTI_Rising_Callback+0x58>
 8000442:	e066      	b.n	8000512 <HAL_GPIO_EXTI_Rising_Callback+0x126>
 8000444:	2280      	movs	r2, #128	; 0x80
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	4293      	cmp	r3, r2
 800044a:	d042      	beq.n	80004d2 <HAL_GPIO_EXTI_Rising_Callback+0xe6>
 800044c:	2280      	movs	r2, #128	; 0x80
 800044e:	0052      	lsls	r2, r2, #1
 8000450:	4293      	cmp	r3, r2
 8000452:	dc5e      	bgt.n	8000512 <HAL_GPIO_EXTI_Rising_Callback+0x126>
 8000454:	2b20      	cmp	r3, #32
 8000456:	d031      	beq.n	80004bc <HAL_GPIO_EXTI_Rising_Callback+0xd0>
 8000458:	dc5b      	bgt.n	8000512 <HAL_GPIO_EXTI_Rising_Callback+0x126>
 800045a:	2b10      	cmp	r3, #16
 800045c:	d011      	beq.n	8000482 <HAL_GPIO_EXTI_Rising_Callback+0x96>
 800045e:	dc58      	bgt.n	8000512 <HAL_GPIO_EXTI_Rising_Callback+0x126>
 8000460:	2b01      	cmp	r3, #1
 8000462:	d002      	beq.n	800046a <HAL_GPIO_EXTI_Rising_Callback+0x7e>
 8000464:	2b08      	cmp	r3, #8
 8000466:	d006      	beq.n	8000476 <HAL_GPIO_EXTI_Rising_Callback+0x8a>
			}
		}

		else CAPT_BTN_MAP = CAPT_BTN_MAP_RESET;
	 */
}
 8000468:	e053      	b.n	8000512 <HAL_GPIO_EXTI_Rising_Callback+0x126>
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800046a:	4b2c      	ldr	r3, [pc, #176]	; (800051c <HAL_GPIO_EXTI_Rising_Callback+0x130>)
 800046c:	2110      	movs	r1, #16
 800046e:	0018      	movs	r0, r3
 8000470:	f002 fd61 	bl	8002f36 <HAL_GPIO_TogglePin>
		break;
 8000474:	e04d      	b.n	8000512 <HAL_GPIO_EXTI_Rising_Callback+0x126>
		HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8000476:	4b29      	ldr	r3, [pc, #164]	; (800051c <HAL_GPIO_EXTI_Rising_Callback+0x130>)
 8000478:	2102      	movs	r1, #2
 800047a:	0018      	movs	r0, r3
 800047c:	f002 fd5b 	bl	8002f36 <HAL_GPIO_TogglePin>
		break;
 8000480:	e047      	b.n	8000512 <HAL_GPIO_EXTI_Rising_Callback+0x126>
		HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000482:	4b26      	ldr	r3, [pc, #152]	; (800051c <HAL_GPIO_EXTI_Rising_Callback+0x130>)
 8000484:	2108      	movs	r1, #8
 8000486:	0018      	movs	r0, r3
 8000488:	f002 fd55 	bl	8002f36 <HAL_GPIO_TogglePin>
		break;
 800048c:	e041      	b.n	8000512 <HAL_GPIO_EXTI_Rising_Callback+0x126>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800048e:	4b23      	ldr	r3, [pc, #140]	; (800051c <HAL_GPIO_EXTI_Rising_Callback+0x130>)
 8000490:	2101      	movs	r1, #1
 8000492:	0018      	movs	r0, r3
 8000494:	f002 fd4f 	bl	8002f36 <HAL_GPIO_TogglePin>
		break;
 8000498:	e03b      	b.n	8000512 <HAL_GPIO_EXTI_Rising_Callback+0x126>
		HAL_GPIO_TogglePin(LED_WHITE_GPIO_Port, LED_WHITE_Pin);
 800049a:	4b20      	ldr	r3, [pc, #128]	; (800051c <HAL_GPIO_EXTI_Rising_Callback+0x130>)
 800049c:	2104      	movs	r1, #4
 800049e:	0018      	movs	r0, r3
 80004a0:	f002 fd49 	bl	8002f36 <HAL_GPIO_TogglePin>
		break;
 80004a4:	e035      	b.n	8000512 <HAL_GPIO_EXTI_Rising_Callback+0x126>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80004a6:	4b1d      	ldr	r3, [pc, #116]	; (800051c <HAL_GPIO_EXTI_Rising_Callback+0x130>)
 80004a8:	2101      	movs	r1, #1
 80004aa:	0018      	movs	r0, r3
 80004ac:	f002 fd43 	bl	8002f36 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_WHITE_GPIO_Port, LED_WHITE_Pin);
 80004b0:	4b1a      	ldr	r3, [pc, #104]	; (800051c <HAL_GPIO_EXTI_Rising_Callback+0x130>)
 80004b2:	2104      	movs	r1, #4
 80004b4:	0018      	movs	r0, r3
 80004b6:	f002 fd3e 	bl	8002f36 <HAL_GPIO_TogglePin>
		break;
 80004ba:	e02a      	b.n	8000512 <HAL_GPIO_EXTI_Rising_Callback+0x126>
		HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80004bc:	4b17      	ldr	r3, [pc, #92]	; (800051c <HAL_GPIO_EXTI_Rising_Callback+0x130>)
 80004be:	2108      	movs	r1, #8
 80004c0:	0018      	movs	r0, r3
 80004c2:	f002 fd38 	bl	8002f36 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 80004c6:	4b15      	ldr	r3, [pc, #84]	; (800051c <HAL_GPIO_EXTI_Rising_Callback+0x130>)
 80004c8:	2102      	movs	r1, #2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f002 fd33 	bl	8002f36 <HAL_GPIO_TogglePin>
		break;
 80004d0:	e01f      	b.n	8000512 <HAL_GPIO_EXTI_Rising_Callback+0x126>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80004d2:	4b12      	ldr	r3, [pc, #72]	; (800051c <HAL_GPIO_EXTI_Rising_Callback+0x130>)
 80004d4:	2101      	movs	r1, #1
 80004d6:	0018      	movs	r0, r3
 80004d8:	f002 fd2d 	bl	8002f36 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_WHITE_GPIO_Port, LED_WHITE_Pin);
 80004dc:	4b0f      	ldr	r3, [pc, #60]	; (800051c <HAL_GPIO_EXTI_Rising_Callback+0x130>)
 80004de:	2104      	movs	r1, #4
 80004e0:	0018      	movs	r0, r3
 80004e2:	f002 fd28 	bl	8002f36 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80004e6:	4b0d      	ldr	r3, [pc, #52]	; (800051c <HAL_GPIO_EXTI_Rising_Callback+0x130>)
 80004e8:	2108      	movs	r1, #8
 80004ea:	0018      	movs	r0, r3
 80004ec:	f002 fd23 	bl	8002f36 <HAL_GPIO_TogglePin>
		break;
 80004f0:	e00f      	b.n	8000512 <HAL_GPIO_EXTI_Rising_Callback+0x126>
		HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 80004f2:	4b0a      	ldr	r3, [pc, #40]	; (800051c <HAL_GPIO_EXTI_Rising_Callback+0x130>)
 80004f4:	2102      	movs	r1, #2
 80004f6:	0018      	movs	r0, r3
 80004f8:	f002 fd1d 	bl	8002f36 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_GREEN_Pin);
 80004fc:	4b07      	ldr	r3, [pc, #28]	; (800051c <HAL_GPIO_EXTI_Rising_Callback+0x130>)
 80004fe:	2110      	movs	r1, #16
 8000500:	0018      	movs	r0, r3
 8000502:	f002 fd18 	bl	8002f36 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000506:	4b05      	ldr	r3, [pc, #20]	; (800051c <HAL_GPIO_EXTI_Rising_Callback+0x130>)
 8000508:	2108      	movs	r1, #8
 800050a:	0018      	movs	r0, r3
 800050c:	f002 fd13 	bl	8002f36 <HAL_GPIO_TogglePin>
		break;
 8000510:	46c0      	nop			; (mov r8, r8)
}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	46bd      	mov	sp, r7
 8000516:	b002      	add	sp, #8
 8000518:	bd80      	pop	{r7, pc}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	50000c00 	.word	0x50000c00

08000520 <codeur_start>:

#include "encoder.h"
uint32_t counter_1,counter_2 = 0;
int16_t pos_1,pos_2 = 0;

void codeur_start(void){
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_ALL);
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <codeur_start+0x20>)
 8000526:	213c      	movs	r1, #60	; 0x3c
 8000528:	0018      	movs	r0, r3
 800052a:	f003 fde9 	bl	8004100 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim1,TIM_CHANNEL_ALL);
 800052e:	4b05      	ldr	r3, [pc, #20]	; (8000544 <codeur_start+0x24>)
 8000530:	213c      	movs	r1, #60	; 0x3c
 8000532:	0018      	movs	r0, r3
 8000534:	f003 fde4 	bl	8004100 <HAL_TIM_Encoder_Start_IT>
}
 8000538:	46c0      	nop			; (mov r8, r8)
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	200001a4 	.word	0x200001a4
 8000544:	20000158 	.word	0x20000158

08000548 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	if (htim == &htim1){
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	4b10      	ldr	r3, [pc, #64]	; (8000594 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000554:	429a      	cmp	r2, r3
 8000556:	d10a      	bne.n	800056e <HAL_TIM_IC_CaptureCallback+0x26>
		counter_1 = __HAL_TIM_GET_COUNTER(htim);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000560:	601a      	str	r2, [r3, #0]
		pos_1 = counter_1/4;
 8000562:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	089b      	lsrs	r3, r3, #2
 8000568:	b21a      	sxth	r2, r3
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <HAL_TIM_IC_CaptureCallback+0x54>)
 800056c:	801a      	strh	r2, [r3, #0]

	}

	if (htim == &htim3){
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000572:	429a      	cmp	r2, r3
 8000574:	d10a      	bne.n	800058c <HAL_TIM_IC_CaptureCallback+0x44>
			counter_2 = __HAL_TIM_GET_COUNTER(htim);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800057e:	601a      	str	r2, [r3, #0]
			pos_2 = counter_2/4;
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	089b      	lsrs	r3, r3, #2
 8000586:	b21a      	sxth	r2, r3
 8000588:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <HAL_TIM_IC_CaptureCallback+0x60>)
 800058a:	801a      	strh	r2, [r3, #0]

		}


}
 800058c:	46c0      	nop			; (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	b002      	add	sp, #8
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000158 	.word	0x20000158
 8000598:	20000028 	.word	0x20000028
 800059c:	20000030 	.word	0x20000030
 80005a0:	200001a4 	.word	0x200001a4
 80005a4:	2000002c 	.word	0x2000002c
 80005a8:	20000032 	.word	0x20000032

080005ac <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	0018      	movs	r0, r3
 80005b6:	230c      	movs	r3, #12
 80005b8:	001a      	movs	r2, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	f005 fa18 	bl	80059f0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005c0:	4b34      	ldr	r3, [pc, #208]	; (8000694 <MX_ADC1_Init+0xe8>)
 80005c2:	4a35      	ldr	r2, [pc, #212]	; (8000698 <MX_ADC1_Init+0xec>)
 80005c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005c6:	4b33      	ldr	r3, [pc, #204]	; (8000694 <MX_ADC1_Init+0xe8>)
 80005c8:	2280      	movs	r2, #128	; 0x80
 80005ca:	05d2      	lsls	r2, r2, #23
 80005cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ce:	4b31      	ldr	r3, [pc, #196]	; (8000694 <MX_ADC1_Init+0xe8>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005d4:	4b2f      	ldr	r3, [pc, #188]	; (8000694 <MX_ADC1_Init+0xe8>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005da:	4b2e      	ldr	r3, [pc, #184]	; (8000694 <MX_ADC1_Init+0xe8>)
 80005dc:	2280      	movs	r2, #128	; 0x80
 80005de:	0392      	lsls	r2, r2, #14
 80005e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005e2:	4b2c      	ldr	r3, [pc, #176]	; (8000694 <MX_ADC1_Init+0xe8>)
 80005e4:	2204      	movs	r2, #4
 80005e6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005e8:	4b2a      	ldr	r3, [pc, #168]	; (8000694 <MX_ADC1_Init+0xe8>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80005ee:	4b29      	ldr	r3, [pc, #164]	; (8000694 <MX_ADC1_Init+0xe8>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005f4:	4b27      	ldr	r3, [pc, #156]	; (8000694 <MX_ADC1_Init+0xe8>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 80005fa:	4b26      	ldr	r3, [pc, #152]	; (8000694 <MX_ADC1_Init+0xe8>)
 80005fc:	2202      	movs	r2, #2
 80005fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000600:	4b24      	ldr	r3, [pc, #144]	; (8000694 <MX_ADC1_Init+0xe8>)
 8000602:	2200      	movs	r2, #0
 8000604:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000606:	4b23      	ldr	r3, [pc, #140]	; (8000694 <MX_ADC1_Init+0xe8>)
 8000608:	2200      	movs	r2, #0
 800060a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800060c:	4b21      	ldr	r3, [pc, #132]	; (8000694 <MX_ADC1_Init+0xe8>)
 800060e:	222c      	movs	r2, #44	; 0x2c
 8000610:	2100      	movs	r1, #0
 8000612:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <MX_ADC1_Init+0xe8>)
 8000616:	2200      	movs	r2, #0
 8000618:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 800061a:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <MX_ADC1_Init+0xe8>)
 800061c:	2206      	movs	r2, #6
 800061e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8000620:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <MX_ADC1_Init+0xe8>)
 8000622:	2206      	movs	r2, #6
 8000624:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000626:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <MX_ADC1_Init+0xe8>)
 8000628:	223c      	movs	r2, #60	; 0x3c
 800062a:	2100      	movs	r1, #0
 800062c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800062e:	4b19      	ldr	r3, [pc, #100]	; (8000694 <MX_ADC1_Init+0xe8>)
 8000630:	2200      	movs	r2, #0
 8000632:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000634:	4b17      	ldr	r3, [pc, #92]	; (8000694 <MX_ADC1_Init+0xe8>)
 8000636:	0018      	movs	r0, r3
 8000638:	f001 fb5e 	bl	8001cf8 <HAL_ADC_Init>
 800063c:	1e03      	subs	r3, r0, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000640:	f000 fa48 	bl	8000ad4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2201      	movs	r2, #1
 8000648:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2200      	movs	r2, #0
 800064e:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000656:	1d3a      	adds	r2, r7, #4
 8000658:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_ADC1_Init+0xe8>)
 800065a:	0011      	movs	r1, r2
 800065c:	0018      	movs	r0, r3
 800065e:	f001 fcf3 	bl	8002048 <HAL_ADC_ConfigChannel>
 8000662:	1e03      	subs	r3, r0, #0
 8000664:	d001      	beq.n	800066a <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8000666:	f000 fa35 	bl	8000ad4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	4a0b      	ldr	r2, [pc, #44]	; (800069c <MX_ADC1_Init+0xf0>)
 800066e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2204      	movs	r2, #4
 8000674:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000676:	1d3a      	adds	r2, r7, #4
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_ADC1_Init+0xe8>)
 800067a:	0011      	movs	r1, r2
 800067c:	0018      	movs	r0, r3
 800067e:	f001 fce3 	bl	8002048 <HAL_ADC_ConfigChannel>
 8000682:	1e03      	subs	r3, r0, #0
 8000684:	d001      	beq.n	800068a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000686:	f000 fa25 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	46bd      	mov	sp, r7
 800068e:	b004      	add	sp, #16
 8000690:	bd80      	pop	{r7, pc}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	20000034 	.word	0x20000034
 8000698:	40012400 	.word	0x40012400
 800069c:	04000002 	.word	0x04000002

080006a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b08b      	sub	sp, #44	; 0x2c
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a8:	2414      	movs	r4, #20
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	0018      	movs	r0, r3
 80006ae:	2314      	movs	r3, #20
 80006b0:	001a      	movs	r2, r3
 80006b2:	2100      	movs	r1, #0
 80006b4:	f005 f99c 	bl	80059f0 <memset>
  if(adcHandle->Instance==ADC1)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a2d      	ldr	r2, [pc, #180]	; (8000774 <HAL_ADC_MspInit+0xd4>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d154      	bne.n	800076c <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006c2:	4b2d      	ldr	r3, [pc, #180]	; (8000778 <HAL_ADC_MspInit+0xd8>)
 80006c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006c6:	4b2c      	ldr	r3, [pc, #176]	; (8000778 <HAL_ADC_MspInit+0xd8>)
 80006c8:	2180      	movs	r1, #128	; 0x80
 80006ca:	0349      	lsls	r1, r1, #13
 80006cc:	430a      	orrs	r2, r1
 80006ce:	641a      	str	r2, [r3, #64]	; 0x40
 80006d0:	4b29      	ldr	r3, [pc, #164]	; (8000778 <HAL_ADC_MspInit+0xd8>)
 80006d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006d4:	2380      	movs	r3, #128	; 0x80
 80006d6:	035b      	lsls	r3, r3, #13
 80006d8:	4013      	ands	r3, r2
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	4b26      	ldr	r3, [pc, #152]	; (8000778 <HAL_ADC_MspInit+0xd8>)
 80006e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006e2:	4b25      	ldr	r3, [pc, #148]	; (8000778 <HAL_ADC_MspInit+0xd8>)
 80006e4:	2101      	movs	r1, #1
 80006e6:	430a      	orrs	r2, r1
 80006e8:	635a      	str	r2, [r3, #52]	; 0x34
 80006ea:	4b23      	ldr	r3, [pc, #140]	; (8000778 <HAL_ADC_MspInit+0xd8>)
 80006ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ee:	2201      	movs	r2, #1
 80006f0:	4013      	ands	r3, r2
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_Shunt1_Pin|ADC_Shunt2_Pin;
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	2203      	movs	r2, #3
 80006fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	2203      	movs	r2, #3
 8000700:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	193b      	adds	r3, r7, r4
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000708:	193a      	adds	r2, r7, r4
 800070a:	23a0      	movs	r3, #160	; 0xa0
 800070c:	05db      	lsls	r3, r3, #23
 800070e:	0011      	movs	r1, r2
 8000710:	0018      	movs	r0, r3
 8000712:	f002 fa8f 	bl	8002c34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <HAL_ADC_MspInit+0xdc>)
 8000718:	4a19      	ldr	r2, [pc, #100]	; (8000780 <HAL_ADC_MspInit+0xe0>)
 800071a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800071c:	4b17      	ldr	r3, [pc, #92]	; (800077c <HAL_ADC_MspInit+0xdc>)
 800071e:	2205      	movs	r2, #5
 8000720:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000722:	4b16      	ldr	r3, [pc, #88]	; (800077c <HAL_ADC_MspInit+0xdc>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <HAL_ADC_MspInit+0xdc>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <HAL_ADC_MspInit+0xdc>)
 8000730:	2280      	movs	r2, #128	; 0x80
 8000732:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <HAL_ADC_MspInit+0xdc>)
 8000736:	2280      	movs	r2, #128	; 0x80
 8000738:	0052      	lsls	r2, r2, #1
 800073a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <HAL_ADC_MspInit+0xdc>)
 800073e:	2280      	movs	r2, #128	; 0x80
 8000740:	00d2      	lsls	r2, r2, #3
 8000742:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000744:	4b0d      	ldr	r3, [pc, #52]	; (800077c <HAL_ADC_MspInit+0xdc>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <HAL_ADC_MspInit+0xdc>)
 800074c:	2200      	movs	r2, #0
 800074e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <HAL_ADC_MspInit+0xdc>)
 8000752:	0018      	movs	r0, r3
 8000754:	f002 f8e2 	bl	800291c <HAL_DMA_Init>
 8000758:	1e03      	subs	r3, r0, #0
 800075a:	d001      	beq.n	8000760 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 800075c:	f000 f9ba 	bl	8000ad4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a06      	ldr	r2, [pc, #24]	; (800077c <HAL_ADC_MspInit+0xdc>)
 8000764:	651a      	str	r2, [r3, #80]	; 0x50
 8000766:	4b05      	ldr	r3, [pc, #20]	; (800077c <HAL_ADC_MspInit+0xdc>)
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	b00b      	add	sp, #44	; 0x2c
 8000772:	bd90      	pop	{r4, r7, pc}
 8000774:	40012400 	.word	0x40012400
 8000778:	40021000 	.word	0x40021000
 800077c:	20000098 	.word	0x20000098
 8000780:	40020008 	.word	0x40020008

08000784 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_DMA_Init+0x38>)
 800078c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_DMA_Init+0x38>)
 8000790:	2101      	movs	r1, #1
 8000792:	430a      	orrs	r2, r1
 8000794:	639a      	str	r2, [r3, #56]	; 0x38
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_DMA_Init+0x38>)
 8000798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800079a:	2201      	movs	r2, #1
 800079c:	4013      	ands	r3, r2
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2100      	movs	r1, #0
 80007a6:	2009      	movs	r0, #9
 80007a8:	f002 f886 	bl	80028b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007ac:	2009      	movs	r0, #9
 80007ae:	f002 f898 	bl	80028e2 <HAL_NVIC_EnableIRQ>

}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	b002      	add	sp, #8
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	40021000 	.word	0x40021000

080007c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b08b      	sub	sp, #44	; 0x2c
 80007c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	2414      	movs	r4, #20
 80007c8:	193b      	adds	r3, r7, r4
 80007ca:	0018      	movs	r0, r3
 80007cc:	2314      	movs	r3, #20
 80007ce:	001a      	movs	r2, r3
 80007d0:	2100      	movs	r1, #0
 80007d2:	f005 f90d 	bl	80059f0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	4b75      	ldr	r3, [pc, #468]	; (80009ac <MX_GPIO_Init+0x1ec>)
 80007d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007da:	4b74      	ldr	r3, [pc, #464]	; (80009ac <MX_GPIO_Init+0x1ec>)
 80007dc:	2104      	movs	r1, #4
 80007de:	430a      	orrs	r2, r1
 80007e0:	635a      	str	r2, [r3, #52]	; 0x34
 80007e2:	4b72      	ldr	r3, [pc, #456]	; (80009ac <MX_GPIO_Init+0x1ec>)
 80007e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007e6:	2204      	movs	r2, #4
 80007e8:	4013      	ands	r3, r2
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ee:	4b6f      	ldr	r3, [pc, #444]	; (80009ac <MX_GPIO_Init+0x1ec>)
 80007f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007f2:	4b6e      	ldr	r3, [pc, #440]	; (80009ac <MX_GPIO_Init+0x1ec>)
 80007f4:	2120      	movs	r1, #32
 80007f6:	430a      	orrs	r2, r1
 80007f8:	635a      	str	r2, [r3, #52]	; 0x34
 80007fa:	4b6c      	ldr	r3, [pc, #432]	; (80009ac <MX_GPIO_Init+0x1ec>)
 80007fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007fe:	2220      	movs	r2, #32
 8000800:	4013      	ands	r3, r2
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	4b69      	ldr	r3, [pc, #420]	; (80009ac <MX_GPIO_Init+0x1ec>)
 8000808:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800080a:	4b68      	ldr	r3, [pc, #416]	; (80009ac <MX_GPIO_Init+0x1ec>)
 800080c:	2101      	movs	r1, #1
 800080e:	430a      	orrs	r2, r1
 8000810:	635a      	str	r2, [r3, #52]	; 0x34
 8000812:	4b66      	ldr	r3, [pc, #408]	; (80009ac <MX_GPIO_Init+0x1ec>)
 8000814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000816:	2201      	movs	r2, #1
 8000818:	4013      	ands	r3, r2
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	4b63      	ldr	r3, [pc, #396]	; (80009ac <MX_GPIO_Init+0x1ec>)
 8000820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000822:	4b62      	ldr	r3, [pc, #392]	; (80009ac <MX_GPIO_Init+0x1ec>)
 8000824:	2102      	movs	r1, #2
 8000826:	430a      	orrs	r2, r1
 8000828:	635a      	str	r2, [r3, #52]	; 0x34
 800082a:	4b60      	ldr	r3, [pc, #384]	; (80009ac <MX_GPIO_Init+0x1ec>)
 800082c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800082e:	2202      	movs	r2, #2
 8000830:	4013      	ands	r3, r2
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000836:	4b5d      	ldr	r3, [pc, #372]	; (80009ac <MX_GPIO_Init+0x1ec>)
 8000838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800083a:	4b5c      	ldr	r3, [pc, #368]	; (80009ac <MX_GPIO_Init+0x1ec>)
 800083c:	2108      	movs	r1, #8
 800083e:	430a      	orrs	r2, r1
 8000840:	635a      	str	r2, [r3, #52]	; 0x34
 8000842:	4b5a      	ldr	r3, [pc, #360]	; (80009ac <MX_GPIO_Init+0x1ec>)
 8000844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000846:	2208      	movs	r2, #8
 8000848:	4013      	ands	r3, r2
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800084e:	2380      	movs	r3, #128	; 0x80
 8000850:	00d9      	lsls	r1, r3, #3
 8000852:	23a0      	movs	r3, #160	; 0xa0
 8000854:	05db      	lsls	r3, r3, #23
 8000856:	2200      	movs	r2, #0
 8000858:	0018      	movs	r0, r3
 800085a:	f002 fb4f 	bl	8002efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_RED_Pin|LED_YELLOW_Pin|LED_WHITE_Pin|LED_BLUE_Pin
 800085e:	4b54      	ldr	r3, [pc, #336]	; (80009b0 <MX_GPIO_Init+0x1f0>)
 8000860:	2200      	movs	r2, #0
 8000862:	213f      	movs	r1, #63	; 0x3f
 8000864:	0018      	movs	r0, r3
 8000866:	f002 fb49 	bl	8002efc <HAL_GPIO_WritePin>
                          |LED_GREEN_Pin|Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DEV_EN_Pin|M_EN_Pin, GPIO_PIN_RESET);
 800086a:	4b52      	ldr	r3, [pc, #328]	; (80009b4 <MX_GPIO_Init+0x1f4>)
 800086c:	2200      	movs	r2, #0
 800086e:	2118      	movs	r1, #24
 8000870:	0018      	movs	r0, r3
 8000872:	f002 fb43 	bl	8002efc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Bouton1_Pin|Bouton2_Pin;
 8000876:	193b      	adds	r3, r7, r4
 8000878:	2209      	movs	r2, #9
 800087a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800087c:	193b      	adds	r3, r7, r4
 800087e:	2288      	movs	r2, #136	; 0x88
 8000880:	0352      	lsls	r2, r2, #13
 8000882:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000884:	193b      	adds	r3, r7, r4
 8000886:	2201      	movs	r2, #1
 8000888:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088a:	193b      	adds	r3, r7, r4
 800088c:	4a4a      	ldr	r2, [pc, #296]	; (80009b8 <MX_GPIO_Init+0x1f8>)
 800088e:	0019      	movs	r1, r3
 8000890:	0010      	movs	r0, r2
 8000892:	f002 f9cf 	bl	8002c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Bouton3_Pin;
 8000896:	193b      	adds	r3, r7, r4
 8000898:	2210      	movs	r2, #16
 800089a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800089c:	193b      	adds	r3, r7, r4
 800089e:	2288      	movs	r2, #136	; 0x88
 80008a0:	0352      	lsls	r2, r2, #13
 80008a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	2201      	movs	r2, #1
 80008a8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Bouton3_GPIO_Port, &GPIO_InitStruct);
 80008aa:	193a      	adds	r2, r7, r4
 80008ac:	23a0      	movs	r3, #160	; 0xa0
 80008ae:	05db      	lsls	r3, r3, #23
 80008b0:	0011      	movs	r1, r2
 80008b2:	0018      	movs	r0, r3
 80008b4:	f002 f9be 	bl	8002c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Contact1_Pin|Contact2_Pin|Contact3_Pin|Contact4_Pin;
 80008b8:	0021      	movs	r1, r4
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	4a3f      	ldr	r2, [pc, #252]	; (80009bc <MX_GPIO_Init+0x1fc>)
 80008be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2288      	movs	r2, #136	; 0x88
 80008c4:	0352      	lsls	r2, r2, #13
 80008c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2202      	movs	r2, #2
 80008cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ce:	000c      	movs	r4, r1
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	4a38      	ldr	r2, [pc, #224]	; (80009b4 <MX_GPIO_Init+0x1f4>)
 80008d4:	0019      	movs	r1, r3
 80008d6:	0010      	movs	r0, r2
 80008d8:	f002 f9ac 	bl	8002c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80008dc:	0021      	movs	r1, r4
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2280      	movs	r2, #128	; 0x80
 80008e2:	00d2      	lsls	r2, r2, #3
 80008e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	000c      	movs	r4, r1
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	2201      	movs	r2, #1
 80008ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	193b      	adds	r3, r7, r4
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80008fa:	193a      	adds	r2, r7, r4
 80008fc:	23a0      	movs	r3, #160	; 0xa0
 80008fe:	05db      	lsls	r3, r3, #23
 8000900:	0011      	movs	r1, r2
 8000902:	0018      	movs	r0, r3
 8000904:	f002 f996 	bl	8002c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_WHITE_Pin|LED_BLUE_Pin
 8000908:	193b      	adds	r3, r7, r4
 800090a:	223f      	movs	r2, #63	; 0x3f
 800090c:	601a      	str	r2, [r3, #0]
                          |LED_GREEN_Pin|Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	193b      	adds	r3, r7, r4
 8000910:	2201      	movs	r2, #1
 8000912:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	193b      	adds	r3, r7, r4
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	193b      	adds	r3, r7, r4
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000920:	193b      	adds	r3, r7, r4
 8000922:	4a23      	ldr	r2, [pc, #140]	; (80009b0 <MX_GPIO_Init+0x1f0>)
 8000924:	0019      	movs	r1, r3
 8000926:	0010      	movs	r0, r2
 8000928:	f002 f984 	bl	8002c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DEV_EN_Pin|M_EN_Pin;
 800092c:	193b      	adds	r3, r7, r4
 800092e:	2218      	movs	r2, #24
 8000930:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	193b      	adds	r3, r7, r4
 8000934:	2201      	movs	r2, #1
 8000936:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	193b      	adds	r3, r7, r4
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	193b      	adds	r3, r7, r4
 8000940:	2200      	movs	r2, #0
 8000942:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000944:	193b      	adds	r3, r7, r4
 8000946:	4a1b      	ldr	r2, [pc, #108]	; (80009b4 <MX_GPIO_Init+0x1f4>)
 8000948:	0019      	movs	r1, r3
 800094a:	0010      	movs	r0, r2
 800094c:	f002 f972 	bl	8002c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Bordure1_Pin|Bordure2_Pin;
 8000950:	0021      	movs	r1, r4
 8000952:	187b      	adds	r3, r7, r1
 8000954:	22c0      	movs	r2, #192	; 0xc0
 8000956:	0092      	lsls	r2, r2, #2
 8000958:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2288      	movs	r2, #136	; 0x88
 800095e:	0352      	lsls	r2, r2, #13
 8000960:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2201      	movs	r2, #1
 8000966:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000968:	187b      	adds	r3, r7, r1
 800096a:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <MX_GPIO_Init+0x1f4>)
 800096c:	0019      	movs	r1, r3
 800096e:	0010      	movs	r0, r2
 8000970:	f002 f960 	bl	8002c34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000974:	2200      	movs	r2, #0
 8000976:	2100      	movs	r1, #0
 8000978:	2005      	movs	r0, #5
 800097a:	f001 ff9d 	bl	80028b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800097e:	2005      	movs	r0, #5
 8000980:	f001 ffaf 	bl	80028e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000984:	2200      	movs	r2, #0
 8000986:	2100      	movs	r1, #0
 8000988:	2006      	movs	r0, #6
 800098a:	f001 ff95 	bl	80028b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800098e:	2006      	movs	r0, #6
 8000990:	f001 ffa7 	bl	80028e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000994:	2200      	movs	r2, #0
 8000996:	2100      	movs	r1, #0
 8000998:	2007      	movs	r0, #7
 800099a:	f001 ff8d 	bl	80028b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800099e:	2007      	movs	r0, #7
 80009a0:	f001 ff9f 	bl	80028e2 <HAL_NVIC_EnableIRQ>

}
 80009a4:	46c0      	nop			; (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b00b      	add	sp, #44	; 0x2c
 80009aa:	bd90      	pop	{r4, r7, pc}
 80009ac:	40021000 	.word	0x40021000
 80009b0:	50000c00 	.word	0x50000c00
 80009b4:	50000400 	.word	0x50000400
 80009b8:	50000800 	.word	0x50000800
 80009bc:	0000e020 	.word	0x0000e020

080009c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c4:	f000 ffda 	bl	800197c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c8:	f000 f82a 	bl	8000a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009cc:	f7ff fef8 	bl	80007c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80009d0:	f7ff fed8 	bl	8000784 <MX_DMA_Init>
  MX_ADC1_Init();
 80009d4:	f7ff fdea 	bl	80005ac <MX_ADC1_Init>
  MX_TIM1_Init();
 80009d8:	f000 f9aa 	bl	8000d30 <MX_TIM1_Init>
  MX_TIM3_Init();
 80009dc:	f000 fa12 	bl	8000e04 <MX_TIM3_Init>
  MX_TIM14_Init();
 80009e0:	f000 fab0 	bl	8000f44 <MX_TIM14_Init>
  MX_TIM15_Init();
 80009e4:	f000 fafe 	bl	8000fe4 <MX_TIM15_Init>
  MX_TIM16_Init();
 80009e8:	f000 fba0 	bl	800112c <MX_TIM16_Init>
  MX_TIM17_Init();
 80009ec:	f000 fc26 	bl	800123c <MX_TIM17_Init>
  MX_USART1_UART_Init();
 80009f0:	f000 fe7e 	bl	80016f0 <MX_USART1_UART_Init>
  MX_USART4_UART_Init();
 80009f4:	f000 feca 	bl	800178c <MX_USART4_UART_Init>
  MX_SPI1_Init();
 80009f8:	f000 f872 	bl	8000ae0 <MX_SPI1_Init>
  MX_TIM6_Init();
 80009fc:	f000 fa66 	bl	8000ecc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	HAL_ADCEx_Calibration_Start(&hadc1);
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <main+0x58>)
 8000a02:	0018      	movs	r0, r3
 8000a04:	f001 fdd6 	bl	80025b4 <HAL_ADCEx_Calibration_Start>
	/*if(HAL_OK != HAL_ADC_Start_DMA(&hadc1, ADC_buffer, ADC_BUF_SIZE)){
		Error_Handler();
	}
	 */
	HAL_TIM_Base_Start(&htim6);
 8000a08:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <main+0x5c>)
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f003 fa2a 	bl	8003e64 <HAL_TIM_Base_Start>

	codeur_start();
 8000a10:	f7ff fd86 	bl	8000520 <codeur_start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1)
 8000a14:	e7fe      	b.n	8000a14 <main+0x54>
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	20000034 	.word	0x20000034
 8000a1c:	200001f0 	.word	0x200001f0

08000a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a20:	b590      	push	{r4, r7, lr}
 8000a22:	b093      	sub	sp, #76	; 0x4c
 8000a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a26:	2414      	movs	r4, #20
 8000a28:	193b      	adds	r3, r7, r4
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	2334      	movs	r3, #52	; 0x34
 8000a2e:	001a      	movs	r2, r3
 8000a30:	2100      	movs	r1, #0
 8000a32:	f004 ffdd 	bl	80059f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	0018      	movs	r0, r3
 8000a3a:	2310      	movs	r3, #16
 8000a3c:	001a      	movs	r2, r3
 8000a3e:	2100      	movs	r1, #0
 8000a40:	f004 ffd6 	bl	80059f0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a44:	2380      	movs	r3, #128	; 0x80
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f002 fac3 	bl	8002fd4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	2202      	movs	r2, #2
 8000a52:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a54:	193b      	adds	r3, r7, r4
 8000a56:	2280      	movs	r2, #128	; 0x80
 8000a58:	0052      	lsls	r2, r2, #1
 8000a5a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000a5c:	0021      	movs	r1, r4
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	2240      	movs	r2, #64	; 0x40
 8000a68:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2202      	movs	r2, #2
 8000a6e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2202      	movs	r2, #2
 8000a74:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2200      	movs	r2, #0
 8000a7a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2208      	movs	r2, #8
 8000a80:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2280      	movs	r2, #128	; 0x80
 8000a86:	0292      	lsls	r2, r2, #10
 8000a88:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2280      	movs	r2, #128	; 0x80
 8000a8e:	0592      	lsls	r2, r2, #22
 8000a90:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a92:	187b      	adds	r3, r7, r1
 8000a94:	0018      	movs	r0, r3
 8000a96:	f002 fae9 	bl	800306c <HAL_RCC_OscConfig>
 8000a9a:	1e03      	subs	r3, r0, #0
 8000a9c:	d001      	beq.n	8000aa2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a9e:	f000 f819 	bl	8000ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	2207      	movs	r2, #7
 8000aa6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2202      	movs	r2, #2
 8000aac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2102      	movs	r1, #2
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f002 fde4 	bl	800368c <HAL_RCC_ClockConfig>
 8000ac4:	1e03      	subs	r3, r0, #0
 8000ac6:	d001      	beq.n	8000acc <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000ac8:	f000 f804 	bl	8000ad4 <Error_Handler>
  }
}
 8000acc:	46c0      	nop			; (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b013      	add	sp, #76	; 0x4c
 8000ad2:	bd90      	pop	{r4, r7, pc}

08000ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000adc:	e7fe      	b.n	8000adc <Error_Handler+0x8>
	...

08000ae0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <MX_SPI1_Init+0x74>)
 8000ae6:	4a1c      	ldr	r2, [pc, #112]	; (8000b58 <MX_SPI1_Init+0x78>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aea:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <MX_SPI1_Init+0x74>)
 8000aec:	2282      	movs	r2, #130	; 0x82
 8000aee:	0052      	lsls	r2, r2, #1
 8000af0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000af2:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <MX_SPI1_Init+0x74>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000af8:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <MX_SPI1_Init+0x74>)
 8000afa:	22c0      	movs	r2, #192	; 0xc0
 8000afc:	0092      	lsls	r2, r2, #2
 8000afe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_SPI1_Init+0x74>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b06:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <MX_SPI1_Init+0x74>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_SPI1_Init+0x74>)
 8000b0e:	2280      	movs	r2, #128	; 0x80
 8000b10:	0092      	lsls	r2, r2, #2
 8000b12:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_SPI1_Init+0x74>)
 8000b16:	2210      	movs	r2, #16
 8000b18:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_SPI1_Init+0x74>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_SPI1_Init+0x74>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <MX_SPI1_Init+0x74>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_SPI1_Init+0x74>)
 8000b2e:	2207      	movs	r2, #7
 8000b30:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <MX_SPI1_Init+0x74>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_SPI1_Init+0x74>)
 8000b3a:	2208      	movs	r2, #8
 8000b3c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b3e:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <MX_SPI1_Init+0x74>)
 8000b40:	0018      	movs	r0, r3
 8000b42:	f003 f87f 	bl	8003c44 <HAL_SPI_Init>
 8000b46:	1e03      	subs	r3, r0, #0
 8000b48:	d001      	beq.n	8000b4e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b4a:	f7ff ffc3 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200000f4 	.word	0x200000f4
 8000b58:	40013000 	.word	0x40013000

08000b5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b5c:	b590      	push	{r4, r7, lr}
 8000b5e:	b08b      	sub	sp, #44	; 0x2c
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	2414      	movs	r4, #20
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	0018      	movs	r0, r3
 8000b6a:	2314      	movs	r3, #20
 8000b6c:	001a      	movs	r2, r3
 8000b6e:	2100      	movs	r1, #0
 8000b70:	f004 ff3e 	bl	80059f0 <memset>
  if(spiHandle->Instance==SPI1)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a1b      	ldr	r2, [pc, #108]	; (8000be8 <HAL_SPI_MspInit+0x8c>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d130      	bne.n	8000be0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b7e:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <HAL_SPI_MspInit+0x90>)
 8000b80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b82:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <HAL_SPI_MspInit+0x90>)
 8000b84:	2180      	movs	r1, #128	; 0x80
 8000b86:	0149      	lsls	r1, r1, #5
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	641a      	str	r2, [r3, #64]	; 0x40
 8000b8c:	4b17      	ldr	r3, [pc, #92]	; (8000bec <HAL_SPI_MspInit+0x90>)
 8000b8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b90:	2380      	movs	r3, #128	; 0x80
 8000b92:	015b      	lsls	r3, r3, #5
 8000b94:	4013      	ands	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <HAL_SPI_MspInit+0x90>)
 8000b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b9e:	4b13      	ldr	r3, [pc, #76]	; (8000bec <HAL_SPI_MspInit+0x90>)
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <HAL_SPI_MspInit+0x90>)
 8000ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000baa:	2201      	movs	r2, #1
 8000bac:	4013      	ands	r3, r2
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA2     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    PA11 [PA9]     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_11;
 8000bb2:	0021      	movs	r1, r4
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <HAL_SPI_MspInit+0x94>)
 8000bb8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	2200      	movs	r2, #0
 8000bca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	187a      	adds	r2, r7, r1
 8000bd4:	23a0      	movs	r3, #160	; 0xa0
 8000bd6:	05db      	lsls	r3, r3, #23
 8000bd8:	0011      	movs	r1, r2
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f002 f82a 	bl	8002c34 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b00b      	add	sp, #44	; 0x2c
 8000be6:	bd90      	pop	{r4, r7, pc}
 8000be8:	40013000 	.word	0x40013000
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	00000824 	.word	0x00000824

08000bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <HAL_MspInit+0x4c>)
 8000bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c00:	2101      	movs	r1, #1
 8000c02:	430a      	orrs	r2, r1
 8000c04:	641a      	str	r2, [r3, #64]	; 0x40
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c16:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c18:	2180      	movs	r1, #128	; 0x80
 8000c1a:	0549      	lsls	r1, r1, #21
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c24:	2380      	movs	r3, #128	; 0x80
 8000c26:	055b      	lsls	r3, r3, #21
 8000c28:	4013      	ands	r3, r2
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000c2e:	23c0      	movs	r3, #192	; 0xc0
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	0018      	movs	r0, r3
 8000c34:	f000 ff28 	bl	8001a88 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b002      	add	sp, #8
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40021000 	.word	0x40021000

08000c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <NMI_Handler+0x4>

08000c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <HardFault_Handler+0x4>

08000c50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c68:	f000 fef2 	bl	8001a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6c:	46c0      	nop			; (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Bouton1_Pin);
 8000c76:	2001      	movs	r0, #1
 8000c78:	f002 f978 	bl	8002f6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000c7c:	46c0      	nop			; (mov r8, r8)
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Bouton2_Pin);
 8000c86:	2008      	movs	r0, #8
 8000c88:	f002 f970 	bl	8002f6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000c8c:	46c0      	nop			; (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Bouton3_Pin);
 8000c96:	2010      	movs	r0, #16
 8000c98:	f002 f968 	bl	8002f6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Contact4_Pin);
 8000c9c:	2020      	movs	r0, #32
 8000c9e:	f002 f965 	bl	8002f6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Bordure1_Pin);
 8000ca2:	2380      	movs	r3, #128	; 0x80
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f002 f960 	bl	8002f6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Bordure2_Pin);
 8000cac:	2380      	movs	r3, #128	; 0x80
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f002 f95b 	bl	8002f6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Contact1_Pin);
 8000cb6:	2380      	movs	r3, #128	; 0x80
 8000cb8:	019b      	lsls	r3, r3, #6
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f002 f956 	bl	8002f6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Contact2_Pin);
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	01db      	lsls	r3, r3, #7
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f002 f951 	bl	8002f6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Contact3_Pin);
 8000cca:	2380      	movs	r3, #128	; 0x80
 8000ccc:	021b      	lsls	r3, r3, #8
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f002 f94c 	bl	8002f6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000cd4:	46c0      	nop			; (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <DMA1_Channel1_IRQHandler+0x14>)
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f001 fea4 	bl	8002a30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ce8:	46c0      	nop			; (mov r8, r8)
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	20000098 	.word	0x20000098

08000cf4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cf8:	4b03      	ldr	r3, [pc, #12]	; (8000d08 <TIM1_CC_IRQHandler+0x14>)
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f003 fac4 	bl	8004288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000d00:	46c0      	nop			; (mov r8, r8)
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	20000158 	.word	0x20000158

08000d0c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <TIM3_IRQHandler+0x14>)
 8000d12:	0018      	movs	r0, r3
 8000d14:	f003 fab8 	bl	8004288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	200001a4 	.word	0x200001a4

08000d24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d28:	46c0      	nop			; (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b08d      	sub	sp, #52	; 0x34
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d36:	240c      	movs	r4, #12
 8000d38:	193b      	adds	r3, r7, r4
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	2324      	movs	r3, #36	; 0x24
 8000d3e:	001a      	movs	r2, r3
 8000d40:	2100      	movs	r1, #0
 8000d42:	f004 fe55 	bl	80059f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d46:	003b      	movs	r3, r7
 8000d48:	0018      	movs	r0, r3
 8000d4a:	230c      	movs	r3, #12
 8000d4c:	001a      	movs	r2, r3
 8000d4e:	2100      	movs	r1, #0
 8000d50:	f004 fe4e 	bl	80059f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d54:	4b28      	ldr	r3, [pc, #160]	; (8000df8 <MX_TIM1_Init+0xc8>)
 8000d56:	4a29      	ldr	r2, [pc, #164]	; (8000dfc <MX_TIM1_Init+0xcc>)
 8000d58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d5a:	4b27      	ldr	r3, [pc, #156]	; (8000df8 <MX_TIM1_Init+0xc8>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d60:	4b25      	ldr	r3, [pc, #148]	; (8000df8 <MX_TIM1_Init+0xc8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d66:	4b24      	ldr	r3, [pc, #144]	; (8000df8 <MX_TIM1_Init+0xc8>)
 8000d68:	4a25      	ldr	r2, [pc, #148]	; (8000e00 <MX_TIM1_Init+0xd0>)
 8000d6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6c:	4b22      	ldr	r3, [pc, #136]	; (8000df8 <MX_TIM1_Init+0xc8>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d72:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <MX_TIM1_Init+0xc8>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d78:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <MX_TIM1_Init+0xc8>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d7e:	0021      	movs	r1, r4
 8000d80:	187b      	adds	r3, r7, r1
 8000d82:	2203      	movs	r2, #3
 8000d84:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000d86:	187b      	adds	r3, r7, r1
 8000d88:	2202      	movs	r2, #2
 8000d8a:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d8c:	187b      	adds	r3, r7, r1
 8000d8e:	2201      	movs	r2, #1
 8000d90:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	2200      	movs	r2, #0
 8000d96:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	2202      	movs	r2, #2
 8000da2:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	2201      	movs	r2, #1
 8000da8:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	2200      	movs	r2, #0
 8000dae:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	2200      	movs	r2, #0
 8000db4:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000db6:	187a      	adds	r2, r7, r1
 8000db8:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <MX_TIM1_Init+0xc8>)
 8000dba:	0011      	movs	r1, r2
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f003 f8f7 	bl	8003fb0 <HAL_TIM_Encoder_Init>
 8000dc2:	1e03      	subs	r3, r0, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000dc6:	f7ff fe85 	bl	8000ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dca:	003b      	movs	r3, r7
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000dd0:	003b      	movs	r3, r7
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd6:	003b      	movs	r3, r7
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ddc:	003a      	movs	r2, r7
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <MX_TIM1_Init+0xc8>)
 8000de0:	0011      	movs	r1, r2
 8000de2:	0018      	movs	r0, r3
 8000de4:	f004 f800 	bl	8004de8 <HAL_TIMEx_MasterConfigSynchronization>
 8000de8:	1e03      	subs	r3, r0, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000dec:	f7ff fe72 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000df0:	46c0      	nop			; (mov r8, r8)
 8000df2:	46bd      	mov	sp, r7
 8000df4:	b00d      	add	sp, #52	; 0x34
 8000df6:	bd90      	pop	{r4, r7, pc}
 8000df8:	20000158 	.word	0x20000158
 8000dfc:	40012c00 	.word	0x40012c00
 8000e00:	0000ffff 	.word	0x0000ffff

08000e04 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e04:	b590      	push	{r4, r7, lr}
 8000e06:	b08d      	sub	sp, #52	; 0x34
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e0a:	240c      	movs	r4, #12
 8000e0c:	193b      	adds	r3, r7, r4
 8000e0e:	0018      	movs	r0, r3
 8000e10:	2324      	movs	r3, #36	; 0x24
 8000e12:	001a      	movs	r2, r3
 8000e14:	2100      	movs	r1, #0
 8000e16:	f004 fdeb 	bl	80059f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e1a:	003b      	movs	r3, r7
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	230c      	movs	r3, #12
 8000e20:	001a      	movs	r2, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	f004 fde4 	bl	80059f0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e28:	4b25      	ldr	r3, [pc, #148]	; (8000ec0 <MX_TIM3_Init+0xbc>)
 8000e2a:	4a26      	ldr	r2, [pc, #152]	; (8000ec4 <MX_TIM3_Init+0xc0>)
 8000e2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e2e:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <MX_TIM3_Init+0xbc>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e34:	4b22      	ldr	r3, [pc, #136]	; (8000ec0 <MX_TIM3_Init+0xbc>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e3a:	4b21      	ldr	r3, [pc, #132]	; (8000ec0 <MX_TIM3_Init+0xbc>)
 8000e3c:	4a22      	ldr	r2, [pc, #136]	; (8000ec8 <MX_TIM3_Init+0xc4>)
 8000e3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e40:	4b1f      	ldr	r3, [pc, #124]	; (8000ec0 <MX_TIM3_Init+0xbc>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e46:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <MX_TIM3_Init+0xbc>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e4c:	0021      	movs	r1, r4
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	2203      	movs	r2, #3
 8000e52:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	2202      	movs	r2, #2
 8000e58:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e5a:	187b      	adds	r3, r7, r1
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000e6c:	187b      	adds	r3, r7, r1
 8000e6e:	2202      	movs	r2, #2
 8000e70:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e72:	187b      	adds	r3, r7, r1
 8000e74:	2201      	movs	r2, #1
 8000e76:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e78:	187b      	adds	r3, r7, r1
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000e7e:	187b      	adds	r3, r7, r1
 8000e80:	2200      	movs	r2, #0
 8000e82:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000e84:	187a      	adds	r2, r7, r1
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <MX_TIM3_Init+0xbc>)
 8000e88:	0011      	movs	r1, r2
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f003 f890 	bl	8003fb0 <HAL_TIM_Encoder_Init>
 8000e90:	1e03      	subs	r3, r0, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000e94:	f7ff fe1e 	bl	8000ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e98:	003b      	movs	r3, r7
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e9e:	003b      	movs	r3, r7
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ea4:	003a      	movs	r2, r7
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <MX_TIM3_Init+0xbc>)
 8000ea8:	0011      	movs	r1, r2
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f003 ff9c 	bl	8004de8 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb0:	1e03      	subs	r3, r0, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000eb4:	f7ff fe0e 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b00d      	add	sp, #52	; 0x34
 8000ebe:	bd90      	pop	{r4, r7, pc}
 8000ec0:	200001a4 	.word	0x200001a4
 8000ec4:	40000400 	.word	0x40000400
 8000ec8:	0000ffff 	.word	0x0000ffff

08000ecc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	230c      	movs	r3, #12
 8000ed8:	001a      	movs	r2, r3
 8000eda:	2100      	movs	r1, #0
 8000edc:	f004 fd88 	bl	80059f0 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <MX_TIM6_Init+0x6c>)
 8000ee2:	4a16      	ldr	r2, [pc, #88]	; (8000f3c <MX_TIM6_Init+0x70>)
 8000ee4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 63999;
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <MX_TIM6_Init+0x6c>)
 8000ee8:	4a15      	ldr	r2, [pc, #84]	; (8000f40 <MX_TIM6_Init+0x74>)
 8000eea:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <MX_TIM6_Init+0x6c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_TIM6_Init+0x6c>)
 8000ef4:	2263      	movs	r2, #99	; 0x63
 8000ef6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MX_TIM6_Init+0x6c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_TIM6_Init+0x6c>)
 8000f00:	0018      	movs	r0, r3
 8000f02:	f002 ff57 	bl	8003db4 <HAL_TIM_Base_Init>
 8000f06:	1e03      	subs	r3, r0, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000f0a:	f7ff fde3 	bl	8000ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	2220      	movs	r2, #32
 8000f12:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f1a:	1d3a      	adds	r2, r7, #4
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_TIM6_Init+0x6c>)
 8000f1e:	0011      	movs	r1, r2
 8000f20:	0018      	movs	r0, r3
 8000f22:	f003 ff61 	bl	8004de8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f26:	1e03      	subs	r3, r0, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000f2a:	f7ff fdd3 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	46bd      	mov	sp, r7
 8000f32:	b004      	add	sp, #16
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	200001f0 	.word	0x200001f0
 8000f3c:	40001000 	.word	0x40001000
 8000f40:	0000f9ff 	.word	0x0000f9ff

08000f44 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	231c      	movs	r3, #28
 8000f50:	001a      	movs	r2, r3
 8000f52:	2100      	movs	r1, #0
 8000f54:	f004 fd4c 	bl	80059f0 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <MX_TIM14_Init+0x94>)
 8000f5a:	4a20      	ldr	r2, [pc, #128]	; (8000fdc <MX_TIM14_Init+0x98>)
 8000f5c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <MX_TIM14_Init+0x94>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f64:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <MX_TIM14_Init+0x94>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <MX_TIM14_Init+0x94>)
 8000f6c:	4a1c      	ldr	r2, [pc, #112]	; (8000fe0 <MX_TIM14_Init+0x9c>)
 8000f6e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f70:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <MX_TIM14_Init+0x94>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <MX_TIM14_Init+0x94>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000f7c:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <MX_TIM14_Init+0x94>)
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f002 ff18 	bl	8003db4 <HAL_TIM_Base_Init>
 8000f84:	1e03      	subs	r3, r0, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000f88:	f7ff fda4 	bl	8000ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <MX_TIM14_Init+0x94>)
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f002 ffb6 	bl	8003f00 <HAL_TIM_PWM_Init>
 8000f94:	1e03      	subs	r3, r0, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000f98:	f7ff fd9c 	bl	8000ad4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2260      	movs	r2, #96	; 0x60
 8000fa0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fb4:	1d39      	adds	r1, r7, #4
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <MX_TIM14_Init+0x94>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f003 fa96 	bl	80044ec <HAL_TIM_PWM_ConfigChannel>
 8000fc0:	1e03      	subs	r3, r0, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000fc4:	f7ff fd86 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000fc8:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <MX_TIM14_Init+0x94>)
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f000 fad2 	bl	8001574 <HAL_TIM_MspPostInit>

}
 8000fd0:	46c0      	nop			; (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b008      	add	sp, #32
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	2000023c 	.word	0x2000023c
 8000fdc:	40002000 	.word	0x40002000
 8000fe0:	0000ffff 	.word	0x0000ffff

08000fe4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b098      	sub	sp, #96	; 0x60
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fea:	2354      	movs	r3, #84	; 0x54
 8000fec:	18fb      	adds	r3, r7, r3
 8000fee:	0018      	movs	r0, r3
 8000ff0:	230c      	movs	r3, #12
 8000ff2:	001a      	movs	r2, r3
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	f004 fcfb 	bl	80059f0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ffa:	2338      	movs	r3, #56	; 0x38
 8000ffc:	18fb      	adds	r3, r7, r3
 8000ffe:	0018      	movs	r0, r3
 8001000:	231c      	movs	r3, #28
 8001002:	001a      	movs	r2, r3
 8001004:	2100      	movs	r1, #0
 8001006:	f004 fcf3 	bl	80059f0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	0018      	movs	r0, r3
 800100e:	2334      	movs	r3, #52	; 0x34
 8001010:	001a      	movs	r2, r3
 8001012:	2100      	movs	r1, #0
 8001014:	f004 fcec 	bl	80059f0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001018:	4b41      	ldr	r3, [pc, #260]	; (8001120 <MX_TIM15_Init+0x13c>)
 800101a:	4a42      	ldr	r2, [pc, #264]	; (8001124 <MX_TIM15_Init+0x140>)
 800101c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 19;
 800101e:	4b40      	ldr	r3, [pc, #256]	; (8001120 <MX_TIM15_Init+0x13c>)
 8001020:	2213      	movs	r2, #19
 8001022:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001024:	4b3e      	ldr	r3, [pc, #248]	; (8001120 <MX_TIM15_Init+0x13c>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 800102a:	4b3d      	ldr	r3, [pc, #244]	; (8001120 <MX_TIM15_Init+0x13c>)
 800102c:	4a3e      	ldr	r2, [pc, #248]	; (8001128 <MX_TIM15_Init+0x144>)
 800102e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001030:	4b3b      	ldr	r3, [pc, #236]	; (8001120 <MX_TIM15_Init+0x13c>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001036:	4b3a      	ldr	r3, [pc, #232]	; (8001120 <MX_TIM15_Init+0x13c>)
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103c:	4b38      	ldr	r3, [pc, #224]	; (8001120 <MX_TIM15_Init+0x13c>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001042:	4b37      	ldr	r3, [pc, #220]	; (8001120 <MX_TIM15_Init+0x13c>)
 8001044:	0018      	movs	r0, r3
 8001046:	f002 ff5b 	bl	8003f00 <HAL_TIM_PWM_Init>
 800104a:	1e03      	subs	r3, r0, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800104e:	f7ff fd41 	bl	8000ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001052:	2154      	movs	r1, #84	; 0x54
 8001054:	187b      	adds	r3, r7, r1
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105a:	187b      	adds	r3, r7, r1
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001060:	187a      	adds	r2, r7, r1
 8001062:	4b2f      	ldr	r3, [pc, #188]	; (8001120 <MX_TIM15_Init+0x13c>)
 8001064:	0011      	movs	r1, r2
 8001066:	0018      	movs	r0, r3
 8001068:	f003 febe 	bl	8004de8 <HAL_TIMEx_MasterConfigSynchronization>
 800106c:	1e03      	subs	r3, r0, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8001070:	f7ff fd30 	bl	8000ad4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001074:	2138      	movs	r1, #56	; 0x38
 8001076:	187b      	adds	r3, r7, r1
 8001078:	2260      	movs	r2, #96	; 0x60
 800107a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800107c:	187b      	adds	r3, r7, r1
 800107e:	2200      	movs	r2, #0
 8001080:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001082:	187b      	adds	r3, r7, r1
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001088:	187b      	adds	r3, r7, r1
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800108e:	187b      	adds	r3, r7, r1
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001094:	187b      	adds	r3, r7, r1
 8001096:	2200      	movs	r2, #0
 8001098:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800109a:	187b      	adds	r3, r7, r1
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010a0:	1879      	adds	r1, r7, r1
 80010a2:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <MX_TIM15_Init+0x13c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	0018      	movs	r0, r3
 80010a8:	f003 fa20 	bl	80044ec <HAL_TIM_PWM_ConfigChannel>
 80010ac:	1e03      	subs	r3, r0, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 80010b0:	f7ff fd10 	bl	8000ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010b4:	2338      	movs	r3, #56	; 0x38
 80010b6:	18f9      	adds	r1, r7, r3
 80010b8:	4b19      	ldr	r3, [pc, #100]	; (8001120 <MX_TIM15_Init+0x13c>)
 80010ba:	2204      	movs	r2, #4
 80010bc:	0018      	movs	r0, r3
 80010be:	f003 fa15 	bl	80044ec <HAL_TIM_PWM_ConfigChannel>
 80010c2:	1e03      	subs	r3, r0, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM15_Init+0xe6>
  {
    Error_Handler();
 80010c6:	f7ff fd05 	bl	8000ad4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	2200      	movs	r2, #0
 80010d4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	2280      	movs	r2, #128	; 0x80
 80010ec:	0192      	lsls	r2, r2, #6
 80010ee:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	2200      	movs	r2, #0
 80010f4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	2200      	movs	r2, #0
 80010fa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80010fc:	1d3a      	adds	r2, r7, #4
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <MX_TIM15_Init+0x13c>)
 8001100:	0011      	movs	r1, r2
 8001102:	0018      	movs	r0, r3
 8001104:	f003 fed8 	bl	8004eb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001108:	1e03      	subs	r3, r0, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 800110c:	f7ff fce2 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <MX_TIM15_Init+0x13c>)
 8001112:	0018      	movs	r0, r3
 8001114:	f000 fa2e 	bl	8001574 <HAL_TIM_MspPostInit>

}
 8001118:	46c0      	nop			; (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	b018      	add	sp, #96	; 0x60
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000288 	.word	0x20000288
 8001124:	40014000 	.word	0x40014000
 8001128:	000003e7 	.word	0x000003e7

0800112c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b094      	sub	sp, #80	; 0x50
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001132:	2334      	movs	r3, #52	; 0x34
 8001134:	18fb      	adds	r3, r7, r3
 8001136:	0018      	movs	r0, r3
 8001138:	231c      	movs	r3, #28
 800113a:	001a      	movs	r2, r3
 800113c:	2100      	movs	r1, #0
 800113e:	f004 fc57 	bl	80059f0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001142:	003b      	movs	r3, r7
 8001144:	0018      	movs	r0, r3
 8001146:	2334      	movs	r3, #52	; 0x34
 8001148:	001a      	movs	r2, r3
 800114a:	2100      	movs	r1, #0
 800114c:	f004 fc50 	bl	80059f0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001150:	4b37      	ldr	r3, [pc, #220]	; (8001230 <MX_TIM16_Init+0x104>)
 8001152:	4a38      	ldr	r2, [pc, #224]	; (8001234 <MX_TIM16_Init+0x108>)
 8001154:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 19;
 8001156:	4b36      	ldr	r3, [pc, #216]	; (8001230 <MX_TIM16_Init+0x104>)
 8001158:	2213      	movs	r2, #19
 800115a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115c:	4b34      	ldr	r3, [pc, #208]	; (8001230 <MX_TIM16_Init+0x104>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 8001162:	4b33      	ldr	r3, [pc, #204]	; (8001230 <MX_TIM16_Init+0x104>)
 8001164:	4a34      	ldr	r2, [pc, #208]	; (8001238 <MX_TIM16_Init+0x10c>)
 8001166:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001168:	4b31      	ldr	r3, [pc, #196]	; (8001230 <MX_TIM16_Init+0x104>)
 800116a:	2200      	movs	r2, #0
 800116c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800116e:	4b30      	ldr	r3, [pc, #192]	; (8001230 <MX_TIM16_Init+0x104>)
 8001170:	2200      	movs	r2, #0
 8001172:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001174:	4b2e      	ldr	r3, [pc, #184]	; (8001230 <MX_TIM16_Init+0x104>)
 8001176:	2200      	movs	r2, #0
 8001178:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800117a:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <MX_TIM16_Init+0x104>)
 800117c:	0018      	movs	r0, r3
 800117e:	f002 fe19 	bl	8003db4 <HAL_TIM_Base_Init>
 8001182:	1e03      	subs	r3, r0, #0
 8001184:	d001      	beq.n	800118a <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8001186:	f7ff fca5 	bl	8000ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800118a:	4b29      	ldr	r3, [pc, #164]	; (8001230 <MX_TIM16_Init+0x104>)
 800118c:	0018      	movs	r0, r3
 800118e:	f002 feb7 	bl	8003f00 <HAL_TIM_PWM_Init>
 8001192:	1e03      	subs	r3, r0, #0
 8001194:	d001      	beq.n	800119a <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8001196:	f7ff fc9d 	bl	8000ad4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800119a:	2134      	movs	r1, #52	; 0x34
 800119c:	187b      	adds	r3, r7, r1
 800119e:	2260      	movs	r2, #96	; 0x60
 80011a0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80011a2:	187b      	adds	r3, r7, r1
 80011a4:	2200      	movs	r2, #0
 80011a6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a8:	187b      	adds	r3, r7, r1
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011ae:	187b      	adds	r3, r7, r1
 80011b0:	2200      	movs	r2, #0
 80011b2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011ba:	187b      	adds	r3, r7, r1
 80011bc:	2200      	movs	r2, #0
 80011be:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	2200      	movs	r2, #0
 80011c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011c6:	1879      	adds	r1, r7, r1
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <MX_TIM16_Init+0x104>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	0018      	movs	r0, r3
 80011ce:	f003 f98d 	bl	80044ec <HAL_TIM_PWM_ConfigChannel>
 80011d2:	1e03      	subs	r3, r0, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 80011d6:	f7ff fc7d 	bl	8000ad4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011da:	003b      	movs	r3, r7
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011e0:	003b      	movs	r3, r7
 80011e2:	2200      	movs	r2, #0
 80011e4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011e6:	003b      	movs	r3, r7
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011ec:	003b      	movs	r3, r7
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011f2:	003b      	movs	r3, r7
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011f8:	003b      	movs	r3, r7
 80011fa:	2280      	movs	r2, #128	; 0x80
 80011fc:	0192      	lsls	r2, r2, #6
 80011fe:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001200:	003b      	movs	r3, r7
 8001202:	2200      	movs	r2, #0
 8001204:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001206:	003b      	movs	r3, r7
 8001208:	2200      	movs	r2, #0
 800120a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800120c:	003a      	movs	r2, r7
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <MX_TIM16_Init+0x104>)
 8001210:	0011      	movs	r1, r2
 8001212:	0018      	movs	r0, r3
 8001214:	f003 fe50 	bl	8004eb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001218:	1e03      	subs	r3, r0, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 800121c:	f7ff fc5a 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001220:	4b03      	ldr	r3, [pc, #12]	; (8001230 <MX_TIM16_Init+0x104>)
 8001222:	0018      	movs	r0, r3
 8001224:	f000 f9a6 	bl	8001574 <HAL_TIM_MspPostInit>

}
 8001228:	46c0      	nop			; (mov r8, r8)
 800122a:	46bd      	mov	sp, r7
 800122c:	b014      	add	sp, #80	; 0x50
 800122e:	bd80      	pop	{r7, pc}
 8001230:	200002d4 	.word	0x200002d4
 8001234:	40014400 	.word	0x40014400
 8001238:	000003e7 	.word	0x000003e7

0800123c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b094      	sub	sp, #80	; 0x50
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001242:	2334      	movs	r3, #52	; 0x34
 8001244:	18fb      	adds	r3, r7, r3
 8001246:	0018      	movs	r0, r3
 8001248:	231c      	movs	r3, #28
 800124a:	001a      	movs	r2, r3
 800124c:	2100      	movs	r1, #0
 800124e:	f004 fbcf 	bl	80059f0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001252:	003b      	movs	r3, r7
 8001254:	0018      	movs	r0, r3
 8001256:	2334      	movs	r3, #52	; 0x34
 8001258:	001a      	movs	r2, r3
 800125a:	2100      	movs	r1, #0
 800125c:	f004 fbc8 	bl	80059f0 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001260:	4b37      	ldr	r3, [pc, #220]	; (8001340 <MX_TIM17_Init+0x104>)
 8001262:	4a38      	ldr	r2, [pc, #224]	; (8001344 <MX_TIM17_Init+0x108>)
 8001264:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 19;
 8001266:	4b36      	ldr	r3, [pc, #216]	; (8001340 <MX_TIM17_Init+0x104>)
 8001268:	2213      	movs	r2, #19
 800126a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126c:	4b34      	ldr	r3, [pc, #208]	; (8001340 <MX_TIM17_Init+0x104>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 8001272:	4b33      	ldr	r3, [pc, #204]	; (8001340 <MX_TIM17_Init+0x104>)
 8001274:	4a34      	ldr	r2, [pc, #208]	; (8001348 <MX_TIM17_Init+0x10c>)
 8001276:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001278:	4b31      	ldr	r3, [pc, #196]	; (8001340 <MX_TIM17_Init+0x104>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800127e:	4b30      	ldr	r3, [pc, #192]	; (8001340 <MX_TIM17_Init+0x104>)
 8001280:	2200      	movs	r2, #0
 8001282:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001284:	4b2e      	ldr	r3, [pc, #184]	; (8001340 <MX_TIM17_Init+0x104>)
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800128a:	4b2d      	ldr	r3, [pc, #180]	; (8001340 <MX_TIM17_Init+0x104>)
 800128c:	0018      	movs	r0, r3
 800128e:	f002 fd91 	bl	8003db4 <HAL_TIM_Base_Init>
 8001292:	1e03      	subs	r3, r0, #0
 8001294:	d001      	beq.n	800129a <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8001296:	f7ff fc1d 	bl	8000ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800129a:	4b29      	ldr	r3, [pc, #164]	; (8001340 <MX_TIM17_Init+0x104>)
 800129c:	0018      	movs	r0, r3
 800129e:	f002 fe2f 	bl	8003f00 <HAL_TIM_PWM_Init>
 80012a2:	1e03      	subs	r3, r0, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 80012a6:	f7ff fc15 	bl	8000ad4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012aa:	2134      	movs	r1, #52	; 0x34
 80012ac:	187b      	adds	r3, r7, r1
 80012ae:	2260      	movs	r2, #96	; 0x60
 80012b0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80012b2:	187b      	adds	r3, r7, r1
 80012b4:	2200      	movs	r2, #0
 80012b6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b8:	187b      	adds	r3, r7, r1
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012be:	187b      	adds	r3, r7, r1
 80012c0:	2200      	movs	r2, #0
 80012c2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c4:	187b      	adds	r3, r7, r1
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012ca:	187b      	adds	r3, r7, r1
 80012cc:	2200      	movs	r2, #0
 80012ce:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012d0:	187b      	adds	r3, r7, r1
 80012d2:	2200      	movs	r2, #0
 80012d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012d6:	1879      	adds	r1, r7, r1
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <MX_TIM17_Init+0x104>)
 80012da:	2200      	movs	r2, #0
 80012dc:	0018      	movs	r0, r3
 80012de:	f003 f905 	bl	80044ec <HAL_TIM_PWM_ConfigChannel>
 80012e2:	1e03      	subs	r3, r0, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 80012e6:	f7ff fbf5 	bl	8000ad4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012ea:	003b      	movs	r3, r7
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012f0:	003b      	movs	r3, r7
 80012f2:	2200      	movs	r2, #0
 80012f4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012f6:	003b      	movs	r3, r7
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012fc:	003b      	movs	r3, r7
 80012fe:	2200      	movs	r2, #0
 8001300:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001302:	003b      	movs	r3, r7
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001308:	003b      	movs	r3, r7
 800130a:	2280      	movs	r2, #128	; 0x80
 800130c:	0192      	lsls	r2, r2, #6
 800130e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001310:	003b      	movs	r3, r7
 8001312:	2200      	movs	r2, #0
 8001314:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001316:	003b      	movs	r3, r7
 8001318:	2200      	movs	r2, #0
 800131a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800131c:	003a      	movs	r2, r7
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <MX_TIM17_Init+0x104>)
 8001320:	0011      	movs	r1, r2
 8001322:	0018      	movs	r0, r3
 8001324:	f003 fdc8 	bl	8004eb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001328:	1e03      	subs	r3, r0, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 800132c:	f7ff fbd2 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001330:	4b03      	ldr	r3, [pc, #12]	; (8001340 <MX_TIM17_Init+0x104>)
 8001332:	0018      	movs	r0, r3
 8001334:	f000 f91e 	bl	8001574 <HAL_TIM_MspPostInit>

}
 8001338:	46c0      	nop			; (mov r8, r8)
 800133a:	46bd      	mov	sp, r7
 800133c:	b014      	add	sp, #80	; 0x50
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000320 	.word	0x20000320
 8001344:	40014800 	.word	0x40014800
 8001348:	000003e7 	.word	0x000003e7

0800134c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800134c:	b590      	push	{r4, r7, lr}
 800134e:	b08d      	sub	sp, #52	; 0x34
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	241c      	movs	r4, #28
 8001356:	193b      	adds	r3, r7, r4
 8001358:	0018      	movs	r0, r3
 800135a:	2314      	movs	r3, #20
 800135c:	001a      	movs	r2, r3
 800135e:	2100      	movs	r1, #0
 8001360:	f004 fb46 	bl	80059f0 <memset>
  if(tim_encoderHandle->Instance==TIM1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a3e      	ldr	r2, [pc, #248]	; (8001464 <HAL_TIM_Encoder_MspInit+0x118>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d13a      	bne.n	80013e4 <HAL_TIM_Encoder_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800136e:	4b3e      	ldr	r3, [pc, #248]	; (8001468 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001370:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001372:	4b3d      	ldr	r3, [pc, #244]	; (8001468 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001374:	2180      	movs	r1, #128	; 0x80
 8001376:	0109      	lsls	r1, r1, #4
 8001378:	430a      	orrs	r2, r1
 800137a:	641a      	str	r2, [r3, #64]	; 0x40
 800137c:	4b3a      	ldr	r3, [pc, #232]	; (8001468 <HAL_TIM_Encoder_MspInit+0x11c>)
 800137e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
 8001388:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	4b37      	ldr	r3, [pc, #220]	; (8001468 <HAL_TIM_Encoder_MspInit+0x11c>)
 800138c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800138e:	4b36      	ldr	r3, [pc, #216]	; (8001468 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001390:	2101      	movs	r1, #1
 8001392:	430a      	orrs	r2, r1
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
 8001396:	4b34      	ldr	r3, [pc, #208]	; (8001468 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800139a:	2201      	movs	r2, #1
 800139c:	4013      	ands	r3, r2
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = CODEUR1_PH1_Pin|CODEUR1_PH2_Pin;
 80013a2:	193b      	adds	r3, r7, r4
 80013a4:	22c0      	movs	r2, #192	; 0xc0
 80013a6:	0092      	lsls	r2, r2, #2
 80013a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	0021      	movs	r1, r4
 80013ac:	187b      	adds	r3, r7, r1
 80013ae:	2202      	movs	r2, #2
 80013b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	187b      	adds	r3, r7, r1
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	187b      	adds	r3, r7, r1
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80013be:	187b      	adds	r3, r7, r1
 80013c0:	2202      	movs	r2, #2
 80013c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	187a      	adds	r2, r7, r1
 80013c6:	23a0      	movs	r3, #160	; 0xa0
 80013c8:	05db      	lsls	r3, r3, #23
 80013ca:	0011      	movs	r1, r2
 80013cc:	0018      	movs	r0, r3
 80013ce:	f001 fc31 	bl	8002c34 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2100      	movs	r1, #0
 80013d6:	200e      	movs	r0, #14
 80013d8:	f001 fa6e 	bl	80028b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80013dc:	200e      	movs	r0, #14
 80013de:	f001 fa80 	bl	80028e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80013e2:	e03a      	b.n	800145a <HAL_TIM_Encoder_MspInit+0x10e>
  else if(tim_encoderHandle->Instance==TIM3)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a20      	ldr	r2, [pc, #128]	; (800146c <HAL_TIM_Encoder_MspInit+0x120>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d135      	bne.n	800145a <HAL_TIM_Encoder_MspInit+0x10e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013ee:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <HAL_TIM_Encoder_MspInit+0x11c>)
 80013f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013f2:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <HAL_TIM_Encoder_MspInit+0x11c>)
 80013f4:	2102      	movs	r1, #2
 80013f6:	430a      	orrs	r2, r1
 80013f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80013fa:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <HAL_TIM_Encoder_MspInit+0x11c>)
 80013fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013fe:	2202      	movs	r2, #2
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001406:	4b18      	ldr	r3, [pc, #96]	; (8001468 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800140a:	4b17      	ldr	r3, [pc, #92]	; (8001468 <HAL_TIM_Encoder_MspInit+0x11c>)
 800140c:	2104      	movs	r1, #4
 800140e:	430a      	orrs	r2, r1
 8001410:	635a      	str	r2, [r3, #52]	; 0x34
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001416:	2204      	movs	r2, #4
 8001418:	4013      	ands	r3, r2
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CODEUR2_PH1_Pin|CODEUR2_PH2_Pin;
 800141e:	211c      	movs	r1, #28
 8001420:	187b      	adds	r3, r7, r1
 8001422:	22c0      	movs	r2, #192	; 0xc0
 8001424:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	187b      	adds	r3, r7, r1
 8001428:	2202      	movs	r2, #2
 800142a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	187b      	adds	r3, r7, r1
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	187b      	adds	r3, r7, r1
 8001434:	2200      	movs	r2, #0
 8001436:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001438:	187b      	adds	r3, r7, r1
 800143a:	2201      	movs	r2, #1
 800143c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143e:	187b      	adds	r3, r7, r1
 8001440:	4a0b      	ldr	r2, [pc, #44]	; (8001470 <HAL_TIM_Encoder_MspInit+0x124>)
 8001442:	0019      	movs	r1, r3
 8001444:	0010      	movs	r0, r2
 8001446:	f001 fbf5 	bl	8002c34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	2010      	movs	r0, #16
 8001450:	f001 fa32 	bl	80028b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001454:	2010      	movs	r0, #16
 8001456:	f001 fa44 	bl	80028e2 <HAL_NVIC_EnableIRQ>
}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	46bd      	mov	sp, r7
 800145e:	b00d      	add	sp, #52	; 0x34
 8001460:	bd90      	pop	{r4, r7, pc}
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	40012c00 	.word	0x40012c00
 8001468:	40021000 	.word	0x40021000
 800146c:	40000400 	.word	0x40000400
 8001470:	50000800 	.word	0x50000800

08001474 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a27      	ldr	r2, [pc, #156]	; (8001520 <HAL_TIM_Base_MspInit+0xac>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d10c      	bne.n	80014a0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001486:	4b27      	ldr	r3, [pc, #156]	; (8001524 <HAL_TIM_Base_MspInit+0xb0>)
 8001488:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800148a:	4b26      	ldr	r3, [pc, #152]	; (8001524 <HAL_TIM_Base_MspInit+0xb0>)
 800148c:	2110      	movs	r1, #16
 800148e:	430a      	orrs	r2, r1
 8001490:	63da      	str	r2, [r3, #60]	; 0x3c
 8001492:	4b24      	ldr	r3, [pc, #144]	; (8001524 <HAL_TIM_Base_MspInit+0xb0>)
 8001494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001496:	2210      	movs	r2, #16
 8001498:	4013      	ands	r3, r2
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800149e:	e03a      	b.n	8001516 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM14)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a20      	ldr	r2, [pc, #128]	; (8001528 <HAL_TIM_Base_MspInit+0xb4>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d10e      	bne.n	80014c8 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80014aa:	4b1e      	ldr	r3, [pc, #120]	; (8001524 <HAL_TIM_Base_MspInit+0xb0>)
 80014ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ae:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <HAL_TIM_Base_MspInit+0xb0>)
 80014b0:	2180      	movs	r1, #128	; 0x80
 80014b2:	0209      	lsls	r1, r1, #8
 80014b4:	430a      	orrs	r2, r1
 80014b6:	641a      	str	r2, [r3, #64]	; 0x40
 80014b8:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <HAL_TIM_Base_MspInit+0xb0>)
 80014ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	021b      	lsls	r3, r3, #8
 80014c0:	4013      	ands	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]
}
 80014c6:	e026      	b.n	8001516 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM16)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a17      	ldr	r2, [pc, #92]	; (800152c <HAL_TIM_Base_MspInit+0xb8>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d10e      	bne.n	80014f0 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80014d2:	4b14      	ldr	r3, [pc, #80]	; (8001524 <HAL_TIM_Base_MspInit+0xb0>)
 80014d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014d6:	4b13      	ldr	r3, [pc, #76]	; (8001524 <HAL_TIM_Base_MspInit+0xb0>)
 80014d8:	2180      	movs	r1, #128	; 0x80
 80014da:	0289      	lsls	r1, r1, #10
 80014dc:	430a      	orrs	r2, r1
 80014de:	641a      	str	r2, [r3, #64]	; 0x40
 80014e0:	4b10      	ldr	r3, [pc, #64]	; (8001524 <HAL_TIM_Base_MspInit+0xb0>)
 80014e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	029b      	lsls	r3, r3, #10
 80014e8:	4013      	ands	r3, r2
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
}
 80014ee:	e012      	b.n	8001516 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM17)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <HAL_TIM_Base_MspInit+0xbc>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d10d      	bne.n	8001516 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80014fa:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <HAL_TIM_Base_MspInit+0xb0>)
 80014fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_TIM_Base_MspInit+0xb0>)
 8001500:	2180      	movs	r1, #128	; 0x80
 8001502:	02c9      	lsls	r1, r1, #11
 8001504:	430a      	orrs	r2, r1
 8001506:	641a      	str	r2, [r3, #64]	; 0x40
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_TIM_Base_MspInit+0xb0>)
 800150a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800150c:	2380      	movs	r3, #128	; 0x80
 800150e:	02db      	lsls	r3, r3, #11
 8001510:	4013      	ands	r3, r2
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	46bd      	mov	sp, r7
 800151a:	b006      	add	sp, #24
 800151c:	bd80      	pop	{r7, pc}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	40001000 	.word	0x40001000
 8001524:	40021000 	.word	0x40021000
 8001528:	40002000 	.word	0x40002000
 800152c:	40014400 	.word	0x40014400
 8001530:	40014800 	.word	0x40014800

08001534 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a0a      	ldr	r2, [pc, #40]	; (800156c <HAL_TIM_PWM_MspInit+0x38>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d10d      	bne.n	8001562 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001546:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <HAL_TIM_PWM_MspInit+0x3c>)
 8001548:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <HAL_TIM_PWM_MspInit+0x3c>)
 800154c:	2180      	movs	r1, #128	; 0x80
 800154e:	0249      	lsls	r1, r1, #9
 8001550:	430a      	orrs	r2, r1
 8001552:	641a      	str	r2, [r3, #64]	; 0x40
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_TIM_PWM_MspInit+0x3c>)
 8001556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	025b      	lsls	r3, r3, #9
 800155c:	4013      	ands	r3, r2
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8001562:	46c0      	nop			; (mov r8, r8)
 8001564:	46bd      	mov	sp, r7
 8001566:	b004      	add	sp, #16
 8001568:	bd80      	pop	{r7, pc}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	40014000 	.word	0x40014000
 8001570:	40021000 	.word	0x40021000

08001574 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001574:	b590      	push	{r4, r7, lr}
 8001576:	b08d      	sub	sp, #52	; 0x34
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	241c      	movs	r4, #28
 800157e:	193b      	adds	r3, r7, r4
 8001580:	0018      	movs	r0, r3
 8001582:	2314      	movs	r3, #20
 8001584:	001a      	movs	r2, r3
 8001586:	2100      	movs	r1, #0
 8001588:	f004 fa32 	bl	80059f0 <memset>
  if(timHandle->Instance==TIM14)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a51      	ldr	r2, [pc, #324]	; (80016d8 <HAL_TIM_MspPostInit+0x164>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d123      	bne.n	80015de <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001596:	4b51      	ldr	r3, [pc, #324]	; (80016dc <HAL_TIM_MspPostInit+0x168>)
 8001598:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800159a:	4b50      	ldr	r3, [pc, #320]	; (80016dc <HAL_TIM_MspPostInit+0x168>)
 800159c:	2104      	movs	r1, #4
 800159e:	430a      	orrs	r2, r1
 80015a0:	635a      	str	r2, [r3, #52]	; 0x34
 80015a2:	4b4e      	ldr	r3, [pc, #312]	; (80016dc <HAL_TIM_MspPostInit+0x168>)
 80015a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a6:	2204      	movs	r2, #4
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
 80015ac:	69bb      	ldr	r3, [r7, #24]
    /**TIM14 GPIO Configuration
    PC12     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = PWM_MOT_LIDAR_Pin;
 80015ae:	193b      	adds	r3, r7, r4
 80015b0:	2280      	movs	r2, #128	; 0x80
 80015b2:	0152      	lsls	r2, r2, #5
 80015b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	0021      	movs	r1, r4
 80015b8:	187b      	adds	r3, r7, r1
 80015ba:	2202      	movs	r2, #2
 80015bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	187b      	adds	r3, r7, r1
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	187b      	adds	r3, r7, r1
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM14;
 80015ca:	187b      	adds	r3, r7, r1
 80015cc:	2202      	movs	r2, #2
 80015ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_MOT_LIDAR_GPIO_Port, &GPIO_InitStruct);
 80015d0:	187b      	adds	r3, r7, r1
 80015d2:	4a43      	ldr	r2, [pc, #268]	; (80016e0 <HAL_TIM_MspPostInit+0x16c>)
 80015d4:	0019      	movs	r1, r3
 80015d6:	0010      	movs	r0, r2
 80015d8:	f001 fb2c 	bl	8002c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80015dc:	e078      	b.n	80016d0 <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM15)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a40      	ldr	r2, [pc, #256]	; (80016e4 <HAL_TIM_MspPostInit+0x170>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d122      	bne.n	800162e <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e8:	4b3c      	ldr	r3, [pc, #240]	; (80016dc <HAL_TIM_MspPostInit+0x168>)
 80015ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ec:	4b3b      	ldr	r3, [pc, #236]	; (80016dc <HAL_TIM_MspPostInit+0x168>)
 80015ee:	2104      	movs	r1, #4
 80015f0:	430a      	orrs	r2, r1
 80015f2:	635a      	str	r2, [r3, #52]	; 0x34
 80015f4:	4b39      	ldr	r3, [pc, #228]	; (80016dc <HAL_TIM_MspPostInit+0x168>)
 80015f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f8:	2204      	movs	r2, #4
 80015fa:	4013      	ands	r3, r2
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_MOT2_PH1_Pin|PWM_MOT2_PH2_Pin;
 8001600:	211c      	movs	r1, #28
 8001602:	187b      	adds	r3, r7, r1
 8001604:	2206      	movs	r2, #6
 8001606:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	187b      	adds	r3, r7, r1
 800160a:	2202      	movs	r2, #2
 800160c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	187b      	adds	r3, r7, r1
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	187b      	adds	r3, r7, r1
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 800161a:	187b      	adds	r3, r7, r1
 800161c:	2202      	movs	r2, #2
 800161e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001620:	187b      	adds	r3, r7, r1
 8001622:	4a2f      	ldr	r2, [pc, #188]	; (80016e0 <HAL_TIM_MspPostInit+0x16c>)
 8001624:	0019      	movs	r1, r3
 8001626:	0010      	movs	r0, r2
 8001628:	f001 fb04 	bl	8002c34 <HAL_GPIO_Init>
}
 800162c:	e050      	b.n	80016d0 <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM16)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a2d      	ldr	r2, [pc, #180]	; (80016e8 <HAL_TIM_MspPostInit+0x174>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d123      	bne.n	8001680 <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001638:	4b28      	ldr	r3, [pc, #160]	; (80016dc <HAL_TIM_MspPostInit+0x168>)
 800163a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800163c:	4b27      	ldr	r3, [pc, #156]	; (80016dc <HAL_TIM_MspPostInit+0x168>)
 800163e:	2101      	movs	r1, #1
 8001640:	430a      	orrs	r2, r1
 8001642:	635a      	str	r2, [r3, #52]	; 0x34
 8001644:	4b25      	ldr	r3, [pc, #148]	; (80016dc <HAL_TIM_MspPostInit+0x168>)
 8001646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001648:	2201      	movs	r2, #1
 800164a:	4013      	ands	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_MOT1_PH1_Pin;
 8001650:	211c      	movs	r1, #28
 8001652:	187b      	adds	r3, r7, r1
 8001654:	2240      	movs	r2, #64	; 0x40
 8001656:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	187b      	adds	r3, r7, r1
 800165a:	2202      	movs	r2, #2
 800165c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	187b      	adds	r3, r7, r1
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	187b      	adds	r3, r7, r1
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 800166a:	187b      	adds	r3, r7, r1
 800166c:	2205      	movs	r2, #5
 800166e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_MOT1_PH1_GPIO_Port, &GPIO_InitStruct);
 8001670:	187a      	adds	r2, r7, r1
 8001672:	23a0      	movs	r3, #160	; 0xa0
 8001674:	05db      	lsls	r3, r3, #23
 8001676:	0011      	movs	r1, r2
 8001678:	0018      	movs	r0, r3
 800167a:	f001 fadb 	bl	8002c34 <HAL_GPIO_Init>
}
 800167e:	e027      	b.n	80016d0 <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM17)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a19      	ldr	r2, [pc, #100]	; (80016ec <HAL_TIM_MspPostInit+0x178>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d122      	bne.n	80016d0 <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	4b14      	ldr	r3, [pc, #80]	; (80016dc <HAL_TIM_MspPostInit+0x168>)
 800168c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800168e:	4b13      	ldr	r3, [pc, #76]	; (80016dc <HAL_TIM_MspPostInit+0x168>)
 8001690:	2101      	movs	r1, #1
 8001692:	430a      	orrs	r2, r1
 8001694:	635a      	str	r2, [r3, #52]	; 0x34
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <HAL_TIM_MspPostInit+0x168>)
 8001698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800169a:	2201      	movs	r2, #1
 800169c:	4013      	ands	r3, r2
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_MOT1_PH2_Pin;
 80016a2:	211c      	movs	r1, #28
 80016a4:	187b      	adds	r3, r7, r1
 80016a6:	2280      	movs	r2, #128	; 0x80
 80016a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	187b      	adds	r3, r7, r1
 80016ac:	2202      	movs	r2, #2
 80016ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	187b      	adds	r3, r7, r1
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b6:	187b      	adds	r3, r7, r1
 80016b8:	2200      	movs	r2, #0
 80016ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 80016bc:	187b      	adds	r3, r7, r1
 80016be:	2205      	movs	r2, #5
 80016c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_MOT1_PH2_GPIO_Port, &GPIO_InitStruct);
 80016c2:	187a      	adds	r2, r7, r1
 80016c4:	23a0      	movs	r3, #160	; 0xa0
 80016c6:	05db      	lsls	r3, r3, #23
 80016c8:	0011      	movs	r1, r2
 80016ca:	0018      	movs	r0, r3
 80016cc:	f001 fab2 	bl	8002c34 <HAL_GPIO_Init>
}
 80016d0:	46c0      	nop			; (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b00d      	add	sp, #52	; 0x34
 80016d6:	bd90      	pop	{r4, r7, pc}
 80016d8:	40002000 	.word	0x40002000
 80016dc:	40021000 	.word	0x40021000
 80016e0:	50000800 	.word	0x50000800
 80016e4:	40014000 	.word	0x40014000
 80016e8:	40014400 	.word	0x40014400
 80016ec:	40014800 	.word	0x40014800

080016f0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart4;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016f4:	4b23      	ldr	r3, [pc, #140]	; (8001784 <MX_USART1_UART_Init+0x94>)
 80016f6:	4a24      	ldr	r2, [pc, #144]	; (8001788 <MX_USART1_UART_Init+0x98>)
 80016f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016fa:	4b22      	ldr	r3, [pc, #136]	; (8001784 <MX_USART1_UART_Init+0x94>)
 80016fc:	22e1      	movs	r2, #225	; 0xe1
 80016fe:	0252      	lsls	r2, r2, #9
 8001700:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001702:	4b20      	ldr	r3, [pc, #128]	; (8001784 <MX_USART1_UART_Init+0x94>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001708:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <MX_USART1_UART_Init+0x94>)
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <MX_USART1_UART_Init+0x94>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001714:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <MX_USART1_UART_Init+0x94>)
 8001716:	220c      	movs	r2, #12
 8001718:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <MX_USART1_UART_Init+0x94>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001720:	4b18      	ldr	r3, [pc, #96]	; (8001784 <MX_USART1_UART_Init+0x94>)
 8001722:	2200      	movs	r2, #0
 8001724:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001726:	4b17      	ldr	r3, [pc, #92]	; (8001784 <MX_USART1_UART_Init+0x94>)
 8001728:	2200      	movs	r2, #0
 800172a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <MX_USART1_UART_Init+0x94>)
 800172e:	2200      	movs	r2, #0
 8001730:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001732:	4b14      	ldr	r3, [pc, #80]	; (8001784 <MX_USART1_UART_Init+0x94>)
 8001734:	2200      	movs	r2, #0
 8001736:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <MX_USART1_UART_Init+0x94>)
 800173a:	0018      	movs	r0, r3
 800173c:	f003 fc7a 	bl	8005034 <HAL_UART_Init>
 8001740:	1e03      	subs	r3, r0, #0
 8001742:	d001      	beq.n	8001748 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001744:	f7ff f9c6 	bl	8000ad4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001748:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <MX_USART1_UART_Init+0x94>)
 800174a:	2100      	movs	r1, #0
 800174c:	0018      	movs	r0, r3
 800174e:	f004 f86f 	bl	8005830 <HAL_UARTEx_SetTxFifoThreshold>
 8001752:	1e03      	subs	r3, r0, #0
 8001754:	d001      	beq.n	800175a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001756:	f7ff f9bd 	bl	8000ad4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <MX_USART1_UART_Init+0x94>)
 800175c:	2100      	movs	r1, #0
 800175e:	0018      	movs	r0, r3
 8001760:	f004 f8a6 	bl	80058b0 <HAL_UARTEx_SetRxFifoThreshold>
 8001764:	1e03      	subs	r3, r0, #0
 8001766:	d001      	beq.n	800176c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001768:	f7ff f9b4 	bl	8000ad4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800176c:	4b05      	ldr	r3, [pc, #20]	; (8001784 <MX_USART1_UART_Init+0x94>)
 800176e:	0018      	movs	r0, r3
 8001770:	f004 f824 	bl	80057bc <HAL_UARTEx_DisableFifoMode>
 8001774:	1e03      	subs	r3, r0, #0
 8001776:	d001      	beq.n	800177c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001778:	f7ff f9ac 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800177c:	46c0      	nop			; (mov r8, r8)
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	46c0      	nop			; (mov r8, r8)
 8001784:	2000036c 	.word	0x2000036c
 8001788:	40013800 	.word	0x40013800

0800178c <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8001790:	4b16      	ldr	r3, [pc, #88]	; (80017ec <MX_USART4_UART_Init+0x60>)
 8001792:	4a17      	ldr	r2, [pc, #92]	; (80017f0 <MX_USART4_UART_Init+0x64>)
 8001794:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 128000;
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <MX_USART4_UART_Init+0x60>)
 8001798:	22fa      	movs	r2, #250	; 0xfa
 800179a:	0252      	lsls	r2, r2, #9
 800179c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800179e:	4b13      	ldr	r3, [pc, #76]	; (80017ec <MX_USART4_UART_Init+0x60>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <MX_USART4_UART_Init+0x60>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <MX_USART4_UART_Init+0x60>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80017b0:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <MX_USART4_UART_Init+0x60>)
 80017b2:	220c      	movs	r2, #12
 80017b4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b6:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <MX_USART4_UART_Init+0x60>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <MX_USART4_UART_Init+0x60>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017c2:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <MX_USART4_UART_Init+0x60>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <MX_USART4_UART_Init+0x60>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ce:	4b07      	ldr	r3, [pc, #28]	; (80017ec <MX_USART4_UART_Init+0x60>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <MX_USART4_UART_Init+0x60>)
 80017d6:	0018      	movs	r0, r3
 80017d8:	f003 fc2c 	bl	8005034 <HAL_UART_Init>
 80017dc:	1e03      	subs	r3, r0, #0
 80017de:	d001      	beq.n	80017e4 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 80017e0:	f7ff f978 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80017e4:	46c0      	nop			; (mov r8, r8)
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	20000400 	.word	0x20000400
 80017f0:	40004c00 	.word	0x40004c00

080017f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017f4:	b590      	push	{r4, r7, lr}
 80017f6:	b093      	sub	sp, #76	; 0x4c
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	2334      	movs	r3, #52	; 0x34
 80017fe:	18fb      	adds	r3, r7, r3
 8001800:	0018      	movs	r0, r3
 8001802:	2314      	movs	r3, #20
 8001804:	001a      	movs	r2, r3
 8001806:	2100      	movs	r1, #0
 8001808:	f004 f8f2 	bl	80059f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800180c:	2418      	movs	r4, #24
 800180e:	193b      	adds	r3, r7, r4
 8001810:	0018      	movs	r0, r3
 8001812:	231c      	movs	r3, #28
 8001814:	001a      	movs	r2, r3
 8001816:	2100      	movs	r1, #0
 8001818:	f004 f8ea 	bl	80059f0 <memset>
  if(uartHandle->Instance==USART1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a3d      	ldr	r2, [pc, #244]	; (8001918 <HAL_UART_MspInit+0x124>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d13e      	bne.n	80018a4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001826:	193b      	adds	r3, r7, r4
 8001828:	2201      	movs	r2, #1
 800182a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800182c:	193b      	adds	r3, r7, r4
 800182e:	2200      	movs	r2, #0
 8001830:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001832:	193b      	adds	r3, r7, r4
 8001834:	0018      	movs	r0, r3
 8001836:	f002 f8d1 	bl	80039dc <HAL_RCCEx_PeriphCLKConfig>
 800183a:	1e03      	subs	r3, r0, #0
 800183c:	d001      	beq.n	8001842 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800183e:	f7ff f949 	bl	8000ad4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001842:	4b36      	ldr	r3, [pc, #216]	; (800191c <HAL_UART_MspInit+0x128>)
 8001844:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001846:	4b35      	ldr	r3, [pc, #212]	; (800191c <HAL_UART_MspInit+0x128>)
 8001848:	2180      	movs	r1, #128	; 0x80
 800184a:	01c9      	lsls	r1, r1, #7
 800184c:	430a      	orrs	r2, r1
 800184e:	641a      	str	r2, [r3, #64]	; 0x40
 8001850:	4b32      	ldr	r3, [pc, #200]	; (800191c <HAL_UART_MspInit+0x128>)
 8001852:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	01db      	lsls	r3, r3, #7
 8001858:	4013      	ands	r3, r2
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800185e:	4b2f      	ldr	r3, [pc, #188]	; (800191c <HAL_UART_MspInit+0x128>)
 8001860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001862:	4b2e      	ldr	r3, [pc, #184]	; (800191c <HAL_UART_MspInit+0x128>)
 8001864:	2104      	movs	r1, #4
 8001866:	430a      	orrs	r2, r1
 8001868:	635a      	str	r2, [r3, #52]	; 0x34
 800186a:	4b2c      	ldr	r3, [pc, #176]	; (800191c <HAL_UART_MspInit+0x128>)
 800186c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800186e:	2204      	movs	r2, #4
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Debug_Pin|USART1_RX_Debug_Pin;
 8001876:	2134      	movs	r1, #52	; 0x34
 8001878:	187b      	adds	r3, r7, r1
 800187a:	2230      	movs	r2, #48	; 0x30
 800187c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	187b      	adds	r3, r7, r1
 8001880:	2202      	movs	r2, #2
 8001882:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	187b      	adds	r3, r7, r1
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	187b      	adds	r3, r7, r1
 800188c:	2200      	movs	r2, #0
 800188e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001890:	187b      	adds	r3, r7, r1
 8001892:	2201      	movs	r2, #1
 8001894:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001896:	187b      	adds	r3, r7, r1
 8001898:	4a21      	ldr	r2, [pc, #132]	; (8001920 <HAL_UART_MspInit+0x12c>)
 800189a:	0019      	movs	r1, r3
 800189c:	0010      	movs	r0, r2
 800189e:	f001 f9c9 	bl	8002c34 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 80018a2:	e035      	b.n	8001910 <HAL_UART_MspInit+0x11c>
  else if(uartHandle->Instance==USART4)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a1e      	ldr	r2, [pc, #120]	; (8001924 <HAL_UART_MspInit+0x130>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d130      	bne.n	8001910 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART4_CLK_ENABLE();
 80018ae:	4b1b      	ldr	r3, [pc, #108]	; (800191c <HAL_UART_MspInit+0x128>)
 80018b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018b2:	4b1a      	ldr	r3, [pc, #104]	; (800191c <HAL_UART_MspInit+0x128>)
 80018b4:	2180      	movs	r1, #128	; 0x80
 80018b6:	0309      	lsls	r1, r1, #12
 80018b8:	430a      	orrs	r2, r1
 80018ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80018bc:	4b17      	ldr	r3, [pc, #92]	; (800191c <HAL_UART_MspInit+0x128>)
 80018be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	031b      	lsls	r3, r3, #12
 80018c4:	4013      	ands	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <HAL_UART_MspInit+0x128>)
 80018cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ce:	4b13      	ldr	r3, [pc, #76]	; (800191c <HAL_UART_MspInit+0x128>)
 80018d0:	2104      	movs	r1, #4
 80018d2:	430a      	orrs	r2, r1
 80018d4:	635a      	str	r2, [r3, #52]	; 0x34
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <HAL_UART_MspInit+0x128>)
 80018d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018da:	2204      	movs	r2, #4
 80018dc:	4013      	ands	r3, r2
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART4_RX_LIDAR_Pin|USART4_TX_LIDAR_Pin;
 80018e2:	2134      	movs	r1, #52	; 0x34
 80018e4:	187b      	adds	r3, r7, r1
 80018e6:	22c0      	movs	r2, #192	; 0xc0
 80018e8:	0112      	lsls	r2, r2, #4
 80018ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	187b      	adds	r3, r7, r1
 80018ee:	2202      	movs	r2, #2
 80018f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	187b      	adds	r3, r7, r1
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f8:	187b      	adds	r3, r7, r1
 80018fa:	2200      	movs	r2, #0
 80018fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART4;
 80018fe:	187b      	adds	r3, r7, r1
 8001900:	2201      	movs	r2, #1
 8001902:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001904:	187b      	adds	r3, r7, r1
 8001906:	4a06      	ldr	r2, [pc, #24]	; (8001920 <HAL_UART_MspInit+0x12c>)
 8001908:	0019      	movs	r1, r3
 800190a:	0010      	movs	r0, r2
 800190c:	f001 f992 	bl	8002c34 <HAL_GPIO_Init>
}
 8001910:	46c0      	nop			; (mov r8, r8)
 8001912:	46bd      	mov	sp, r7
 8001914:	b013      	add	sp, #76	; 0x4c
 8001916:	bd90      	pop	{r4, r7, pc}
 8001918:	40013800 	.word	0x40013800
 800191c:	40021000 	.word	0x40021000
 8001920:	50000800 	.word	0x50000800
 8001924:	40004c00 	.word	0x40004c00

08001928 <Reset_Handler>:
 8001928:	480d      	ldr	r0, [pc, #52]	; (8001960 <LoopForever+0x2>)
 800192a:	4685      	mov	sp, r0
 800192c:	f7ff f9fa 	bl	8000d24 <SystemInit>
 8001930:	480c      	ldr	r0, [pc, #48]	; (8001964 <LoopForever+0x6>)
 8001932:	490d      	ldr	r1, [pc, #52]	; (8001968 <LoopForever+0xa>)
 8001934:	4a0d      	ldr	r2, [pc, #52]	; (800196c <LoopForever+0xe>)
 8001936:	2300      	movs	r3, #0
 8001938:	e002      	b.n	8001940 <LoopCopyDataInit>

0800193a <CopyDataInit>:
 800193a:	58d4      	ldr	r4, [r2, r3]
 800193c:	50c4      	str	r4, [r0, r3]
 800193e:	3304      	adds	r3, #4

08001940 <LoopCopyDataInit>:
 8001940:	18c4      	adds	r4, r0, r3
 8001942:	428c      	cmp	r4, r1
 8001944:	d3f9      	bcc.n	800193a <CopyDataInit>
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <LoopForever+0x12>)
 8001948:	4c0a      	ldr	r4, [pc, #40]	; (8001974 <LoopForever+0x16>)
 800194a:	2300      	movs	r3, #0
 800194c:	e001      	b.n	8001952 <LoopFillZerobss>

0800194e <FillZerobss>:
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	3204      	adds	r2, #4

08001952 <LoopFillZerobss>:
 8001952:	42a2      	cmp	r2, r4
 8001954:	d3fb      	bcc.n	800194e <FillZerobss>
 8001956:	f004 f853 	bl	8005a00 <__libc_init_array>
 800195a:	f7ff f831 	bl	80009c0 <main>

0800195e <LoopForever>:
 800195e:	e7fe      	b.n	800195e <LoopForever>
 8001960:	20009000 	.word	0x20009000
 8001964:	20000000 	.word	0x20000000
 8001968:	2000000c 	.word	0x2000000c
 800196c:	08005b44 	.word	0x08005b44
 8001970:	2000000c 	.word	0x2000000c
 8001974:	20000498 	.word	0x20000498

08001978 <ADC1_IRQHandler>:
 8001978:	e7fe      	b.n	8001978 <ADC1_IRQHandler>
	...

0800197c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001982:	1dfb      	adds	r3, r7, #7
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001988:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <HAL_Init+0x3c>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_Init+0x3c>)
 800198e:	2180      	movs	r1, #128	; 0x80
 8001990:	0049      	lsls	r1, r1, #1
 8001992:	430a      	orrs	r2, r1
 8001994:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001996:	2003      	movs	r0, #3
 8001998:	f000 f810 	bl	80019bc <HAL_InitTick>
 800199c:	1e03      	subs	r3, r0, #0
 800199e:	d003      	beq.n	80019a8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80019a0:	1dfb      	adds	r3, r7, #7
 80019a2:	2201      	movs	r2, #1
 80019a4:	701a      	strb	r2, [r3, #0]
 80019a6:	e001      	b.n	80019ac <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80019a8:	f7ff f924 	bl	8000bf4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019ac:	1dfb      	adds	r3, r7, #7
 80019ae:	781b      	ldrb	r3, [r3, #0]
}
 80019b0:	0018      	movs	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b002      	add	sp, #8
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40022000 	.word	0x40022000

080019bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019bc:	b590      	push	{r4, r7, lr}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019c4:	230f      	movs	r3, #15
 80019c6:	18fb      	adds	r3, r7, r3
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80019cc:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <HAL_InitTick+0x88>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d02b      	beq.n	8001a2c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80019d4:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <HAL_InitTick+0x8c>)
 80019d6:	681c      	ldr	r4, [r3, #0]
 80019d8:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <HAL_InitTick+0x88>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	0019      	movs	r1, r3
 80019de:	23fa      	movs	r3, #250	; 0xfa
 80019e0:	0098      	lsls	r0, r3, #2
 80019e2:	f7fe fb8d 	bl	8000100 <__udivsi3>
 80019e6:	0003      	movs	r3, r0
 80019e8:	0019      	movs	r1, r3
 80019ea:	0020      	movs	r0, r4
 80019ec:	f7fe fb88 	bl	8000100 <__udivsi3>
 80019f0:	0003      	movs	r3, r0
 80019f2:	0018      	movs	r0, r3
 80019f4:	f000 ff85 	bl	8002902 <HAL_SYSTICK_Config>
 80019f8:	1e03      	subs	r3, r0, #0
 80019fa:	d112      	bne.n	8001a22 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d80a      	bhi.n	8001a18 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	2301      	movs	r3, #1
 8001a06:	425b      	negs	r3, r3
 8001a08:	2200      	movs	r2, #0
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f000 ff54 	bl	80028b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a10:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <HAL_InitTick+0x90>)
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	e00d      	b.n	8001a34 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001a18:	230f      	movs	r3, #15
 8001a1a:	18fb      	adds	r3, r7, r3
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	701a      	strb	r2, [r3, #0]
 8001a20:	e008      	b.n	8001a34 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a22:	230f      	movs	r3, #15
 8001a24:	18fb      	adds	r3, r7, r3
 8001a26:	2201      	movs	r2, #1
 8001a28:	701a      	strb	r2, [r3, #0]
 8001a2a:	e003      	b.n	8001a34 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a2c:	230f      	movs	r3, #15
 8001a2e:	18fb      	adds	r3, r7, r3
 8001a30:	2201      	movs	r2, #1
 8001a32:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001a34:	230f      	movs	r3, #15
 8001a36:	18fb      	adds	r3, r7, r3
 8001a38:	781b      	ldrb	r3, [r3, #0]
}
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	b005      	add	sp, #20
 8001a40:	bd90      	pop	{r4, r7, pc}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	20000008 	.word	0x20000008
 8001a48:	20000000 	.word	0x20000000
 8001a4c:	20000004 	.word	0x20000004

08001a50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <HAL_IncTick+0x1c>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	001a      	movs	r2, r3
 8001a5a:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_IncTick+0x20>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	18d2      	adds	r2, r2, r3
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <HAL_IncTick+0x20>)
 8001a62:	601a      	str	r2, [r3, #0]
}
 8001a64:	46c0      	nop			; (mov r8, r8)
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	20000008 	.word	0x20000008
 8001a70:	20000494 	.word	0x20000494

08001a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  return uwTick;
 8001a78:	4b02      	ldr	r3, [pc, #8]	; (8001a84 <HAL_GetTick+0x10>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
}
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	20000494 	.word	0x20000494

08001a88 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a06      	ldr	r2, [pc, #24]	; (8001ab0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	0019      	movs	r1, r3
 8001a9a:	4b04      	ldr	r3, [pc, #16]	; (8001aac <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	601a      	str	r2, [r3, #0]
}
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	b002      	add	sp, #8
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	40010000 	.word	0x40010000
 8001ab0:	fffff9ff 	.word	0xfffff9ff

08001ab4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a05      	ldr	r2, [pc, #20]	; (8001ad8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001ac4:	401a      	ands	r2, r3
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	601a      	str	r2, [r3, #0]
}
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	b002      	add	sp, #8
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	fe3fffff 	.word	0xfe3fffff

08001adc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	23e0      	movs	r3, #224	; 0xe0
 8001aea:	045b      	lsls	r3, r3, #17
 8001aec:	4013      	ands	r3, r2
}
 8001aee:	0018      	movs	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	b002      	add	sp, #8
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b084      	sub	sp, #16
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	2104      	movs	r1, #4
 8001b0a:	400a      	ands	r2, r1
 8001b0c:	2107      	movs	r1, #7
 8001b0e:	4091      	lsls	r1, r2
 8001b10:	000a      	movs	r2, r1
 8001b12:	43d2      	mvns	r2, r2
 8001b14:	401a      	ands	r2, r3
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2104      	movs	r1, #4
 8001b1a:	400b      	ands	r3, r1
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	4099      	lsls	r1, r3
 8001b20:	000b      	movs	r3, r1
 8001b22:	431a      	orrs	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001b28:	46c0      	nop			; (mov r8, r8)
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	b004      	add	sp, #16
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	2104      	movs	r1, #4
 8001b42:	400a      	ands	r2, r1
 8001b44:	2107      	movs	r1, #7
 8001b46:	4091      	lsls	r1, r2
 8001b48:	000a      	movs	r2, r1
 8001b4a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	2104      	movs	r1, #4
 8001b50:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001b52:	40da      	lsrs	r2, r3
 8001b54:	0013      	movs	r3, r2
}
 8001b56:	0018      	movs	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	b002      	add	sp, #8
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b084      	sub	sp, #16
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	60f8      	str	r0, [r7, #12]
 8001b66:	60b9      	str	r1, [r7, #8]
 8001b68:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	211f      	movs	r1, #31
 8001b72:	400a      	ands	r2, r1
 8001b74:	210f      	movs	r1, #15
 8001b76:	4091      	lsls	r1, r2
 8001b78:	000a      	movs	r2, r1
 8001b7a:	43d2      	mvns	r2, r2
 8001b7c:	401a      	ands	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	0e9b      	lsrs	r3, r3, #26
 8001b82:	210f      	movs	r1, #15
 8001b84:	4019      	ands	r1, r3
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	201f      	movs	r0, #31
 8001b8a:	4003      	ands	r3, r0
 8001b8c:	4099      	lsls	r1, r3
 8001b8e:	000b      	movs	r3, r1
 8001b90:	431a      	orrs	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	b004      	add	sp, #16
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	035b      	lsls	r3, r3, #13
 8001bb0:	0b5b      	lsrs	r3, r3, #13
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bb8:	46c0      	nop			; (mov r8, r8)
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	b002      	add	sp, #8
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	0352      	lsls	r2, r2, #13
 8001bd2:	0b52      	lsrs	r2, r2, #13
 8001bd4:	43d2      	mvns	r2, r2
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bdc:	46c0      	nop			; (mov r8, r8)
 8001bde:	46bd      	mov	sp, r7
 8001be0:	b002      	add	sp, #8
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	68ba      	ldr	r2, [r7, #8]
 8001bf6:	0212      	lsls	r2, r2, #8
 8001bf8:	43d2      	mvns	r2, r2
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	021b      	lsls	r3, r3, #8
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	400b      	ands	r3, r1
 8001c04:	4904      	ldr	r1, [pc, #16]	; (8001c18 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001c06:	400b      	ands	r3, r1
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	46bd      	mov	sp, r7
 8001c12:	b004      	add	sp, #16
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	07ffff00 	.word	0x07ffff00

08001c1c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	4a05      	ldr	r2, [pc, #20]	; (8001c40 <LL_ADC_EnableInternalRegulator+0x24>)
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	2280      	movs	r2, #128	; 0x80
 8001c2e:	0552      	lsls	r2, r2, #21
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	b002      	add	sp, #8
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	6fffffe8 	.word	0x6fffffe8

08001c44 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	055b      	lsls	r3, r3, #21
 8001c54:	401a      	ands	r2, r3
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	055b      	lsls	r3, r3, #21
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d101      	bne.n	8001c62 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	0018      	movs	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b002      	add	sp, #8
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <LL_ADC_Disable+0x20>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001c84:	46c0      	nop			; (mov r8, r8)
 8001c86:	46bd      	mov	sp, r7
 8001c88:	b002      	add	sp, #8
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	7fffffe8 	.word	0x7fffffe8

08001c90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d101      	bne.n	8001ca8 <LL_ADC_IsEnabled+0x18>
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e000      	b.n	8001caa <LL_ADC_IsEnabled+0x1a>
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	0018      	movs	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	b002      	add	sp, #8
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d101      	bne.n	8001cca <LL_ADC_IsDisableOngoing+0x18>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <LL_ADC_IsDisableOngoing+0x1a>
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	0018      	movs	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	b002      	add	sp, #8
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2204      	movs	r2, #4
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	d101      	bne.n	8001cec <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	0018      	movs	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	b002      	add	sp, #8
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d00:	231f      	movs	r3, #31
 8001d02:	18fb      	adds	r3, r7, r3
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e17f      	b.n	800201e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10a      	bne.n	8001d3c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f7fe fcb9 	bl	80006a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2254      	movs	r2, #84	; 0x54
 8001d38:	2100      	movs	r1, #0
 8001d3a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	0018      	movs	r0, r3
 8001d42:	f7ff ff7f 	bl	8001c44 <LL_ADC_IsInternalRegulatorEnabled>
 8001d46:	1e03      	subs	r3, r0, #0
 8001d48:	d115      	bne.n	8001d76 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	0018      	movs	r0, r3
 8001d50:	f7ff ff64 	bl	8001c1c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d54:	4bb4      	ldr	r3, [pc, #720]	; (8002028 <HAL_ADC_Init+0x330>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	49b4      	ldr	r1, [pc, #720]	; (800202c <HAL_ADC_Init+0x334>)
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f7fe f9d0 	bl	8000100 <__udivsi3>
 8001d60:	0003      	movs	r3, r0
 8001d62:	3301      	adds	r3, #1
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d68:	e002      	b.n	8001d70 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f9      	bne.n	8001d6a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f7ff ff62 	bl	8001c44 <LL_ADC_IsInternalRegulatorEnabled>
 8001d80:	1e03      	subs	r3, r0, #0
 8001d82:	d10f      	bne.n	8001da4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d88:	2210      	movs	r2, #16
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d94:	2201      	movs	r2, #1
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d9c:	231f      	movs	r3, #31
 8001d9e:	18fb      	adds	r3, r7, r3
 8001da0:	2201      	movs	r2, #1
 8001da2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	0018      	movs	r0, r3
 8001daa:	f7ff ff93 	bl	8001cd4 <LL_ADC_REG_IsConversionOngoing>
 8001dae:	0003      	movs	r3, r0
 8001db0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db6:	2210      	movs	r2, #16
 8001db8:	4013      	ands	r3, r2
 8001dba:	d000      	beq.n	8001dbe <HAL_ADC_Init+0xc6>
 8001dbc:	e122      	b.n	8002004 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d000      	beq.n	8001dc6 <HAL_ADC_Init+0xce>
 8001dc4:	e11e      	b.n	8002004 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dca:	4a99      	ldr	r2, [pc, #612]	; (8002030 <HAL_ADC_Init+0x338>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	2202      	movs	r2, #2
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f7ff ff58 	bl	8001c90 <LL_ADC_IsEnabled>
 8001de0:	1e03      	subs	r3, r0, #0
 8001de2:	d000      	beq.n	8001de6 <HAL_ADC_Init+0xee>
 8001de4:	e0ad      	b.n	8001f42 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	7e1b      	ldrb	r3, [r3, #24]
 8001dee:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001df0:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	7e5b      	ldrb	r3, [r3, #25]
 8001df6:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001df8:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	7e9b      	ldrb	r3, [r3, #26]
 8001dfe:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001e00:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d002      	beq.n	8001e10 <HAL_ADC_Init+0x118>
 8001e0a:	2380      	movs	r3, #128	; 0x80
 8001e0c:	015b      	lsls	r3, r3, #5
 8001e0e:	e000      	b.n	8001e12 <HAL_ADC_Init+0x11a>
 8001e10:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001e12:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001e18:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	da04      	bge.n	8001e2c <HAL_ADC_Init+0x134>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	085b      	lsrs	r3, r3, #1
 8001e2a:	e001      	b.n	8001e30 <HAL_ADC_Init+0x138>
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001e30:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	212c      	movs	r1, #44	; 0x2c
 8001e36:	5c5b      	ldrb	r3, [r3, r1]
 8001e38:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001e3a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2220      	movs	r2, #32
 8001e46:	5c9b      	ldrb	r3, [r3, r2]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d115      	bne.n	8001e78 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7e9b      	ldrb	r3, [r3, #26]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d105      	bne.n	8001e60 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	2280      	movs	r2, #128	; 0x80
 8001e58:	0252      	lsls	r2, r2, #9
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
 8001e5e:	e00b      	b.n	8001e78 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e64:	2220      	movs	r2, #32
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e70:	2201      	movs	r2, #1
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00a      	beq.n	8001e96 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e84:	23e0      	movs	r3, #224	; 0xe0
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	4a65      	ldr	r2, [pc, #404]	; (8002034 <HAL_ADC_Init+0x33c>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	0019      	movs	r1, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	0f9b      	lsrs	r3, r3, #30
 8001eb2:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	223c      	movs	r2, #60	; 0x3c
 8001ec4:	5c9b      	ldrb	r3, [r3, r2]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d111      	bne.n	8001eee <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	0f9b      	lsrs	r3, r3, #30
 8001ed0:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001ed6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001edc:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001ee2:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	2201      	movs	r2, #1
 8001eea:	4313      	orrs	r3, r2
 8001eec:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	4a50      	ldr	r2, [pc, #320]	; (8002038 <HAL_ADC_Init+0x340>)
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	0019      	movs	r1, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	23c0      	movs	r3, #192	; 0xc0
 8001f0a:	061b      	lsls	r3, r3, #24
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d018      	beq.n	8001f42 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001f14:	2380      	movs	r3, #128	; 0x80
 8001f16:	05db      	lsls	r3, r3, #23
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d012      	beq.n	8001f42 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001f20:	2380      	movs	r3, #128	; 0x80
 8001f22:	061b      	lsls	r3, r3, #24
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d00c      	beq.n	8001f42 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001f28:	4b44      	ldr	r3, [pc, #272]	; (800203c <HAL_ADC_Init+0x344>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a44      	ldr	r2, [pc, #272]	; (8002040 <HAL_ADC_Init+0x348>)
 8001f2e:	4013      	ands	r3, r2
 8001f30:	0019      	movs	r1, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	23f0      	movs	r3, #240	; 0xf0
 8001f38:	039b      	lsls	r3, r3, #14
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	4b3f      	ldr	r3, [pc, #252]	; (800203c <HAL_ADC_Init+0x344>)
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6818      	ldr	r0, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f4a:	001a      	movs	r2, r3
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	f7ff fdd2 	bl	8001af6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5a:	493a      	ldr	r1, [pc, #232]	; (8002044 <HAL_ADC_Init+0x34c>)
 8001f5c:	001a      	movs	r2, r3
 8001f5e:	f7ff fdca 	bl	8001af6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d109      	bne.n	8001f7e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2110      	movs	r1, #16
 8001f76:	4249      	negs	r1, r1
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	629a      	str	r2, [r3, #40]	; 0x28
 8001f7c:	e018      	b.n	8001fb0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691a      	ldr	r2, [r3, #16]
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	039b      	lsls	r3, r3, #14
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d112      	bne.n	8001fb0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	3b01      	subs	r3, #1
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	221c      	movs	r2, #28
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2210      	movs	r2, #16
 8001f9e:	4252      	negs	r2, r2
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	0011      	movs	r1, r2
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	f7ff fdba 	bl	8001b30 <LL_ADC_GetSamplingTimeCommonChannels>
 8001fbc:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d10b      	bne.n	8001fde <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	4393      	bics	r3, r2
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001fdc:	e01c      	b.n	8002018 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe2:	2212      	movs	r2, #18
 8001fe4:	4393      	bics	r3, r2
 8001fe6:	2210      	movs	r2, #16
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001ffa:	231f      	movs	r3, #31
 8001ffc:	18fb      	adds	r3, r7, r3
 8001ffe:	2201      	movs	r2, #1
 8002000:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002002:	e009      	b.n	8002018 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002008:	2210      	movs	r2, #16
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002010:	231f      	movs	r3, #31
 8002012:	18fb      	adds	r3, r7, r3
 8002014:	2201      	movs	r2, #1
 8002016:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002018:	231f      	movs	r3, #31
 800201a:	18fb      	adds	r3, r7, r3
 800201c:	781b      	ldrb	r3, [r3, #0]
}
 800201e:	0018      	movs	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	b008      	add	sp, #32
 8002024:	bd80      	pop	{r7, pc}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	20000000 	.word	0x20000000
 800202c:	00030d40 	.word	0x00030d40
 8002030:	fffffefd 	.word	0xfffffefd
 8002034:	fffe0201 	.word	0xfffe0201
 8002038:	1ffffc02 	.word	0x1ffffc02
 800203c:	40012708 	.word	0x40012708
 8002040:	ffc3ffff 	.word	0xffc3ffff
 8002044:	07ffff04 	.word	0x07ffff04

08002048 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002052:	2317      	movs	r3, #23
 8002054:	18fb      	adds	r3, r7, r3
 8002056:	2200      	movs	r2, #0
 8002058:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2254      	movs	r2, #84	; 0x54
 8002062:	5c9b      	ldrb	r3, [r3, r2]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_ADC_ConfigChannel+0x24>
 8002068:	2302      	movs	r3, #2
 800206a:	e1c0      	b.n	80023ee <HAL_ADC_ConfigChannel+0x3a6>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2254      	movs	r2, #84	; 0x54
 8002070:	2101      	movs	r1, #1
 8002072:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	0018      	movs	r0, r3
 800207a:	f7ff fe2b 	bl	8001cd4 <LL_ADC_REG_IsConversionOngoing>
 800207e:	1e03      	subs	r3, r0, #0
 8002080:	d000      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x3c>
 8002082:	e1a3      	b.n	80023cc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b02      	cmp	r3, #2
 800208a:	d100      	bne.n	800208e <HAL_ADC_ConfigChannel+0x46>
 800208c:	e143      	b.n	8002316 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691a      	ldr	r2, [r3, #16]
 8002092:	2380      	movs	r3, #128	; 0x80
 8002094:	061b      	lsls	r3, r3, #24
 8002096:	429a      	cmp	r2, r3
 8002098:	d004      	beq.n	80020a4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800209e:	4ac1      	ldr	r2, [pc, #772]	; (80023a4 <HAL_ADC_ConfigChannel+0x35c>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d108      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	0019      	movs	r1, r3
 80020ae:	0010      	movs	r0, r2
 80020b0:	f7ff fd75 	bl	8001b9e <LL_ADC_REG_SetSequencerChAdd>
 80020b4:	e0c9      	b.n	800224a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	211f      	movs	r1, #31
 80020c0:	400b      	ands	r3, r1
 80020c2:	210f      	movs	r1, #15
 80020c4:	4099      	lsls	r1, r3
 80020c6:	000b      	movs	r3, r1
 80020c8:	43db      	mvns	r3, r3
 80020ca:	4013      	ands	r3, r2
 80020cc:	0019      	movs	r1, r3
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	035b      	lsls	r3, r3, #13
 80020d4:	0b5b      	lsrs	r3, r3, #13
 80020d6:	d105      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x9c>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	0e9b      	lsrs	r3, r3, #26
 80020de:	221f      	movs	r2, #31
 80020e0:	4013      	ands	r3, r2
 80020e2:	e098      	b.n	8002216 <HAL_ADC_ConfigChannel+0x1ce>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2201      	movs	r2, #1
 80020ea:	4013      	ands	r3, r2
 80020ec:	d000      	beq.n	80020f0 <HAL_ADC_ConfigChannel+0xa8>
 80020ee:	e091      	b.n	8002214 <HAL_ADC_ConfigChannel+0x1cc>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2202      	movs	r2, #2
 80020f6:	4013      	ands	r3, r2
 80020f8:	d000      	beq.n	80020fc <HAL_ADC_ConfigChannel+0xb4>
 80020fa:	e089      	b.n	8002210 <HAL_ADC_ConfigChannel+0x1c8>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2204      	movs	r2, #4
 8002102:	4013      	ands	r3, r2
 8002104:	d000      	beq.n	8002108 <HAL_ADC_ConfigChannel+0xc0>
 8002106:	e081      	b.n	800220c <HAL_ADC_ConfigChannel+0x1c4>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2208      	movs	r2, #8
 800210e:	4013      	ands	r3, r2
 8002110:	d000      	beq.n	8002114 <HAL_ADC_ConfigChannel+0xcc>
 8002112:	e079      	b.n	8002208 <HAL_ADC_ConfigChannel+0x1c0>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2210      	movs	r2, #16
 800211a:	4013      	ands	r3, r2
 800211c:	d000      	beq.n	8002120 <HAL_ADC_ConfigChannel+0xd8>
 800211e:	e071      	b.n	8002204 <HAL_ADC_ConfigChannel+0x1bc>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2220      	movs	r2, #32
 8002126:	4013      	ands	r3, r2
 8002128:	d000      	beq.n	800212c <HAL_ADC_ConfigChannel+0xe4>
 800212a:	e069      	b.n	8002200 <HAL_ADC_ConfigChannel+0x1b8>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2240      	movs	r2, #64	; 0x40
 8002132:	4013      	ands	r3, r2
 8002134:	d000      	beq.n	8002138 <HAL_ADC_ConfigChannel+0xf0>
 8002136:	e061      	b.n	80021fc <HAL_ADC_ConfigChannel+0x1b4>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2280      	movs	r2, #128	; 0x80
 800213e:	4013      	ands	r3, r2
 8002140:	d000      	beq.n	8002144 <HAL_ADC_ConfigChannel+0xfc>
 8002142:	e059      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x1b0>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	4013      	ands	r3, r2
 800214e:	d151      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x1ac>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	2380      	movs	r3, #128	; 0x80
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4013      	ands	r3, r2
 800215a:	d149      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x1a8>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	2380      	movs	r3, #128	; 0x80
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4013      	ands	r3, r2
 8002166:	d141      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x1a4>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	2380      	movs	r3, #128	; 0x80
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	4013      	ands	r3, r2
 8002172:	d139      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x1a0>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	2380      	movs	r3, #128	; 0x80
 800217a:	015b      	lsls	r3, r3, #5
 800217c:	4013      	ands	r3, r2
 800217e:	d131      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x19c>
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	019b      	lsls	r3, r3, #6
 8002188:	4013      	ands	r3, r2
 800218a:	d129      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x198>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	2380      	movs	r3, #128	; 0x80
 8002192:	01db      	lsls	r3, r3, #7
 8002194:	4013      	ands	r3, r2
 8002196:	d121      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x194>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	2380      	movs	r3, #128	; 0x80
 800219e:	021b      	lsls	r3, r3, #8
 80021a0:	4013      	ands	r3, r2
 80021a2:	d119      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x190>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	025b      	lsls	r3, r3, #9
 80021ac:	4013      	ands	r3, r2
 80021ae:	d111      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x18c>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	2380      	movs	r3, #128	; 0x80
 80021b6:	029b      	lsls	r3, r3, #10
 80021b8:	4013      	ands	r3, r2
 80021ba:	d109      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x188>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	2380      	movs	r3, #128	; 0x80
 80021c2:	02db      	lsls	r3, r3, #11
 80021c4:	4013      	ands	r3, r2
 80021c6:	d001      	beq.n	80021cc <HAL_ADC_ConfigChannel+0x184>
 80021c8:	2312      	movs	r3, #18
 80021ca:	e024      	b.n	8002216 <HAL_ADC_ConfigChannel+0x1ce>
 80021cc:	2300      	movs	r3, #0
 80021ce:	e022      	b.n	8002216 <HAL_ADC_ConfigChannel+0x1ce>
 80021d0:	2311      	movs	r3, #17
 80021d2:	e020      	b.n	8002216 <HAL_ADC_ConfigChannel+0x1ce>
 80021d4:	2310      	movs	r3, #16
 80021d6:	e01e      	b.n	8002216 <HAL_ADC_ConfigChannel+0x1ce>
 80021d8:	230f      	movs	r3, #15
 80021da:	e01c      	b.n	8002216 <HAL_ADC_ConfigChannel+0x1ce>
 80021dc:	230e      	movs	r3, #14
 80021de:	e01a      	b.n	8002216 <HAL_ADC_ConfigChannel+0x1ce>
 80021e0:	230d      	movs	r3, #13
 80021e2:	e018      	b.n	8002216 <HAL_ADC_ConfigChannel+0x1ce>
 80021e4:	230c      	movs	r3, #12
 80021e6:	e016      	b.n	8002216 <HAL_ADC_ConfigChannel+0x1ce>
 80021e8:	230b      	movs	r3, #11
 80021ea:	e014      	b.n	8002216 <HAL_ADC_ConfigChannel+0x1ce>
 80021ec:	230a      	movs	r3, #10
 80021ee:	e012      	b.n	8002216 <HAL_ADC_ConfigChannel+0x1ce>
 80021f0:	2309      	movs	r3, #9
 80021f2:	e010      	b.n	8002216 <HAL_ADC_ConfigChannel+0x1ce>
 80021f4:	2308      	movs	r3, #8
 80021f6:	e00e      	b.n	8002216 <HAL_ADC_ConfigChannel+0x1ce>
 80021f8:	2307      	movs	r3, #7
 80021fa:	e00c      	b.n	8002216 <HAL_ADC_ConfigChannel+0x1ce>
 80021fc:	2306      	movs	r3, #6
 80021fe:	e00a      	b.n	8002216 <HAL_ADC_ConfigChannel+0x1ce>
 8002200:	2305      	movs	r3, #5
 8002202:	e008      	b.n	8002216 <HAL_ADC_ConfigChannel+0x1ce>
 8002204:	2304      	movs	r3, #4
 8002206:	e006      	b.n	8002216 <HAL_ADC_ConfigChannel+0x1ce>
 8002208:	2303      	movs	r3, #3
 800220a:	e004      	b.n	8002216 <HAL_ADC_ConfigChannel+0x1ce>
 800220c:	2302      	movs	r3, #2
 800220e:	e002      	b.n	8002216 <HAL_ADC_ConfigChannel+0x1ce>
 8002210:	2301      	movs	r3, #1
 8002212:	e000      	b.n	8002216 <HAL_ADC_ConfigChannel+0x1ce>
 8002214:	2300      	movs	r3, #0
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	6852      	ldr	r2, [r2, #4]
 800221a:	201f      	movs	r0, #31
 800221c:	4002      	ands	r2, r0
 800221e:	4093      	lsls	r3, r2
 8002220:	000a      	movs	r2, r1
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	089b      	lsrs	r3, r3, #2
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	429a      	cmp	r2, r3
 8002236:	d808      	bhi.n	800224a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	6859      	ldr	r1, [r3, #4]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	001a      	movs	r2, r3
 8002246:	f7ff fc8a 	bl	8001b5e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6818      	ldr	r0, [r3, #0]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	6819      	ldr	r1, [r3, #0]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	001a      	movs	r2, r3
 8002258:	f7ff fcc4 	bl	8001be4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	db00      	blt.n	8002266 <HAL_ADC_ConfigChannel+0x21e>
 8002264:	e0bc      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002266:	4b50      	ldr	r3, [pc, #320]	; (80023a8 <HAL_ADC_ConfigChannel+0x360>)
 8002268:	0018      	movs	r0, r3
 800226a:	f7ff fc37 	bl	8001adc <LL_ADC_GetCommonPathInternalCh>
 800226e:	0003      	movs	r3, r0
 8002270:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a4d      	ldr	r2, [pc, #308]	; (80023ac <HAL_ADC_ConfigChannel+0x364>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d122      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	2380      	movs	r3, #128	; 0x80
 8002280:	041b      	lsls	r3, r3, #16
 8002282:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002284:	d11d      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	2280      	movs	r2, #128	; 0x80
 800228a:	0412      	lsls	r2, r2, #16
 800228c:	4313      	orrs	r3, r2
 800228e:	4a46      	ldr	r2, [pc, #280]	; (80023a8 <HAL_ADC_ConfigChannel+0x360>)
 8002290:	0019      	movs	r1, r3
 8002292:	0010      	movs	r0, r2
 8002294:	f7ff fc0e 	bl	8001ab4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002298:	4b45      	ldr	r3, [pc, #276]	; (80023b0 <HAL_ADC_ConfigChannel+0x368>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4945      	ldr	r1, [pc, #276]	; (80023b4 <HAL_ADC_ConfigChannel+0x36c>)
 800229e:	0018      	movs	r0, r3
 80022a0:	f7fd ff2e 	bl	8000100 <__udivsi3>
 80022a4:	0003      	movs	r3, r0
 80022a6:	1c5a      	adds	r2, r3, #1
 80022a8:	0013      	movs	r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	189b      	adds	r3, r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80022b2:	e002      	b.n	80022ba <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1f9      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80022c0:	e08e      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a3c      	ldr	r2, [pc, #240]	; (80023b8 <HAL_ADC_ConfigChannel+0x370>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d10e      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	045b      	lsls	r3, r3, #17
 80022d2:	4013      	ands	r3, r2
 80022d4:	d109      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	2280      	movs	r2, #128	; 0x80
 80022da:	0452      	lsls	r2, r2, #17
 80022dc:	4313      	orrs	r3, r2
 80022de:	4a32      	ldr	r2, [pc, #200]	; (80023a8 <HAL_ADC_ConfigChannel+0x360>)
 80022e0:	0019      	movs	r1, r3
 80022e2:	0010      	movs	r0, r2
 80022e4:	f7ff fbe6 	bl	8001ab4 <LL_ADC_SetCommonPathInternalCh>
 80022e8:	e07a      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a33      	ldr	r2, [pc, #204]	; (80023bc <HAL_ADC_ConfigChannel+0x374>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d000      	beq.n	80022f6 <HAL_ADC_ConfigChannel+0x2ae>
 80022f4:	e074      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	03db      	lsls	r3, r3, #15
 80022fc:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80022fe:	d000      	beq.n	8002302 <HAL_ADC_ConfigChannel+0x2ba>
 8002300:	e06e      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	2280      	movs	r2, #128	; 0x80
 8002306:	03d2      	lsls	r2, r2, #15
 8002308:	4313      	orrs	r3, r2
 800230a:	4a27      	ldr	r2, [pc, #156]	; (80023a8 <HAL_ADC_ConfigChannel+0x360>)
 800230c:	0019      	movs	r1, r3
 800230e:	0010      	movs	r0, r2
 8002310:	f7ff fbd0 	bl	8001ab4 <LL_ADC_SetCommonPathInternalCh>
 8002314:	e064      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691a      	ldr	r2, [r3, #16]
 800231a:	2380      	movs	r3, #128	; 0x80
 800231c:	061b      	lsls	r3, r3, #24
 800231e:	429a      	cmp	r2, r3
 8002320:	d004      	beq.n	800232c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002326:	4a1f      	ldr	r2, [pc, #124]	; (80023a4 <HAL_ADC_ConfigChannel+0x35c>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d107      	bne.n	800233c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	0019      	movs	r1, r3
 8002336:	0010      	movs	r0, r2
 8002338:	f7ff fc42 	bl	8001bc0 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	da4d      	bge.n	80023e0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002344:	4b18      	ldr	r3, [pc, #96]	; (80023a8 <HAL_ADC_ConfigChannel+0x360>)
 8002346:	0018      	movs	r0, r3
 8002348:	f7ff fbc8 	bl	8001adc <LL_ADC_GetCommonPathInternalCh>
 800234c:	0003      	movs	r3, r0
 800234e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a15      	ldr	r2, [pc, #84]	; (80023ac <HAL_ADC_ConfigChannel+0x364>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d108      	bne.n	800236c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4a18      	ldr	r2, [pc, #96]	; (80023c0 <HAL_ADC_ConfigChannel+0x378>)
 800235e:	4013      	ands	r3, r2
 8002360:	4a11      	ldr	r2, [pc, #68]	; (80023a8 <HAL_ADC_ConfigChannel+0x360>)
 8002362:	0019      	movs	r1, r3
 8002364:	0010      	movs	r0, r2
 8002366:	f7ff fba5 	bl	8001ab4 <LL_ADC_SetCommonPathInternalCh>
 800236a:	e039      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a11      	ldr	r2, [pc, #68]	; (80023b8 <HAL_ADC_ConfigChannel+0x370>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d108      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4a12      	ldr	r2, [pc, #72]	; (80023c4 <HAL_ADC_ConfigChannel+0x37c>)
 800237a:	4013      	ands	r3, r2
 800237c:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <HAL_ADC_ConfigChannel+0x360>)
 800237e:	0019      	movs	r1, r3
 8002380:	0010      	movs	r0, r2
 8002382:	f7ff fb97 	bl	8001ab4 <LL_ADC_SetCommonPathInternalCh>
 8002386:	e02b      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0b      	ldr	r2, [pc, #44]	; (80023bc <HAL_ADC_ConfigChannel+0x374>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d126      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4a0c      	ldr	r2, [pc, #48]	; (80023c8 <HAL_ADC_ConfigChannel+0x380>)
 8002396:	4013      	ands	r3, r2
 8002398:	4a03      	ldr	r2, [pc, #12]	; (80023a8 <HAL_ADC_ConfigChannel+0x360>)
 800239a:	0019      	movs	r1, r3
 800239c:	0010      	movs	r0, r2
 800239e:	f7ff fb89 	bl	8001ab4 <LL_ADC_SetCommonPathInternalCh>
 80023a2:	e01d      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x398>
 80023a4:	80000004 	.word	0x80000004
 80023a8:	40012708 	.word	0x40012708
 80023ac:	b0001000 	.word	0xb0001000
 80023b0:	20000000 	.word	0x20000000
 80023b4:	00030d40 	.word	0x00030d40
 80023b8:	b8004000 	.word	0xb8004000
 80023bc:	b4002000 	.word	0xb4002000
 80023c0:	ff7fffff 	.word	0xff7fffff
 80023c4:	feffffff 	.word	0xfeffffff
 80023c8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d0:	2220      	movs	r2, #32
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80023d8:	2317      	movs	r3, #23
 80023da:	18fb      	adds	r3, r7, r3
 80023dc:	2201      	movs	r2, #1
 80023de:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2254      	movs	r2, #84	; 0x54
 80023e4:	2100      	movs	r1, #0
 80023e6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80023e8:	2317      	movs	r3, #23
 80023ea:	18fb      	adds	r3, r7, r3
 80023ec:	781b      	ldrb	r3, [r3, #0]
}
 80023ee:	0018      	movs	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	b006      	add	sp, #24
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	46c0      	nop			; (mov r8, r8)

080023f8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	0018      	movs	r0, r3
 8002406:	f7ff fc54 	bl	8001cb2 <LL_ADC_IsDisableOngoing>
 800240a:	0003      	movs	r3, r0
 800240c:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	0018      	movs	r0, r3
 8002414:	f7ff fc3c 	bl	8001c90 <LL_ADC_IsEnabled>
 8002418:	1e03      	subs	r3, r0, #0
 800241a:	d046      	beq.n	80024aa <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d143      	bne.n	80024aa <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	2205      	movs	r2, #5
 800242a:	4013      	ands	r3, r2
 800242c:	2b01      	cmp	r3, #1
 800242e:	d10d      	bne.n	800244c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	0018      	movs	r0, r3
 8002436:	f7ff fc19 	bl	8001c6c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2203      	movs	r2, #3
 8002440:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002442:	f7ff fb17 	bl	8001a74 <HAL_GetTick>
 8002446:	0003      	movs	r3, r0
 8002448:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800244a:	e028      	b.n	800249e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002450:	2210      	movs	r2, #16
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245c:	2201      	movs	r2, #1
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e021      	b.n	80024ac <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002468:	f7ff fb04 	bl	8001a74 <HAL_GetTick>
 800246c:	0002      	movs	r2, r0
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d913      	bls.n	800249e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	2201      	movs	r2, #1
 800247e:	4013      	ands	r3, r2
 8002480:	d00d      	beq.n	800249e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002486:	2210      	movs	r2, #16
 8002488:	431a      	orrs	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002492:	2201      	movs	r2, #1
 8002494:	431a      	orrs	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e006      	b.n	80024ac <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2201      	movs	r2, #1
 80024a6:	4013      	ands	r3, r2
 80024a8:	d1de      	bne.n	8002468 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	0018      	movs	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	b004      	add	sp, #16
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <LL_ADC_SetCalibrationFactor>:
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	22b4      	movs	r2, #180	; 0xb4
 80024c2:	589b      	ldr	r3, [r3, r2]
 80024c4:	227f      	movs	r2, #127	; 0x7f
 80024c6:	4393      	bics	r3, r2
 80024c8:	001a      	movs	r2, r3
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	431a      	orrs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	21b4      	movs	r1, #180	; 0xb4
 80024d2:	505a      	str	r2, [r3, r1]
}
 80024d4:	46c0      	nop			; (mov r8, r8)
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b002      	add	sp, #8
 80024da:	bd80      	pop	{r7, pc}

080024dc <LL_ADC_GetCalibrationFactor>:
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	22b4      	movs	r2, #180	; 0xb4
 80024e8:	589b      	ldr	r3, [r3, r2]
 80024ea:	227f      	movs	r2, #127	; 0x7f
 80024ec:	4013      	ands	r3, r2
}
 80024ee:	0018      	movs	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	b002      	add	sp, #8
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <LL_ADC_Enable>:
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	4a04      	ldr	r2, [pc, #16]	; (8002518 <LL_ADC_Enable+0x20>)
 8002506:	4013      	ands	r3, r2
 8002508:	2201      	movs	r2, #1
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	609a      	str	r2, [r3, #8]
}
 8002510:	46c0      	nop			; (mov r8, r8)
 8002512:	46bd      	mov	sp, r7
 8002514:	b002      	add	sp, #8
 8002516:	bd80      	pop	{r7, pc}
 8002518:	7fffffe8 	.word	0x7fffffe8

0800251c <LL_ADC_Disable>:
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	4a04      	ldr	r2, [pc, #16]	; (800253c <LL_ADC_Disable+0x20>)
 800252a:	4013      	ands	r3, r2
 800252c:	2202      	movs	r2, #2
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	609a      	str	r2, [r3, #8]
}
 8002534:	46c0      	nop			; (mov r8, r8)
 8002536:	46bd      	mov	sp, r7
 8002538:	b002      	add	sp, #8
 800253a:	bd80      	pop	{r7, pc}
 800253c:	7fffffe8 	.word	0x7fffffe8

08002540 <LL_ADC_IsEnabled>:
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	2201      	movs	r2, #1
 800254e:	4013      	ands	r3, r2
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <LL_ADC_IsEnabled+0x18>
 8002554:	2301      	movs	r3, #1
 8002556:	e000      	b.n	800255a <LL_ADC_IsEnabled+0x1a>
 8002558:	2300      	movs	r3, #0
}
 800255a:	0018      	movs	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	b002      	add	sp, #8
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <LL_ADC_StartCalibration>:
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	4a05      	ldr	r2, [pc, #20]	; (8002588 <LL_ADC_StartCalibration+0x24>)
 8002572:	4013      	ands	r3, r2
 8002574:	2280      	movs	r2, #128	; 0x80
 8002576:	0612      	lsls	r2, r2, #24
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	609a      	str	r2, [r3, #8]
}
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	46bd      	mov	sp, r7
 8002582:	b002      	add	sp, #8
 8002584:	bd80      	pop	{r7, pc}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	7fffffe8 	.word	0x7fffffe8

0800258c <LL_ADC_IsCalibrationOnGoing>:
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	0fdb      	lsrs	r3, r3, #31
 800259a:	07da      	lsls	r2, r3, #31
 800259c:	2380      	movs	r3, #128	; 0x80
 800259e:	061b      	lsls	r3, r3, #24
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d101      	bne.n	80025a8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80025a4:	2301      	movs	r3, #1
 80025a6:	e000      	b.n	80025aa <LL_ADC_IsCalibrationOnGoing+0x1e>
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	0018      	movs	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	b002      	add	sp, #8
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80025b4:	b590      	push	{r4, r7, lr}
 80025b6:	b089      	sub	sp, #36	; 0x24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80025bc:	2300      	movs	r3, #0
 80025be:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2254      	movs	r2, #84	; 0x54
 80025c8:	5c9b      	ldrb	r3, [r3, r2]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <HAL_ADCEx_Calibration_Start+0x1e>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e0ba      	b.n	8002748 <HAL_ADCEx_Calibration_Start+0x194>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2254      	movs	r2, #84	; 0x54
 80025d6:	2101      	movs	r1, #1
 80025d8:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80025da:	2317      	movs	r3, #23
 80025dc:	18fc      	adds	r4, r7, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	0018      	movs	r0, r3
 80025e2:	f7ff ff09 	bl	80023f8 <ADC_Disable>
 80025e6:	0003      	movs	r3, r0
 80025e8:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	0018      	movs	r0, r3
 80025f0:	f7ff ffa6 	bl	8002540 <LL_ADC_IsEnabled>
 80025f4:	1e03      	subs	r3, r0, #0
 80025f6:	d000      	beq.n	80025fa <HAL_ADCEx_Calibration_Start+0x46>
 80025f8:	e099      	b.n	800272e <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fe:	4a54      	ldr	r2, [pc, #336]	; (8002750 <HAL_ADCEx_Calibration_Start+0x19c>)
 8002600:	4013      	ands	r3, r2
 8002602:	2202      	movs	r2, #2
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	4a50      	ldr	r2, [pc, #320]	; (8002754 <HAL_ADCEx_Calibration_Start+0x1a0>)
 8002612:	4013      	ands	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	494d      	ldr	r1, [pc, #308]	; (8002758 <HAL_ADCEx_Calibration_Start+0x1a4>)
 8002622:	400a      	ands	r2, r1
 8002624:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
 800262a:	e02d      	b.n	8002688 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	0018      	movs	r0, r3
 8002632:	f7ff ff97 	bl	8002564 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002636:	e014      	b.n	8002662 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	3301      	adds	r3, #1
 800263c:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	4a46      	ldr	r2, [pc, #280]	; (800275c <HAL_ADCEx_Calibration_Start+0x1a8>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d90d      	bls.n	8002662 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264a:	2212      	movs	r2, #18
 800264c:	4393      	bics	r3, r2
 800264e:	2210      	movs	r2, #16
 8002650:	431a      	orrs	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2254      	movs	r2, #84	; 0x54
 800265a:	2100      	movs	r1, #0
 800265c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e072      	b.n	8002748 <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	0018      	movs	r0, r3
 8002668:	f7ff ff90 	bl	800258c <LL_ADC_IsCalibrationOnGoing>
 800266c:	1e03      	subs	r3, r0, #0
 800266e:	d1e3      	bne.n	8002638 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	0018      	movs	r0, r3
 8002676:	f7ff ff31 	bl	80024dc <LL_ADC_GetCalibrationFactor>
 800267a:	0002      	movs	r2, r0
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	189b      	adds	r3, r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3301      	adds	r3, #1
 8002686:	61fb      	str	r3, [r7, #28]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	2b07      	cmp	r3, #7
 800268c:	d9ce      	bls.n	800262c <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800268e:	69f9      	ldr	r1, [r7, #28]
 8002690:	69b8      	ldr	r0, [r7, #24]
 8002692:	f7fd fd35 	bl	8000100 <__udivsi3>
 8002696:	0003      	movs	r3, r0
 8002698:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	0018      	movs	r0, r3
 80026a0:	f7ff ff2a 	bl	80024f8 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	0011      	movs	r1, r2
 80026ac:	0018      	movs	r0, r3
 80026ae:	f7ff ff01 	bl	80024b4 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	0018      	movs	r0, r3
 80026b8:	f7ff ff30 	bl	800251c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026bc:	f7ff f9da 	bl	8001a74 <HAL_GetTick>
 80026c0:	0003      	movs	r3, r0
 80026c2:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80026c4:	e01b      	b.n	80026fe <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026c6:	f7ff f9d5 	bl	8001a74 <HAL_GetTick>
 80026ca:	0002      	movs	r2, r0
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d914      	bls.n	80026fe <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	0018      	movs	r0, r3
 80026da:	f7ff ff31 	bl	8002540 <LL_ADC_IsEnabled>
 80026de:	1e03      	subs	r3, r0, #0
 80026e0:	d00d      	beq.n	80026fe <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e6:	2210      	movs	r2, #16
 80026e8:	431a      	orrs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f2:	2201      	movs	r2, #1
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e024      	b.n	8002748 <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	0018      	movs	r0, r3
 8002704:	f7ff ff1c 	bl	8002540 <LL_ADC_IsEnabled>
 8002708:	1e03      	subs	r3, r0, #0
 800270a:	d1dc      	bne.n	80026c6 <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68d9      	ldr	r1, [r3, #12]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	430a      	orrs	r2, r1
 800271a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002720:	2203      	movs	r2, #3
 8002722:	4393      	bics	r3, r2
 8002724:	2201      	movs	r2, #1
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	659a      	str	r2, [r3, #88]	; 0x58
 800272c:	e005      	b.n	800273a <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002732:	2210      	movs	r2, #16
 8002734:	431a      	orrs	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2254      	movs	r2, #84	; 0x54
 800273e:	2100      	movs	r1, #0
 8002740:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002742:	2317      	movs	r3, #23
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	781b      	ldrb	r3, [r3, #0]
}
 8002748:	0018      	movs	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	b009      	add	sp, #36	; 0x24
 800274e:	bd90      	pop	{r4, r7, pc}
 8002750:	fffffefd 	.word	0xfffffefd
 8002754:	00008003 	.word	0x00008003
 8002758:	ffff7ffc 	.word	0xffff7ffc
 800275c:	0002f1ff 	.word	0x0002f1ff

08002760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	0002      	movs	r2, r0
 8002768:	1dfb      	adds	r3, r7, #7
 800276a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800276c:	1dfb      	adds	r3, r7, #7
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b7f      	cmp	r3, #127	; 0x7f
 8002772:	d809      	bhi.n	8002788 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002774:	1dfb      	adds	r3, r7, #7
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	001a      	movs	r2, r3
 800277a:	231f      	movs	r3, #31
 800277c:	401a      	ands	r2, r3
 800277e:	4b04      	ldr	r3, [pc, #16]	; (8002790 <__NVIC_EnableIRQ+0x30>)
 8002780:	2101      	movs	r1, #1
 8002782:	4091      	lsls	r1, r2
 8002784:	000a      	movs	r2, r1
 8002786:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002788:	46c0      	nop			; (mov r8, r8)
 800278a:	46bd      	mov	sp, r7
 800278c:	b002      	add	sp, #8
 800278e:	bd80      	pop	{r7, pc}
 8002790:	e000e100 	.word	0xe000e100

08002794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002794:	b590      	push	{r4, r7, lr}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	0002      	movs	r2, r0
 800279c:	6039      	str	r1, [r7, #0]
 800279e:	1dfb      	adds	r3, r7, #7
 80027a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027a2:	1dfb      	adds	r3, r7, #7
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b7f      	cmp	r3, #127	; 0x7f
 80027a8:	d828      	bhi.n	80027fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027aa:	4a2f      	ldr	r2, [pc, #188]	; (8002868 <__NVIC_SetPriority+0xd4>)
 80027ac:	1dfb      	adds	r3, r7, #7
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	b25b      	sxtb	r3, r3
 80027b2:	089b      	lsrs	r3, r3, #2
 80027b4:	33c0      	adds	r3, #192	; 0xc0
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	589b      	ldr	r3, [r3, r2]
 80027ba:	1dfa      	adds	r2, r7, #7
 80027bc:	7812      	ldrb	r2, [r2, #0]
 80027be:	0011      	movs	r1, r2
 80027c0:	2203      	movs	r2, #3
 80027c2:	400a      	ands	r2, r1
 80027c4:	00d2      	lsls	r2, r2, #3
 80027c6:	21ff      	movs	r1, #255	; 0xff
 80027c8:	4091      	lsls	r1, r2
 80027ca:	000a      	movs	r2, r1
 80027cc:	43d2      	mvns	r2, r2
 80027ce:	401a      	ands	r2, r3
 80027d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	019b      	lsls	r3, r3, #6
 80027d6:	22ff      	movs	r2, #255	; 0xff
 80027d8:	401a      	ands	r2, r3
 80027da:	1dfb      	adds	r3, r7, #7
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	0018      	movs	r0, r3
 80027e0:	2303      	movs	r3, #3
 80027e2:	4003      	ands	r3, r0
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027e8:	481f      	ldr	r0, [pc, #124]	; (8002868 <__NVIC_SetPriority+0xd4>)
 80027ea:	1dfb      	adds	r3, r7, #7
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	b25b      	sxtb	r3, r3
 80027f0:	089b      	lsrs	r3, r3, #2
 80027f2:	430a      	orrs	r2, r1
 80027f4:	33c0      	adds	r3, #192	; 0xc0
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80027fa:	e031      	b.n	8002860 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027fc:	4a1b      	ldr	r2, [pc, #108]	; (800286c <__NVIC_SetPriority+0xd8>)
 80027fe:	1dfb      	adds	r3, r7, #7
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	0019      	movs	r1, r3
 8002804:	230f      	movs	r3, #15
 8002806:	400b      	ands	r3, r1
 8002808:	3b08      	subs	r3, #8
 800280a:	089b      	lsrs	r3, r3, #2
 800280c:	3306      	adds	r3, #6
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	18d3      	adds	r3, r2, r3
 8002812:	3304      	adds	r3, #4
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	1dfa      	adds	r2, r7, #7
 8002818:	7812      	ldrb	r2, [r2, #0]
 800281a:	0011      	movs	r1, r2
 800281c:	2203      	movs	r2, #3
 800281e:	400a      	ands	r2, r1
 8002820:	00d2      	lsls	r2, r2, #3
 8002822:	21ff      	movs	r1, #255	; 0xff
 8002824:	4091      	lsls	r1, r2
 8002826:	000a      	movs	r2, r1
 8002828:	43d2      	mvns	r2, r2
 800282a:	401a      	ands	r2, r3
 800282c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	019b      	lsls	r3, r3, #6
 8002832:	22ff      	movs	r2, #255	; 0xff
 8002834:	401a      	ands	r2, r3
 8002836:	1dfb      	adds	r3, r7, #7
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	0018      	movs	r0, r3
 800283c:	2303      	movs	r3, #3
 800283e:	4003      	ands	r3, r0
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002844:	4809      	ldr	r0, [pc, #36]	; (800286c <__NVIC_SetPriority+0xd8>)
 8002846:	1dfb      	adds	r3, r7, #7
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	001c      	movs	r4, r3
 800284c:	230f      	movs	r3, #15
 800284e:	4023      	ands	r3, r4
 8002850:	3b08      	subs	r3, #8
 8002852:	089b      	lsrs	r3, r3, #2
 8002854:	430a      	orrs	r2, r1
 8002856:	3306      	adds	r3, #6
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	18c3      	adds	r3, r0, r3
 800285c:	3304      	adds	r3, #4
 800285e:	601a      	str	r2, [r3, #0]
}
 8002860:	46c0      	nop			; (mov r8, r8)
 8002862:	46bd      	mov	sp, r7
 8002864:	b003      	add	sp, #12
 8002866:	bd90      	pop	{r4, r7, pc}
 8002868:	e000e100 	.word	0xe000e100
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	1e5a      	subs	r2, r3, #1
 800287c:	2380      	movs	r3, #128	; 0x80
 800287e:	045b      	lsls	r3, r3, #17
 8002880:	429a      	cmp	r2, r3
 8002882:	d301      	bcc.n	8002888 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002884:	2301      	movs	r3, #1
 8002886:	e010      	b.n	80028aa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002888:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <SysTick_Config+0x44>)
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	3a01      	subs	r2, #1
 800288e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002890:	2301      	movs	r3, #1
 8002892:	425b      	negs	r3, r3
 8002894:	2103      	movs	r1, #3
 8002896:	0018      	movs	r0, r3
 8002898:	f7ff ff7c 	bl	8002794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <SysTick_Config+0x44>)
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028a2:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <SysTick_Config+0x44>)
 80028a4:	2207      	movs	r2, #7
 80028a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	0018      	movs	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	b002      	add	sp, #8
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	46c0      	nop			; (mov r8, r8)
 80028b4:	e000e010 	.word	0xe000e010

080028b8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	607a      	str	r2, [r7, #4]
 80028c2:	210f      	movs	r1, #15
 80028c4:	187b      	adds	r3, r7, r1
 80028c6:	1c02      	adds	r2, r0, #0
 80028c8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	187b      	adds	r3, r7, r1
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	b25b      	sxtb	r3, r3
 80028d2:	0011      	movs	r1, r2
 80028d4:	0018      	movs	r0, r3
 80028d6:	f7ff ff5d 	bl	8002794 <__NVIC_SetPriority>
}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	46bd      	mov	sp, r7
 80028de:	b004      	add	sp, #16
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	0002      	movs	r2, r0
 80028ea:	1dfb      	adds	r3, r7, #7
 80028ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028ee:	1dfb      	adds	r3, r7, #7
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	b25b      	sxtb	r3, r3
 80028f4:	0018      	movs	r0, r3
 80028f6:	f7ff ff33 	bl	8002760 <__NVIC_EnableIRQ>
}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	46bd      	mov	sp, r7
 80028fe:	b002      	add	sp, #8
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b082      	sub	sp, #8
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	0018      	movs	r0, r3
 800290e:	f7ff ffaf 	bl	8002870 <SysTick_Config>
 8002912:	0003      	movs	r3, r0
}
 8002914:	0018      	movs	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	b002      	add	sp, #8
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e077      	b.n	8002a1e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a3d      	ldr	r2, [pc, #244]	; (8002a28 <HAL_DMA_Init+0x10c>)
 8002934:	4694      	mov	ip, r2
 8002936:	4463      	add	r3, ip
 8002938:	2114      	movs	r1, #20
 800293a:	0018      	movs	r0, r3
 800293c:	f7fd fbe0 	bl	8000100 <__udivsi3>
 8002940:	0003      	movs	r3, r0
 8002942:	009a      	lsls	r2, r3, #2
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2225      	movs	r2, #37	; 0x25
 800294c:	2102      	movs	r1, #2
 800294e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4934      	ldr	r1, [pc, #208]	; (8002a2c <HAL_DMA_Init+0x110>)
 800295c:	400a      	ands	r2, r1
 800295e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6819      	ldr	r1, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	431a      	orrs	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	431a      	orrs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	431a      	orrs	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	0018      	movs	r0, r3
 800299a:	f000 f8fb 	bl	8002b94 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	2380      	movs	r3, #128	; 0x80
 80029a4:	01db      	lsls	r3, r3, #7
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d102      	bne.n	80029b0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b8:	213f      	movs	r1, #63	; 0x3f
 80029ba:	400a      	ands	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80029c6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d011      	beq.n	80029f4 <HAL_DMA_Init+0xd8>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d80d      	bhi.n	80029f4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	0018      	movs	r0, r3
 80029dc:	f000 f906 	bl	8002bec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	e008      	b.n	8002a06 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2225      	movs	r2, #37	; 0x25
 8002a10:	2101      	movs	r1, #1
 8002a12:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2224      	movs	r2, #36	; 0x24
 8002a18:	2100      	movs	r1, #0
 8002a1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	0018      	movs	r0, r3
 8002a20:	46bd      	mov	sp, r7
 8002a22:	b002      	add	sp, #8
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	bffdfff8 	.word	0xbffdfff8
 8002a2c:	ffff800f 	.word	0xffff800f

08002a30 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002a38:	4b55      	ldr	r3, [pc, #340]	; (8002b90 <HAL_DMA_IRQHandler+0x160>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	221c      	movs	r2, #28
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2204      	movs	r2, #4
 8002a50:	409a      	lsls	r2, r3
 8002a52:	0013      	movs	r3, r2
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	4013      	ands	r3, r2
 8002a58:	d027      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x7a>
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d023      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d107      	bne.n	8002a7e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2104      	movs	r1, #4
 8002a7a:	438a      	bics	r2, r1
 8002a7c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002a7e:	4b44      	ldr	r3, [pc, #272]	; (8002b90 <HAL_DMA_IRQHandler+0x160>)
 8002a80:	6859      	ldr	r1, [r3, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	221c      	movs	r2, #28
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2204      	movs	r2, #4
 8002a8c:	409a      	lsls	r2, r3
 8002a8e:	4b40      	ldr	r3, [pc, #256]	; (8002b90 <HAL_DMA_IRQHandler+0x160>)
 8002a90:	430a      	orrs	r2, r1
 8002a92:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d100      	bne.n	8002a9e <HAL_DMA_IRQHandler+0x6e>
 8002a9c:	e073      	b.n	8002b86 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	0010      	movs	r0, r2
 8002aa6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002aa8:	e06d      	b.n	8002b86 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	221c      	movs	r2, #28
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	409a      	lsls	r2, r3
 8002ab6:	0013      	movs	r3, r2
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4013      	ands	r3, r2
 8002abc:	d02e      	beq.n	8002b1c <HAL_DMA_IRQHandler+0xec>
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d02a      	beq.n	8002b1c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2220      	movs	r2, #32
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d10b      	bne.n	8002aea <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	210a      	movs	r1, #10
 8002ade:	438a      	bics	r2, r1
 8002ae0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2225      	movs	r2, #37	; 0x25
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002aea:	4b29      	ldr	r3, [pc, #164]	; (8002b90 <HAL_DMA_IRQHandler+0x160>)
 8002aec:	6859      	ldr	r1, [r3, #4]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	221c      	movs	r2, #28
 8002af4:	4013      	ands	r3, r2
 8002af6:	2202      	movs	r2, #2
 8002af8:	409a      	lsls	r2, r3
 8002afa:	4b25      	ldr	r3, [pc, #148]	; (8002b90 <HAL_DMA_IRQHandler+0x160>)
 8002afc:	430a      	orrs	r2, r1
 8002afe:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2224      	movs	r2, #36	; 0x24
 8002b04:	2100      	movs	r1, #0
 8002b06:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d03a      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	0010      	movs	r0, r2
 8002b18:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002b1a:	e034      	b.n	8002b86 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	221c      	movs	r2, #28
 8002b22:	4013      	ands	r3, r2
 8002b24:	2208      	movs	r2, #8
 8002b26:	409a      	lsls	r2, r3
 8002b28:	0013      	movs	r3, r2
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	d02b      	beq.n	8002b88 <HAL_DMA_IRQHandler+0x158>
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	2208      	movs	r2, #8
 8002b34:	4013      	ands	r3, r2
 8002b36:	d027      	beq.n	8002b88 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	210e      	movs	r1, #14
 8002b44:	438a      	bics	r2, r1
 8002b46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002b48:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <HAL_DMA_IRQHandler+0x160>)
 8002b4a:	6859      	ldr	r1, [r3, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	221c      	movs	r2, #28
 8002b52:	4013      	ands	r3, r2
 8002b54:	2201      	movs	r2, #1
 8002b56:	409a      	lsls	r2, r3
 8002b58:	4b0d      	ldr	r3, [pc, #52]	; (8002b90 <HAL_DMA_IRQHandler+0x160>)
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2225      	movs	r2, #37	; 0x25
 8002b68:	2101      	movs	r1, #1
 8002b6a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2224      	movs	r2, #36	; 0x24
 8002b70:	2100      	movs	r1, #0
 8002b72:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d005      	beq.n	8002b88 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	0010      	movs	r0, r2
 8002b84:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	46c0      	nop			; (mov r8, r8)
}
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	b004      	add	sp, #16
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40020000 	.word	0x40020000

08002b94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	089b      	lsrs	r3, r3, #2
 8002ba2:	4a10      	ldr	r2, [pc, #64]	; (8002be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002ba4:	4694      	mov	ip, r2
 8002ba6:	4463      	add	r3, ip
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	001a      	movs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	001a      	movs	r2, r3
 8002bb6:	23ff      	movs	r3, #255	; 0xff
 8002bb8:	4013      	ands	r3, r2
 8002bba:	3b08      	subs	r3, #8
 8002bbc:	2114      	movs	r1, #20
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f7fd fa9e 	bl	8000100 <__udivsi3>
 8002bc4:	0003      	movs	r3, r0
 8002bc6:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a07      	ldr	r2, [pc, #28]	; (8002be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002bcc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	221f      	movs	r2, #31
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002bdc:	46c0      	nop			; (mov r8, r8)
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b004      	add	sp, #16
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	10008200 	.word	0x10008200
 8002be8:	40020880 	.word	0x40020880

08002bec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	223f      	movs	r2, #63	; 0x3f
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	4a0a      	ldr	r2, [pc, #40]	; (8002c2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002c02:	4694      	mov	ip, r2
 8002c04:	4463      	add	r3, ip
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	001a      	movs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a07      	ldr	r2, [pc, #28]	; (8002c30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002c12:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	2203      	movs	r2, #3
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002c24:	46c0      	nop			; (mov r8, r8)
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b004      	add	sp, #16
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	1000823f 	.word	0x1000823f
 8002c30:	40020940 	.word	0x40020940

08002c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c42:	e147      	b.n	8002ed4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2101      	movs	r1, #1
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	4091      	lsls	r1, r2
 8002c4e:	000a      	movs	r2, r1
 8002c50:	4013      	ands	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d100      	bne.n	8002c5c <HAL_GPIO_Init+0x28>
 8002c5a:	e138      	b.n	8002ece <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2203      	movs	r2, #3
 8002c62:	4013      	ands	r3, r2
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d005      	beq.n	8002c74 <HAL_GPIO_Init+0x40>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2203      	movs	r2, #3
 8002c6e:	4013      	ands	r3, r2
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d130      	bne.n	8002cd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	2203      	movs	r2, #3
 8002c80:	409a      	lsls	r2, r3
 8002c82:	0013      	movs	r3, r2
 8002c84:	43da      	mvns	r2, r3
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	409a      	lsls	r2, r3
 8002c96:	0013      	movs	r3, r2
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002caa:	2201      	movs	r2, #1
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	409a      	lsls	r2, r3
 8002cb0:	0013      	movs	r3, r2
 8002cb2:	43da      	mvns	r2, r3
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	091b      	lsrs	r3, r3, #4
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	401a      	ands	r2, r3
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	409a      	lsls	r2, r3
 8002cc8:	0013      	movs	r3, r2
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2203      	movs	r2, #3
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	d017      	beq.n	8002d12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	2203      	movs	r2, #3
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	0013      	movs	r3, r2
 8002cf2:	43da      	mvns	r2, r3
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	409a      	lsls	r2, r3
 8002d04:	0013      	movs	r3, r2
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2203      	movs	r2, #3
 8002d18:	4013      	ands	r3, r2
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d123      	bne.n	8002d66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	08da      	lsrs	r2, r3, #3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3208      	adds	r2, #8
 8002d26:	0092      	lsls	r2, r2, #2
 8002d28:	58d3      	ldr	r3, [r2, r3]
 8002d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	2207      	movs	r2, #7
 8002d30:	4013      	ands	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	220f      	movs	r2, #15
 8002d36:	409a      	lsls	r2, r3
 8002d38:	0013      	movs	r3, r2
 8002d3a:	43da      	mvns	r2, r3
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	691a      	ldr	r2, [r3, #16]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2107      	movs	r1, #7
 8002d4a:	400b      	ands	r3, r1
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	409a      	lsls	r2, r3
 8002d50:	0013      	movs	r3, r2
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	08da      	lsrs	r2, r3, #3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3208      	adds	r2, #8
 8002d60:	0092      	lsls	r2, r2, #2
 8002d62:	6939      	ldr	r1, [r7, #16]
 8002d64:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	2203      	movs	r2, #3
 8002d72:	409a      	lsls	r2, r3
 8002d74:	0013      	movs	r3, r2
 8002d76:	43da      	mvns	r2, r3
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2203      	movs	r2, #3
 8002d84:	401a      	ands	r2, r3
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	409a      	lsls	r2, r3
 8002d8c:	0013      	movs	r3, r2
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	23c0      	movs	r3, #192	; 0xc0
 8002da0:	029b      	lsls	r3, r3, #10
 8002da2:	4013      	ands	r3, r2
 8002da4:	d100      	bne.n	8002da8 <HAL_GPIO_Init+0x174>
 8002da6:	e092      	b.n	8002ece <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002da8:	4a50      	ldr	r2, [pc, #320]	; (8002eec <HAL_GPIO_Init+0x2b8>)
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	089b      	lsrs	r3, r3, #2
 8002dae:	3318      	adds	r3, #24
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	589b      	ldr	r3, [r3, r2]
 8002db4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2203      	movs	r2, #3
 8002dba:	4013      	ands	r3, r2
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	220f      	movs	r2, #15
 8002dc0:	409a      	lsls	r2, r3
 8002dc2:	0013      	movs	r3, r2
 8002dc4:	43da      	mvns	r2, r3
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	23a0      	movs	r3, #160	; 0xa0
 8002dd0:	05db      	lsls	r3, r3, #23
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d013      	beq.n	8002dfe <HAL_GPIO_Init+0x1ca>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a45      	ldr	r2, [pc, #276]	; (8002ef0 <HAL_GPIO_Init+0x2bc>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00d      	beq.n	8002dfa <HAL_GPIO_Init+0x1c6>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a44      	ldr	r2, [pc, #272]	; (8002ef4 <HAL_GPIO_Init+0x2c0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d007      	beq.n	8002df6 <HAL_GPIO_Init+0x1c2>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a43      	ldr	r2, [pc, #268]	; (8002ef8 <HAL_GPIO_Init+0x2c4>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d101      	bne.n	8002df2 <HAL_GPIO_Init+0x1be>
 8002dee:	2303      	movs	r3, #3
 8002df0:	e006      	b.n	8002e00 <HAL_GPIO_Init+0x1cc>
 8002df2:	2305      	movs	r3, #5
 8002df4:	e004      	b.n	8002e00 <HAL_GPIO_Init+0x1cc>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e002      	b.n	8002e00 <HAL_GPIO_Init+0x1cc>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <HAL_GPIO_Init+0x1cc>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	2103      	movs	r1, #3
 8002e04:	400a      	ands	r2, r1
 8002e06:	00d2      	lsls	r2, r2, #3
 8002e08:	4093      	lsls	r3, r2
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002e10:	4936      	ldr	r1, [pc, #216]	; (8002eec <HAL_GPIO_Init+0x2b8>)
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	089b      	lsrs	r3, r3, #2
 8002e16:	3318      	adds	r3, #24
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e1e:	4b33      	ldr	r3, [pc, #204]	; (8002eec <HAL_GPIO_Init+0x2b8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	43da      	mvns	r2, r3
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	2380      	movs	r3, #128	; 0x80
 8002e34:	035b      	lsls	r3, r3, #13
 8002e36:	4013      	ands	r3, r2
 8002e38:	d003      	beq.n	8002e42 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e42:	4b2a      	ldr	r3, [pc, #168]	; (8002eec <HAL_GPIO_Init+0x2b8>)
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002e48:	4b28      	ldr	r3, [pc, #160]	; (8002eec <HAL_GPIO_Init+0x2b8>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	43da      	mvns	r2, r3
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	4013      	ands	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	2380      	movs	r3, #128	; 0x80
 8002e5e:	039b      	lsls	r3, r3, #14
 8002e60:	4013      	ands	r3, r2
 8002e62:	d003      	beq.n	8002e6c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e6c:	4b1f      	ldr	r3, [pc, #124]	; (8002eec <HAL_GPIO_Init+0x2b8>)
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e72:	4a1e      	ldr	r2, [pc, #120]	; (8002eec <HAL_GPIO_Init+0x2b8>)
 8002e74:	2384      	movs	r3, #132	; 0x84
 8002e76:	58d3      	ldr	r3, [r2, r3]
 8002e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	43da      	mvns	r2, r3
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	4013      	ands	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	029b      	lsls	r3, r3, #10
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d003      	beq.n	8002e98 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e98:	4914      	ldr	r1, [pc, #80]	; (8002eec <HAL_GPIO_Init+0x2b8>)
 8002e9a:	2284      	movs	r2, #132	; 0x84
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002ea0:	4a12      	ldr	r2, [pc, #72]	; (8002eec <HAL_GPIO_Init+0x2b8>)
 8002ea2:	2380      	movs	r3, #128	; 0x80
 8002ea4:	58d3      	ldr	r3, [r2, r3]
 8002ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	43da      	mvns	r2, r3
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	2380      	movs	r3, #128	; 0x80
 8002eb8:	025b      	lsls	r3, r3, #9
 8002eba:	4013      	ands	r3, r2
 8002ebc:	d003      	beq.n	8002ec6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ec6:	4909      	ldr	r1, [pc, #36]	; (8002eec <HAL_GPIO_Init+0x2b8>)
 8002ec8:	2280      	movs	r2, #128	; 0x80
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	40da      	lsrs	r2, r3
 8002edc:	1e13      	subs	r3, r2, #0
 8002ede:	d000      	beq.n	8002ee2 <HAL_GPIO_Init+0x2ae>
 8002ee0:	e6b0      	b.n	8002c44 <HAL_GPIO_Init+0x10>
  }
}
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	46c0      	nop			; (mov r8, r8)
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b006      	add	sp, #24
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40021800 	.word	0x40021800
 8002ef0:	50000400 	.word	0x50000400
 8002ef4:	50000800 	.word	0x50000800
 8002ef8:	50000c00 	.word	0x50000c00

08002efc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	0008      	movs	r0, r1
 8002f06:	0011      	movs	r1, r2
 8002f08:	1cbb      	adds	r3, r7, #2
 8002f0a:	1c02      	adds	r2, r0, #0
 8002f0c:	801a      	strh	r2, [r3, #0]
 8002f0e:	1c7b      	adds	r3, r7, #1
 8002f10:	1c0a      	adds	r2, r1, #0
 8002f12:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f14:	1c7b      	adds	r3, r7, #1
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d004      	beq.n	8002f26 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f1c:	1cbb      	adds	r3, r7, #2
 8002f1e:	881a      	ldrh	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f24:	e003      	b.n	8002f2e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f26:	1cbb      	adds	r3, r7, #2
 8002f28:	881a      	ldrh	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	46bd      	mov	sp, r7
 8002f32:	b002      	add	sp, #8
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b084      	sub	sp, #16
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	000a      	movs	r2, r1
 8002f40:	1cbb      	adds	r3, r7, #2
 8002f42:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f4a:	1cbb      	adds	r3, r7, #2
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	4013      	ands	r3, r2
 8002f52:	041a      	lsls	r2, r3, #16
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	43db      	mvns	r3, r3
 8002f58:	1cb9      	adds	r1, r7, #2
 8002f5a:	8809      	ldrh	r1, [r1, #0]
 8002f5c:	400b      	ands	r3, r1
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	619a      	str	r2, [r3, #24]
}
 8002f64:	46c0      	nop			; (mov r8, r8)
 8002f66:	46bd      	mov	sp, r7
 8002f68:	b004      	add	sp, #16
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	0002      	movs	r2, r0
 8002f74:	1dbb      	adds	r3, r7, #6
 8002f76:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002f78:	4b10      	ldr	r3, [pc, #64]	; (8002fbc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	1dba      	adds	r2, r7, #6
 8002f7e:	8812      	ldrh	r2, [r2, #0]
 8002f80:	4013      	ands	r3, r2
 8002f82:	d008      	beq.n	8002f96 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002f84:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002f86:	1dba      	adds	r2, r7, #6
 8002f88:	8812      	ldrh	r2, [r2, #0]
 8002f8a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002f8c:	1dbb      	adds	r3, r7, #6
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	0018      	movs	r0, r3
 8002f92:	f7fd fa2b 	bl	80003ec <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002f96:	4b09      	ldr	r3, [pc, #36]	; (8002fbc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	1dba      	adds	r2, r7, #6
 8002f9c:	8812      	ldrh	r2, [r2, #0]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	d008      	beq.n	8002fb4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002fa2:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002fa4:	1dba      	adds	r2, r7, #6
 8002fa6:	8812      	ldrh	r2, [r2, #0]
 8002fa8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002faa:	1dbb      	adds	r3, r7, #6
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f000 f806 	bl	8002fc0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002fb4:	46c0      	nop			; (mov r8, r8)
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	b002      	add	sp, #8
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40021800 	.word	0x40021800

08002fc0 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	0002      	movs	r2, r0
 8002fc8:	1dbb      	adds	r3, r7, #6
 8002fca:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002fcc:	46c0      	nop			; (mov r8, r8)
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b002      	add	sp, #8
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002fdc:	4b19      	ldr	r3, [pc, #100]	; (8003044 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a19      	ldr	r2, [pc, #100]	; (8003048 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	0019      	movs	r1, r3
 8002fe6:	4b17      	ldr	r3, [pc, #92]	; (8003044 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d11f      	bne.n	8003038 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002ff8:	4b14      	ldr	r3, [pc, #80]	; (800304c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	0013      	movs	r3, r2
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	189b      	adds	r3, r3, r2
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	4912      	ldr	r1, [pc, #72]	; (8003050 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003006:	0018      	movs	r0, r3
 8003008:	f7fd f87a 	bl	8000100 <__udivsi3>
 800300c:	0003      	movs	r3, r0
 800300e:	3301      	adds	r3, #1
 8003010:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003012:	e008      	b.n	8003026 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	3b01      	subs	r3, #1
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	e001      	b.n	8003026 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e009      	b.n	800303a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003026:	4b07      	ldr	r3, [pc, #28]	; (8003044 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003028:	695a      	ldr	r2, [r3, #20]
 800302a:	2380      	movs	r3, #128	; 0x80
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	401a      	ands	r2, r3
 8003030:	2380      	movs	r3, #128	; 0x80
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	429a      	cmp	r2, r3
 8003036:	d0ed      	beq.n	8003014 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	0018      	movs	r0, r3
 800303c:	46bd      	mov	sp, r7
 800303e:	b004      	add	sp, #16
 8003040:	bd80      	pop	{r7, pc}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	40007000 	.word	0x40007000
 8003048:	fffff9ff 	.word	0xfffff9ff
 800304c:	20000000 	.word	0x20000000
 8003050:	000f4240 	.word	0x000f4240

08003054 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003058:	4b03      	ldr	r3, [pc, #12]	; (8003068 <LL_RCC_GetAPB1Prescaler+0x14>)
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	23e0      	movs	r3, #224	; 0xe0
 800305e:	01db      	lsls	r3, r3, #7
 8003060:	4013      	ands	r3, r2
}
 8003062:	0018      	movs	r0, r3
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40021000 	.word	0x40021000

0800306c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e2f3      	b.n	8003666 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2201      	movs	r2, #1
 8003084:	4013      	ands	r3, r2
 8003086:	d100      	bne.n	800308a <HAL_RCC_OscConfig+0x1e>
 8003088:	e07c      	b.n	8003184 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800308a:	4bc3      	ldr	r3, [pc, #780]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2238      	movs	r2, #56	; 0x38
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003094:	4bc0      	ldr	r3, [pc, #768]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	2203      	movs	r2, #3
 800309a:	4013      	ands	r3, r2
 800309c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	2b10      	cmp	r3, #16
 80030a2:	d102      	bne.n	80030aa <HAL_RCC_OscConfig+0x3e>
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	d002      	beq.n	80030b0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d10b      	bne.n	80030c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b0:	4bb9      	ldr	r3, [pc, #740]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	2380      	movs	r3, #128	; 0x80
 80030b6:	029b      	lsls	r3, r3, #10
 80030b8:	4013      	ands	r3, r2
 80030ba:	d062      	beq.n	8003182 <HAL_RCC_OscConfig+0x116>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d15e      	bne.n	8003182 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e2ce      	b.n	8003666 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	2380      	movs	r3, #128	; 0x80
 80030ce:	025b      	lsls	r3, r3, #9
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d107      	bne.n	80030e4 <HAL_RCC_OscConfig+0x78>
 80030d4:	4bb0      	ldr	r3, [pc, #704]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	4baf      	ldr	r3, [pc, #700]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 80030da:	2180      	movs	r1, #128	; 0x80
 80030dc:	0249      	lsls	r1, r1, #9
 80030de:	430a      	orrs	r2, r1
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	e020      	b.n	8003126 <HAL_RCC_OscConfig+0xba>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	23a0      	movs	r3, #160	; 0xa0
 80030ea:	02db      	lsls	r3, r3, #11
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d10e      	bne.n	800310e <HAL_RCC_OscConfig+0xa2>
 80030f0:	4ba9      	ldr	r3, [pc, #676]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4ba8      	ldr	r3, [pc, #672]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 80030f6:	2180      	movs	r1, #128	; 0x80
 80030f8:	02c9      	lsls	r1, r1, #11
 80030fa:	430a      	orrs	r2, r1
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	4ba6      	ldr	r3, [pc, #664]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	4ba5      	ldr	r3, [pc, #660]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 8003104:	2180      	movs	r1, #128	; 0x80
 8003106:	0249      	lsls	r1, r1, #9
 8003108:	430a      	orrs	r2, r1
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	e00b      	b.n	8003126 <HAL_RCC_OscConfig+0xba>
 800310e:	4ba2      	ldr	r3, [pc, #648]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	4ba1      	ldr	r3, [pc, #644]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 8003114:	49a1      	ldr	r1, [pc, #644]	; (800339c <HAL_RCC_OscConfig+0x330>)
 8003116:	400a      	ands	r2, r1
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	4b9f      	ldr	r3, [pc, #636]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	4b9e      	ldr	r3, [pc, #632]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 8003120:	499f      	ldr	r1, [pc, #636]	; (80033a0 <HAL_RCC_OscConfig+0x334>)
 8003122:	400a      	ands	r2, r1
 8003124:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d014      	beq.n	8003158 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312e:	f7fe fca1 	bl	8001a74 <HAL_GetTick>
 8003132:	0003      	movs	r3, r0
 8003134:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003138:	f7fe fc9c 	bl	8001a74 <HAL_GetTick>
 800313c:	0002      	movs	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b64      	cmp	r3, #100	; 0x64
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e28d      	b.n	8003666 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800314a:	4b93      	ldr	r3, [pc, #588]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	2380      	movs	r3, #128	; 0x80
 8003150:	029b      	lsls	r3, r3, #10
 8003152:	4013      	ands	r3, r2
 8003154:	d0f0      	beq.n	8003138 <HAL_RCC_OscConfig+0xcc>
 8003156:	e015      	b.n	8003184 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7fe fc8c 	bl	8001a74 <HAL_GetTick>
 800315c:	0003      	movs	r3, r0
 800315e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003162:	f7fe fc87 	bl	8001a74 <HAL_GetTick>
 8003166:	0002      	movs	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b64      	cmp	r3, #100	; 0x64
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e278      	b.n	8003666 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003174:	4b88      	ldr	r3, [pc, #544]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	2380      	movs	r3, #128	; 0x80
 800317a:	029b      	lsls	r3, r3, #10
 800317c:	4013      	ands	r3, r2
 800317e:	d1f0      	bne.n	8003162 <HAL_RCC_OscConfig+0xf6>
 8003180:	e000      	b.n	8003184 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003182:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2202      	movs	r2, #2
 800318a:	4013      	ands	r3, r2
 800318c:	d100      	bne.n	8003190 <HAL_RCC_OscConfig+0x124>
 800318e:	e099      	b.n	80032c4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003190:	4b81      	ldr	r3, [pc, #516]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	2238      	movs	r2, #56	; 0x38
 8003196:	4013      	ands	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800319a:	4b7f      	ldr	r3, [pc, #508]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	2203      	movs	r2, #3
 80031a0:	4013      	ands	r3, r2
 80031a2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	2b10      	cmp	r3, #16
 80031a8:	d102      	bne.n	80031b0 <HAL_RCC_OscConfig+0x144>
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d002      	beq.n	80031b6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d135      	bne.n	8003222 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031b6:	4b78      	ldr	r3, [pc, #480]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	2380      	movs	r3, #128	; 0x80
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	4013      	ands	r3, r2
 80031c0:	d005      	beq.n	80031ce <HAL_RCC_OscConfig+0x162>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e24b      	b.n	8003666 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ce:	4b72      	ldr	r3, [pc, #456]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	4a74      	ldr	r2, [pc, #464]	; (80033a4 <HAL_RCC_OscConfig+0x338>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	0019      	movs	r1, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	021a      	lsls	r2, r3, #8
 80031de:	4b6e      	ldr	r3, [pc, #440]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 80031e0:	430a      	orrs	r2, r1
 80031e2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d112      	bne.n	8003210 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80031ea:	4b6b      	ldr	r3, [pc, #428]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a6e      	ldr	r2, [pc, #440]	; (80033a8 <HAL_RCC_OscConfig+0x33c>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	0019      	movs	r1, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	4b67      	ldr	r3, [pc, #412]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 80031fa:	430a      	orrs	r2, r1
 80031fc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80031fe:	4b66      	ldr	r3, [pc, #408]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	0adb      	lsrs	r3, r3, #11
 8003204:	2207      	movs	r2, #7
 8003206:	4013      	ands	r3, r2
 8003208:	4a68      	ldr	r2, [pc, #416]	; (80033ac <HAL_RCC_OscConfig+0x340>)
 800320a:	40da      	lsrs	r2, r3
 800320c:	4b68      	ldr	r3, [pc, #416]	; (80033b0 <HAL_RCC_OscConfig+0x344>)
 800320e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003210:	4b68      	ldr	r3, [pc, #416]	; (80033b4 <HAL_RCC_OscConfig+0x348>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	0018      	movs	r0, r3
 8003216:	f7fe fbd1 	bl	80019bc <HAL_InitTick>
 800321a:	1e03      	subs	r3, r0, #0
 800321c:	d051      	beq.n	80032c2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e221      	b.n	8003666 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d030      	beq.n	800328c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800322a:	4b5b      	ldr	r3, [pc, #364]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a5e      	ldr	r2, [pc, #376]	; (80033a8 <HAL_RCC_OscConfig+0x33c>)
 8003230:	4013      	ands	r3, r2
 8003232:	0019      	movs	r1, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	4b57      	ldr	r3, [pc, #348]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 800323a:	430a      	orrs	r2, r1
 800323c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800323e:	4b56      	ldr	r3, [pc, #344]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	4b55      	ldr	r3, [pc, #340]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 8003244:	2180      	movs	r1, #128	; 0x80
 8003246:	0049      	lsls	r1, r1, #1
 8003248:	430a      	orrs	r2, r1
 800324a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324c:	f7fe fc12 	bl	8001a74 <HAL_GetTick>
 8003250:	0003      	movs	r3, r0
 8003252:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003256:	f7fe fc0d 	bl	8001a74 <HAL_GetTick>
 800325a:	0002      	movs	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e1fe      	b.n	8003666 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003268:	4b4b      	ldr	r3, [pc, #300]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	2380      	movs	r3, #128	; 0x80
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	4013      	ands	r3, r2
 8003272:	d0f0      	beq.n	8003256 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003274:	4b48      	ldr	r3, [pc, #288]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	4a4a      	ldr	r2, [pc, #296]	; (80033a4 <HAL_RCC_OscConfig+0x338>)
 800327a:	4013      	ands	r3, r2
 800327c:	0019      	movs	r1, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	021a      	lsls	r2, r3, #8
 8003284:	4b44      	ldr	r3, [pc, #272]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 8003286:	430a      	orrs	r2, r1
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	e01b      	b.n	80032c4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800328c:	4b42      	ldr	r3, [pc, #264]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	4b41      	ldr	r3, [pc, #260]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 8003292:	4949      	ldr	r1, [pc, #292]	; (80033b8 <HAL_RCC_OscConfig+0x34c>)
 8003294:	400a      	ands	r2, r1
 8003296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003298:	f7fe fbec 	bl	8001a74 <HAL_GetTick>
 800329c:	0003      	movs	r3, r0
 800329e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032a2:	f7fe fbe7 	bl	8001a74 <HAL_GetTick>
 80032a6:	0002      	movs	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e1d8      	b.n	8003666 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032b4:	4b38      	ldr	r3, [pc, #224]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	2380      	movs	r3, #128	; 0x80
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	4013      	ands	r3, r2
 80032be:	d1f0      	bne.n	80032a2 <HAL_RCC_OscConfig+0x236>
 80032c0:	e000      	b.n	80032c4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032c2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2208      	movs	r2, #8
 80032ca:	4013      	ands	r3, r2
 80032cc:	d047      	beq.n	800335e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80032ce:	4b32      	ldr	r3, [pc, #200]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2238      	movs	r2, #56	; 0x38
 80032d4:	4013      	ands	r3, r2
 80032d6:	2b18      	cmp	r3, #24
 80032d8:	d10a      	bne.n	80032f0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80032da:	4b2f      	ldr	r3, [pc, #188]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 80032dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032de:	2202      	movs	r2, #2
 80032e0:	4013      	ands	r3, r2
 80032e2:	d03c      	beq.n	800335e <HAL_RCC_OscConfig+0x2f2>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d138      	bne.n	800335e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e1ba      	b.n	8003666 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d019      	beq.n	800332c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80032f8:	4b27      	ldr	r3, [pc, #156]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 80032fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80032fc:	4b26      	ldr	r3, [pc, #152]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 80032fe:	2101      	movs	r1, #1
 8003300:	430a      	orrs	r2, r1
 8003302:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003304:	f7fe fbb6 	bl	8001a74 <HAL_GetTick>
 8003308:	0003      	movs	r3, r0
 800330a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800330e:	f7fe fbb1 	bl	8001a74 <HAL_GetTick>
 8003312:	0002      	movs	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e1a2      	b.n	8003666 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003320:	4b1d      	ldr	r3, [pc, #116]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 8003322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003324:	2202      	movs	r2, #2
 8003326:	4013      	ands	r3, r2
 8003328:	d0f1      	beq.n	800330e <HAL_RCC_OscConfig+0x2a2>
 800332a:	e018      	b.n	800335e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800332c:	4b1a      	ldr	r3, [pc, #104]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 800332e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003330:	4b19      	ldr	r3, [pc, #100]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 8003332:	2101      	movs	r1, #1
 8003334:	438a      	bics	r2, r1
 8003336:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003338:	f7fe fb9c 	bl	8001a74 <HAL_GetTick>
 800333c:	0003      	movs	r3, r0
 800333e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003342:	f7fe fb97 	bl	8001a74 <HAL_GetTick>
 8003346:	0002      	movs	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e188      	b.n	8003666 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003354:	4b10      	ldr	r3, [pc, #64]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 8003356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003358:	2202      	movs	r2, #2
 800335a:	4013      	ands	r3, r2
 800335c:	d1f1      	bne.n	8003342 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2204      	movs	r2, #4
 8003364:	4013      	ands	r3, r2
 8003366:	d100      	bne.n	800336a <HAL_RCC_OscConfig+0x2fe>
 8003368:	e0c6      	b.n	80034f8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800336a:	231f      	movs	r3, #31
 800336c:	18fb      	adds	r3, r7, r3
 800336e:	2200      	movs	r2, #0
 8003370:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003372:	4b09      	ldr	r3, [pc, #36]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2238      	movs	r2, #56	; 0x38
 8003378:	4013      	ands	r3, r2
 800337a:	2b20      	cmp	r3, #32
 800337c:	d11e      	bne.n	80033bc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800337e:	4b06      	ldr	r3, [pc, #24]	; (8003398 <HAL_RCC_OscConfig+0x32c>)
 8003380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003382:	2202      	movs	r2, #2
 8003384:	4013      	ands	r3, r2
 8003386:	d100      	bne.n	800338a <HAL_RCC_OscConfig+0x31e>
 8003388:	e0b6      	b.n	80034f8 <HAL_RCC_OscConfig+0x48c>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d000      	beq.n	8003394 <HAL_RCC_OscConfig+0x328>
 8003392:	e0b1      	b.n	80034f8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e166      	b.n	8003666 <HAL_RCC_OscConfig+0x5fa>
 8003398:	40021000 	.word	0x40021000
 800339c:	fffeffff 	.word	0xfffeffff
 80033a0:	fffbffff 	.word	0xfffbffff
 80033a4:	ffff80ff 	.word	0xffff80ff
 80033a8:	ffffc7ff 	.word	0xffffc7ff
 80033ac:	00f42400 	.word	0x00f42400
 80033b0:	20000000 	.word	0x20000000
 80033b4:	20000004 	.word	0x20000004
 80033b8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033bc:	4bac      	ldr	r3, [pc, #688]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 80033be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033c0:	2380      	movs	r3, #128	; 0x80
 80033c2:	055b      	lsls	r3, r3, #21
 80033c4:	4013      	ands	r3, r2
 80033c6:	d101      	bne.n	80033cc <HAL_RCC_OscConfig+0x360>
 80033c8:	2301      	movs	r3, #1
 80033ca:	e000      	b.n	80033ce <HAL_RCC_OscConfig+0x362>
 80033cc:	2300      	movs	r3, #0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d011      	beq.n	80033f6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80033d2:	4ba7      	ldr	r3, [pc, #668]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 80033d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d6:	4ba6      	ldr	r3, [pc, #664]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 80033d8:	2180      	movs	r1, #128	; 0x80
 80033da:	0549      	lsls	r1, r1, #21
 80033dc:	430a      	orrs	r2, r1
 80033de:	63da      	str	r2, [r3, #60]	; 0x3c
 80033e0:	4ba3      	ldr	r3, [pc, #652]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 80033e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033e4:	2380      	movs	r3, #128	; 0x80
 80033e6:	055b      	lsls	r3, r3, #21
 80033e8:	4013      	ands	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80033ee:	231f      	movs	r3, #31
 80033f0:	18fb      	adds	r3, r7, r3
 80033f2:	2201      	movs	r2, #1
 80033f4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033f6:	4b9f      	ldr	r3, [pc, #636]	; (8003674 <HAL_RCC_OscConfig+0x608>)
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	2380      	movs	r3, #128	; 0x80
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	4013      	ands	r3, r2
 8003400:	d11a      	bne.n	8003438 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003402:	4b9c      	ldr	r3, [pc, #624]	; (8003674 <HAL_RCC_OscConfig+0x608>)
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	4b9b      	ldr	r3, [pc, #620]	; (8003674 <HAL_RCC_OscConfig+0x608>)
 8003408:	2180      	movs	r1, #128	; 0x80
 800340a:	0049      	lsls	r1, r1, #1
 800340c:	430a      	orrs	r2, r1
 800340e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003410:	f7fe fb30 	bl	8001a74 <HAL_GetTick>
 8003414:	0003      	movs	r3, r0
 8003416:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003418:	e008      	b.n	800342c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800341a:	f7fe fb2b 	bl	8001a74 <HAL_GetTick>
 800341e:	0002      	movs	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e11c      	b.n	8003666 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800342c:	4b91      	ldr	r3, [pc, #580]	; (8003674 <HAL_RCC_OscConfig+0x608>)
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	2380      	movs	r3, #128	; 0x80
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	4013      	ands	r3, r2
 8003436:	d0f0      	beq.n	800341a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d106      	bne.n	800344e <HAL_RCC_OscConfig+0x3e2>
 8003440:	4b8b      	ldr	r3, [pc, #556]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 8003442:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003444:	4b8a      	ldr	r3, [pc, #552]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 8003446:	2101      	movs	r1, #1
 8003448:	430a      	orrs	r2, r1
 800344a:	65da      	str	r2, [r3, #92]	; 0x5c
 800344c:	e01c      	b.n	8003488 <HAL_RCC_OscConfig+0x41c>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	2b05      	cmp	r3, #5
 8003454:	d10c      	bne.n	8003470 <HAL_RCC_OscConfig+0x404>
 8003456:	4b86      	ldr	r3, [pc, #536]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 8003458:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800345a:	4b85      	ldr	r3, [pc, #532]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 800345c:	2104      	movs	r1, #4
 800345e:	430a      	orrs	r2, r1
 8003460:	65da      	str	r2, [r3, #92]	; 0x5c
 8003462:	4b83      	ldr	r3, [pc, #524]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 8003464:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003466:	4b82      	ldr	r3, [pc, #520]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 8003468:	2101      	movs	r1, #1
 800346a:	430a      	orrs	r2, r1
 800346c:	65da      	str	r2, [r3, #92]	; 0x5c
 800346e:	e00b      	b.n	8003488 <HAL_RCC_OscConfig+0x41c>
 8003470:	4b7f      	ldr	r3, [pc, #508]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 8003472:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003474:	4b7e      	ldr	r3, [pc, #504]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 8003476:	2101      	movs	r1, #1
 8003478:	438a      	bics	r2, r1
 800347a:	65da      	str	r2, [r3, #92]	; 0x5c
 800347c:	4b7c      	ldr	r3, [pc, #496]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 800347e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003480:	4b7b      	ldr	r3, [pc, #492]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 8003482:	2104      	movs	r1, #4
 8003484:	438a      	bics	r2, r1
 8003486:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d014      	beq.n	80034ba <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003490:	f7fe faf0 	bl	8001a74 <HAL_GetTick>
 8003494:	0003      	movs	r3, r0
 8003496:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003498:	e009      	b.n	80034ae <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800349a:	f7fe faeb 	bl	8001a74 <HAL_GetTick>
 800349e:	0002      	movs	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	4a74      	ldr	r2, [pc, #464]	; (8003678 <HAL_RCC_OscConfig+0x60c>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e0db      	b.n	8003666 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ae:	4b70      	ldr	r3, [pc, #448]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 80034b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b2:	2202      	movs	r2, #2
 80034b4:	4013      	ands	r3, r2
 80034b6:	d0f0      	beq.n	800349a <HAL_RCC_OscConfig+0x42e>
 80034b8:	e013      	b.n	80034e2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ba:	f7fe fadb 	bl	8001a74 <HAL_GetTick>
 80034be:	0003      	movs	r3, r0
 80034c0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034c2:	e009      	b.n	80034d8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c4:	f7fe fad6 	bl	8001a74 <HAL_GetTick>
 80034c8:	0002      	movs	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	4a6a      	ldr	r2, [pc, #424]	; (8003678 <HAL_RCC_OscConfig+0x60c>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e0c6      	b.n	8003666 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034d8:	4b65      	ldr	r3, [pc, #404]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 80034da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034dc:	2202      	movs	r2, #2
 80034de:	4013      	ands	r3, r2
 80034e0:	d1f0      	bne.n	80034c4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80034e2:	231f      	movs	r3, #31
 80034e4:	18fb      	adds	r3, r7, r3
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d105      	bne.n	80034f8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80034ec:	4b60      	ldr	r3, [pc, #384]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 80034ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034f0:	4b5f      	ldr	r3, [pc, #380]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 80034f2:	4962      	ldr	r1, [pc, #392]	; (800367c <HAL_RCC_OscConfig+0x610>)
 80034f4:	400a      	ands	r2, r1
 80034f6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d100      	bne.n	8003502 <HAL_RCC_OscConfig+0x496>
 8003500:	e0b0      	b.n	8003664 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003502:	4b5b      	ldr	r3, [pc, #364]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	2238      	movs	r2, #56	; 0x38
 8003508:	4013      	ands	r3, r2
 800350a:	2b10      	cmp	r3, #16
 800350c:	d100      	bne.n	8003510 <HAL_RCC_OscConfig+0x4a4>
 800350e:	e078      	b.n	8003602 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	69db      	ldr	r3, [r3, #28]
 8003514:	2b02      	cmp	r3, #2
 8003516:	d153      	bne.n	80035c0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003518:	4b55      	ldr	r3, [pc, #340]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	4b54      	ldr	r3, [pc, #336]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 800351e:	4958      	ldr	r1, [pc, #352]	; (8003680 <HAL_RCC_OscConfig+0x614>)
 8003520:	400a      	ands	r2, r1
 8003522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003524:	f7fe faa6 	bl	8001a74 <HAL_GetTick>
 8003528:	0003      	movs	r3, r0
 800352a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800352c:	e008      	b.n	8003540 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800352e:	f7fe faa1 	bl	8001a74 <HAL_GetTick>
 8003532:	0002      	movs	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e092      	b.n	8003666 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003540:	4b4b      	ldr	r3, [pc, #300]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	2380      	movs	r3, #128	; 0x80
 8003546:	049b      	lsls	r3, r3, #18
 8003548:	4013      	ands	r3, r2
 800354a:	d1f0      	bne.n	800352e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800354c:	4b48      	ldr	r3, [pc, #288]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	4a4c      	ldr	r2, [pc, #304]	; (8003684 <HAL_RCC_OscConfig+0x618>)
 8003552:	4013      	ands	r3, r2
 8003554:	0019      	movs	r1, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1a      	ldr	r2, [r3, #32]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003564:	021b      	lsls	r3, r3, #8
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003572:	431a      	orrs	r2, r3
 8003574:	4b3e      	ldr	r3, [pc, #248]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 8003576:	430a      	orrs	r2, r1
 8003578:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800357a:	4b3d      	ldr	r3, [pc, #244]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	4b3c      	ldr	r3, [pc, #240]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 8003580:	2180      	movs	r1, #128	; 0x80
 8003582:	0449      	lsls	r1, r1, #17
 8003584:	430a      	orrs	r2, r1
 8003586:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003588:	4b39      	ldr	r3, [pc, #228]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	4b38      	ldr	r3, [pc, #224]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 800358e:	2180      	movs	r1, #128	; 0x80
 8003590:	0549      	lsls	r1, r1, #21
 8003592:	430a      	orrs	r2, r1
 8003594:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003596:	f7fe fa6d 	bl	8001a74 <HAL_GetTick>
 800359a:	0003      	movs	r3, r0
 800359c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a0:	f7fe fa68 	bl	8001a74 <HAL_GetTick>
 80035a4:	0002      	movs	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e059      	b.n	8003666 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035b2:	4b2f      	ldr	r3, [pc, #188]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	2380      	movs	r3, #128	; 0x80
 80035b8:	049b      	lsls	r3, r3, #18
 80035ba:	4013      	ands	r3, r2
 80035bc:	d0f0      	beq.n	80035a0 <HAL_RCC_OscConfig+0x534>
 80035be:	e051      	b.n	8003664 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c0:	4b2b      	ldr	r3, [pc, #172]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	4b2a      	ldr	r3, [pc, #168]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 80035c6:	492e      	ldr	r1, [pc, #184]	; (8003680 <HAL_RCC_OscConfig+0x614>)
 80035c8:	400a      	ands	r2, r1
 80035ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035cc:	f7fe fa52 	bl	8001a74 <HAL_GetTick>
 80035d0:	0003      	movs	r3, r0
 80035d2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d6:	f7fe fa4d 	bl	8001a74 <HAL_GetTick>
 80035da:	0002      	movs	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e03e      	b.n	8003666 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035e8:	4b21      	ldr	r3, [pc, #132]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	2380      	movs	r3, #128	; 0x80
 80035ee:	049b      	lsls	r3, r3, #18
 80035f0:	4013      	ands	r3, r2
 80035f2:	d1f0      	bne.n	80035d6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80035f4:	4b1e      	ldr	r3, [pc, #120]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	4b1d      	ldr	r3, [pc, #116]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 80035fa:	4923      	ldr	r1, [pc, #140]	; (8003688 <HAL_RCC_OscConfig+0x61c>)
 80035fc:	400a      	ands	r2, r1
 80035fe:	60da      	str	r2, [r3, #12]
 8003600:	e030      	b.n	8003664 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d101      	bne.n	800360e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e02b      	b.n	8003666 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800360e:	4b18      	ldr	r3, [pc, #96]	; (8003670 <HAL_RCC_OscConfig+0x604>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	2203      	movs	r2, #3
 8003618:	401a      	ands	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	429a      	cmp	r2, r3
 8003620:	d11e      	bne.n	8003660 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2270      	movs	r2, #112	; 0x70
 8003626:	401a      	ands	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362c:	429a      	cmp	r2, r3
 800362e:	d117      	bne.n	8003660 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	23fe      	movs	r3, #254	; 0xfe
 8003634:	01db      	lsls	r3, r3, #7
 8003636:	401a      	ands	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800363e:	429a      	cmp	r2, r3
 8003640:	d10e      	bne.n	8003660 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	23f8      	movs	r3, #248	; 0xf8
 8003646:	039b      	lsls	r3, r3, #14
 8003648:	401a      	ands	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800364e:	429a      	cmp	r2, r3
 8003650:	d106      	bne.n	8003660 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	0f5b      	lsrs	r3, r3, #29
 8003656:	075a      	lsls	r2, r3, #29
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800365c:	429a      	cmp	r2, r3
 800365e:	d001      	beq.n	8003664 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e000      	b.n	8003666 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	0018      	movs	r0, r3
 8003668:	46bd      	mov	sp, r7
 800366a:	b008      	add	sp, #32
 800366c:	bd80      	pop	{r7, pc}
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	40021000 	.word	0x40021000
 8003674:	40007000 	.word	0x40007000
 8003678:	00001388 	.word	0x00001388
 800367c:	efffffff 	.word	0xefffffff
 8003680:	feffffff 	.word	0xfeffffff
 8003684:	1fc1808c 	.word	0x1fc1808c
 8003688:	effefffc 	.word	0xeffefffc

0800368c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e0e9      	b.n	8003874 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036a0:	4b76      	ldr	r3, [pc, #472]	; (800387c <HAL_RCC_ClockConfig+0x1f0>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2207      	movs	r2, #7
 80036a6:	4013      	ands	r3, r2
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d91e      	bls.n	80036ec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ae:	4b73      	ldr	r3, [pc, #460]	; (800387c <HAL_RCC_ClockConfig+0x1f0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2207      	movs	r2, #7
 80036b4:	4393      	bics	r3, r2
 80036b6:	0019      	movs	r1, r3
 80036b8:	4b70      	ldr	r3, [pc, #448]	; (800387c <HAL_RCC_ClockConfig+0x1f0>)
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036c0:	f7fe f9d8 	bl	8001a74 <HAL_GetTick>
 80036c4:	0003      	movs	r3, r0
 80036c6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036c8:	e009      	b.n	80036de <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ca:	f7fe f9d3 	bl	8001a74 <HAL_GetTick>
 80036ce:	0002      	movs	r2, r0
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	4a6a      	ldr	r2, [pc, #424]	; (8003880 <HAL_RCC_ClockConfig+0x1f4>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e0ca      	b.n	8003874 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036de:	4b67      	ldr	r3, [pc, #412]	; (800387c <HAL_RCC_ClockConfig+0x1f0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2207      	movs	r2, #7
 80036e4:	4013      	ands	r3, r2
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d1ee      	bne.n	80036ca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2202      	movs	r2, #2
 80036f2:	4013      	ands	r3, r2
 80036f4:	d015      	beq.n	8003722 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2204      	movs	r2, #4
 80036fc:	4013      	ands	r3, r2
 80036fe:	d006      	beq.n	800370e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003700:	4b60      	ldr	r3, [pc, #384]	; (8003884 <HAL_RCC_ClockConfig+0x1f8>)
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	4b5f      	ldr	r3, [pc, #380]	; (8003884 <HAL_RCC_ClockConfig+0x1f8>)
 8003706:	21e0      	movs	r1, #224	; 0xe0
 8003708:	01c9      	lsls	r1, r1, #7
 800370a:	430a      	orrs	r2, r1
 800370c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800370e:	4b5d      	ldr	r3, [pc, #372]	; (8003884 <HAL_RCC_ClockConfig+0x1f8>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	4a5d      	ldr	r2, [pc, #372]	; (8003888 <HAL_RCC_ClockConfig+0x1fc>)
 8003714:	4013      	ands	r3, r2
 8003716:	0019      	movs	r1, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	4b59      	ldr	r3, [pc, #356]	; (8003884 <HAL_RCC_ClockConfig+0x1f8>)
 800371e:	430a      	orrs	r2, r1
 8003720:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2201      	movs	r2, #1
 8003728:	4013      	ands	r3, r2
 800372a:	d057      	beq.n	80037dc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d107      	bne.n	8003744 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003734:	4b53      	ldr	r3, [pc, #332]	; (8003884 <HAL_RCC_ClockConfig+0x1f8>)
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	2380      	movs	r3, #128	; 0x80
 800373a:	029b      	lsls	r3, r3, #10
 800373c:	4013      	ands	r3, r2
 800373e:	d12b      	bne.n	8003798 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e097      	b.n	8003874 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b02      	cmp	r3, #2
 800374a:	d107      	bne.n	800375c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800374c:	4b4d      	ldr	r3, [pc, #308]	; (8003884 <HAL_RCC_ClockConfig+0x1f8>)
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	2380      	movs	r3, #128	; 0x80
 8003752:	049b      	lsls	r3, r3, #18
 8003754:	4013      	ands	r3, r2
 8003756:	d11f      	bne.n	8003798 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e08b      	b.n	8003874 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d107      	bne.n	8003774 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003764:	4b47      	ldr	r3, [pc, #284]	; (8003884 <HAL_RCC_ClockConfig+0x1f8>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	2380      	movs	r3, #128	; 0x80
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	4013      	ands	r3, r2
 800376e:	d113      	bne.n	8003798 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e07f      	b.n	8003874 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b03      	cmp	r3, #3
 800377a:	d106      	bne.n	800378a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800377c:	4b41      	ldr	r3, [pc, #260]	; (8003884 <HAL_RCC_ClockConfig+0x1f8>)
 800377e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003780:	2202      	movs	r2, #2
 8003782:	4013      	ands	r3, r2
 8003784:	d108      	bne.n	8003798 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e074      	b.n	8003874 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800378a:	4b3e      	ldr	r3, [pc, #248]	; (8003884 <HAL_RCC_ClockConfig+0x1f8>)
 800378c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378e:	2202      	movs	r2, #2
 8003790:	4013      	ands	r3, r2
 8003792:	d101      	bne.n	8003798 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e06d      	b.n	8003874 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003798:	4b3a      	ldr	r3, [pc, #232]	; (8003884 <HAL_RCC_ClockConfig+0x1f8>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	2207      	movs	r2, #7
 800379e:	4393      	bics	r3, r2
 80037a0:	0019      	movs	r1, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	4b37      	ldr	r3, [pc, #220]	; (8003884 <HAL_RCC_ClockConfig+0x1f8>)
 80037a8:	430a      	orrs	r2, r1
 80037aa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ac:	f7fe f962 	bl	8001a74 <HAL_GetTick>
 80037b0:	0003      	movs	r3, r0
 80037b2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b4:	e009      	b.n	80037ca <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b6:	f7fe f95d 	bl	8001a74 <HAL_GetTick>
 80037ba:	0002      	movs	r2, r0
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	4a2f      	ldr	r2, [pc, #188]	; (8003880 <HAL_RCC_ClockConfig+0x1f4>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e054      	b.n	8003874 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ca:	4b2e      	ldr	r3, [pc, #184]	; (8003884 <HAL_RCC_ClockConfig+0x1f8>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2238      	movs	r2, #56	; 0x38
 80037d0:	401a      	ands	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	429a      	cmp	r2, r3
 80037da:	d1ec      	bne.n	80037b6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037dc:	4b27      	ldr	r3, [pc, #156]	; (800387c <HAL_RCC_ClockConfig+0x1f0>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2207      	movs	r2, #7
 80037e2:	4013      	ands	r3, r2
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d21e      	bcs.n	8003828 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ea:	4b24      	ldr	r3, [pc, #144]	; (800387c <HAL_RCC_ClockConfig+0x1f0>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2207      	movs	r2, #7
 80037f0:	4393      	bics	r3, r2
 80037f2:	0019      	movs	r1, r3
 80037f4:	4b21      	ldr	r3, [pc, #132]	; (800387c <HAL_RCC_ClockConfig+0x1f0>)
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80037fc:	f7fe f93a 	bl	8001a74 <HAL_GetTick>
 8003800:	0003      	movs	r3, r0
 8003802:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003804:	e009      	b.n	800381a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003806:	f7fe f935 	bl	8001a74 <HAL_GetTick>
 800380a:	0002      	movs	r2, r0
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	4a1b      	ldr	r2, [pc, #108]	; (8003880 <HAL_RCC_ClockConfig+0x1f4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d901      	bls.n	800381a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e02c      	b.n	8003874 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800381a:	4b18      	ldr	r3, [pc, #96]	; (800387c <HAL_RCC_ClockConfig+0x1f0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2207      	movs	r2, #7
 8003820:	4013      	ands	r3, r2
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d1ee      	bne.n	8003806 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2204      	movs	r2, #4
 800382e:	4013      	ands	r3, r2
 8003830:	d009      	beq.n	8003846 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003832:	4b14      	ldr	r3, [pc, #80]	; (8003884 <HAL_RCC_ClockConfig+0x1f8>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	4a15      	ldr	r2, [pc, #84]	; (800388c <HAL_RCC_ClockConfig+0x200>)
 8003838:	4013      	ands	r3, r2
 800383a:	0019      	movs	r1, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	4b10      	ldr	r3, [pc, #64]	; (8003884 <HAL_RCC_ClockConfig+0x1f8>)
 8003842:	430a      	orrs	r2, r1
 8003844:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003846:	f000 f829 	bl	800389c <HAL_RCC_GetSysClockFreq>
 800384a:	0001      	movs	r1, r0
 800384c:	4b0d      	ldr	r3, [pc, #52]	; (8003884 <HAL_RCC_ClockConfig+0x1f8>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	0a1b      	lsrs	r3, r3, #8
 8003852:	220f      	movs	r2, #15
 8003854:	401a      	ands	r2, r3
 8003856:	4b0e      	ldr	r3, [pc, #56]	; (8003890 <HAL_RCC_ClockConfig+0x204>)
 8003858:	0092      	lsls	r2, r2, #2
 800385a:	58d3      	ldr	r3, [r2, r3]
 800385c:	221f      	movs	r2, #31
 800385e:	4013      	ands	r3, r2
 8003860:	000a      	movs	r2, r1
 8003862:	40da      	lsrs	r2, r3
 8003864:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <HAL_RCC_ClockConfig+0x208>)
 8003866:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003868:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <HAL_RCC_ClockConfig+0x20c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	0018      	movs	r0, r3
 800386e:	f7fe f8a5 	bl	80019bc <HAL_InitTick>
 8003872:	0003      	movs	r3, r0
}
 8003874:	0018      	movs	r0, r3
 8003876:	46bd      	mov	sp, r7
 8003878:	b004      	add	sp, #16
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40022000 	.word	0x40022000
 8003880:	00001388 	.word	0x00001388
 8003884:	40021000 	.word	0x40021000
 8003888:	fffff0ff 	.word	0xfffff0ff
 800388c:	ffff8fff 	.word	0xffff8fff
 8003890:	08005a60 	.word	0x08005a60
 8003894:	20000000 	.word	0x20000000
 8003898:	20000004 	.word	0x20000004

0800389c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038a2:	4b3c      	ldr	r3, [pc, #240]	; (8003994 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2238      	movs	r2, #56	; 0x38
 80038a8:	4013      	ands	r3, r2
 80038aa:	d10f      	bne.n	80038cc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80038ac:	4b39      	ldr	r3, [pc, #228]	; (8003994 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	0adb      	lsrs	r3, r3, #11
 80038b2:	2207      	movs	r2, #7
 80038b4:	4013      	ands	r3, r2
 80038b6:	2201      	movs	r2, #1
 80038b8:	409a      	lsls	r2, r3
 80038ba:	0013      	movs	r3, r2
 80038bc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80038be:	6839      	ldr	r1, [r7, #0]
 80038c0:	4835      	ldr	r0, [pc, #212]	; (8003998 <HAL_RCC_GetSysClockFreq+0xfc>)
 80038c2:	f7fc fc1d 	bl	8000100 <__udivsi3>
 80038c6:	0003      	movs	r3, r0
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	e05d      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038cc:	4b31      	ldr	r3, [pc, #196]	; (8003994 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2238      	movs	r2, #56	; 0x38
 80038d2:	4013      	ands	r3, r2
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d102      	bne.n	80038de <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038d8:	4b2f      	ldr	r3, [pc, #188]	; (8003998 <HAL_RCC_GetSysClockFreq+0xfc>)
 80038da:	613b      	str	r3, [r7, #16]
 80038dc:	e054      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038de:	4b2d      	ldr	r3, [pc, #180]	; (8003994 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	2238      	movs	r2, #56	; 0x38
 80038e4:	4013      	ands	r3, r2
 80038e6:	2b10      	cmp	r3, #16
 80038e8:	d138      	bne.n	800395c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80038ea:	4b2a      	ldr	r3, [pc, #168]	; (8003994 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	2203      	movs	r2, #3
 80038f0:	4013      	ands	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038f4:	4b27      	ldr	r3, [pc, #156]	; (8003994 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	091b      	lsrs	r3, r3, #4
 80038fa:	2207      	movs	r2, #7
 80038fc:	4013      	ands	r3, r2
 80038fe:	3301      	adds	r3, #1
 8003900:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b03      	cmp	r3, #3
 8003906:	d10d      	bne.n	8003924 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003908:	68b9      	ldr	r1, [r7, #8]
 800390a:	4823      	ldr	r0, [pc, #140]	; (8003998 <HAL_RCC_GetSysClockFreq+0xfc>)
 800390c:	f7fc fbf8 	bl	8000100 <__udivsi3>
 8003910:	0003      	movs	r3, r0
 8003912:	0019      	movs	r1, r3
 8003914:	4b1f      	ldr	r3, [pc, #124]	; (8003994 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	0a1b      	lsrs	r3, r3, #8
 800391a:	227f      	movs	r2, #127	; 0x7f
 800391c:	4013      	ands	r3, r2
 800391e:	434b      	muls	r3, r1
 8003920:	617b      	str	r3, [r7, #20]
        break;
 8003922:	e00d      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003924:	68b9      	ldr	r1, [r7, #8]
 8003926:	481c      	ldr	r0, [pc, #112]	; (8003998 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003928:	f7fc fbea 	bl	8000100 <__udivsi3>
 800392c:	0003      	movs	r3, r0
 800392e:	0019      	movs	r1, r3
 8003930:	4b18      	ldr	r3, [pc, #96]	; (8003994 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	0a1b      	lsrs	r3, r3, #8
 8003936:	227f      	movs	r2, #127	; 0x7f
 8003938:	4013      	ands	r3, r2
 800393a:	434b      	muls	r3, r1
 800393c:	617b      	str	r3, [r7, #20]
        break;
 800393e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003940:	4b14      	ldr	r3, [pc, #80]	; (8003994 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	0f5b      	lsrs	r3, r3, #29
 8003946:	2207      	movs	r2, #7
 8003948:	4013      	ands	r3, r2
 800394a:	3301      	adds	r3, #1
 800394c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	6978      	ldr	r0, [r7, #20]
 8003952:	f7fc fbd5 	bl	8000100 <__udivsi3>
 8003956:	0003      	movs	r3, r0
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	e015      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800395c:	4b0d      	ldr	r3, [pc, #52]	; (8003994 <HAL_RCC_GetSysClockFreq+0xf8>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	2238      	movs	r2, #56	; 0x38
 8003962:	4013      	ands	r3, r2
 8003964:	2b20      	cmp	r3, #32
 8003966:	d103      	bne.n	8003970 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003968:	2380      	movs	r3, #128	; 0x80
 800396a:	021b      	lsls	r3, r3, #8
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	e00b      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003970:	4b08      	ldr	r3, [pc, #32]	; (8003994 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	2238      	movs	r2, #56	; 0x38
 8003976:	4013      	ands	r3, r2
 8003978:	2b18      	cmp	r3, #24
 800397a:	d103      	bne.n	8003984 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800397c:	23fa      	movs	r3, #250	; 0xfa
 800397e:	01db      	lsls	r3, r3, #7
 8003980:	613b      	str	r3, [r7, #16]
 8003982:	e001      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003984:	2300      	movs	r3, #0
 8003986:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003988:	693b      	ldr	r3, [r7, #16]
}
 800398a:	0018      	movs	r0, r3
 800398c:	46bd      	mov	sp, r7
 800398e:	b006      	add	sp, #24
 8003990:	bd80      	pop	{r7, pc}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	40021000 	.word	0x40021000
 8003998:	00f42400 	.word	0x00f42400

0800399c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039a0:	4b02      	ldr	r3, [pc, #8]	; (80039ac <HAL_RCC_GetHCLKFreq+0x10>)
 80039a2:	681b      	ldr	r3, [r3, #0]
}
 80039a4:	0018      	movs	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	20000000 	.word	0x20000000

080039b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039b0:	b5b0      	push	{r4, r5, r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80039b4:	f7ff fff2 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80039b8:	0004      	movs	r4, r0
 80039ba:	f7ff fb4b 	bl	8003054 <LL_RCC_GetAPB1Prescaler>
 80039be:	0003      	movs	r3, r0
 80039c0:	0b1a      	lsrs	r2, r3, #12
 80039c2:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039c4:	0092      	lsls	r2, r2, #2
 80039c6:	58d3      	ldr	r3, [r2, r3]
 80039c8:	221f      	movs	r2, #31
 80039ca:	4013      	ands	r3, r2
 80039cc:	40dc      	lsrs	r4, r3
 80039ce:	0023      	movs	r3, r4
}
 80039d0:	0018      	movs	r0, r3
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bdb0      	pop	{r4, r5, r7, pc}
 80039d6:	46c0      	nop			; (mov r8, r8)
 80039d8:	08005aa0 	.word	0x08005aa0

080039dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80039e4:	2313      	movs	r3, #19
 80039e6:	18fb      	adds	r3, r7, r3
 80039e8:	2200      	movs	r2, #0
 80039ea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039ec:	2312      	movs	r3, #18
 80039ee:	18fb      	adds	r3, r7, r3
 80039f0:	2200      	movs	r2, #0
 80039f2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	2380      	movs	r3, #128	; 0x80
 80039fa:	029b      	lsls	r3, r3, #10
 80039fc:	4013      	ands	r3, r2
 80039fe:	d100      	bne.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003a00:	e0a3      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a02:	2011      	movs	r0, #17
 8003a04:	183b      	adds	r3, r7, r0
 8003a06:	2200      	movs	r2, #0
 8003a08:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a0a:	4b86      	ldr	r3, [pc, #536]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a0e:	2380      	movs	r3, #128	; 0x80
 8003a10:	055b      	lsls	r3, r3, #21
 8003a12:	4013      	ands	r3, r2
 8003a14:	d110      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a16:	4b83      	ldr	r3, [pc, #524]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a1a:	4b82      	ldr	r3, [pc, #520]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a1c:	2180      	movs	r1, #128	; 0x80
 8003a1e:	0549      	lsls	r1, r1, #21
 8003a20:	430a      	orrs	r2, r1
 8003a22:	63da      	str	r2, [r3, #60]	; 0x3c
 8003a24:	4b7f      	ldr	r3, [pc, #508]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a28:	2380      	movs	r3, #128	; 0x80
 8003a2a:	055b      	lsls	r3, r3, #21
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	60bb      	str	r3, [r7, #8]
 8003a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a32:	183b      	adds	r3, r7, r0
 8003a34:	2201      	movs	r2, #1
 8003a36:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a38:	4b7b      	ldr	r3, [pc, #492]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	4b7a      	ldr	r3, [pc, #488]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003a3e:	2180      	movs	r1, #128	; 0x80
 8003a40:	0049      	lsls	r1, r1, #1
 8003a42:	430a      	orrs	r2, r1
 8003a44:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a46:	f7fe f815 	bl	8001a74 <HAL_GetTick>
 8003a4a:	0003      	movs	r3, r0
 8003a4c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a4e:	e00b      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a50:	f7fe f810 	bl	8001a74 <HAL_GetTick>
 8003a54:	0002      	movs	r2, r0
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d904      	bls.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003a5e:	2313      	movs	r3, #19
 8003a60:	18fb      	adds	r3, r7, r3
 8003a62:	2203      	movs	r2, #3
 8003a64:	701a      	strb	r2, [r3, #0]
        break;
 8003a66:	e005      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a68:	4b6f      	ldr	r3, [pc, #444]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	2380      	movs	r3, #128	; 0x80
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	4013      	ands	r3, r2
 8003a72:	d0ed      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003a74:	2313      	movs	r3, #19
 8003a76:	18fb      	adds	r3, r7, r3
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d154      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a7e:	4b69      	ldr	r3, [pc, #420]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a82:	23c0      	movs	r3, #192	; 0xc0
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4013      	ands	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d019      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d014      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a9a:	4b62      	ldr	r3, [pc, #392]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9e:	4a63      	ldr	r2, [pc, #396]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003aa4:	4b5f      	ldr	r3, [pc, #380]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003aa6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003aa8:	4b5e      	ldr	r3, [pc, #376]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003aaa:	2180      	movs	r1, #128	; 0x80
 8003aac:	0249      	lsls	r1, r1, #9
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ab2:	4b5c      	ldr	r3, [pc, #368]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ab4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ab6:	4b5b      	ldr	r3, [pc, #364]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ab8:	495d      	ldr	r1, [pc, #372]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003aba:	400a      	ands	r2, r1
 8003abc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003abe:	4b59      	ldr	r3, [pc, #356]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	4013      	ands	r3, r2
 8003aca:	d016      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003acc:	f7fd ffd2 	bl	8001a74 <HAL_GetTick>
 8003ad0:	0003      	movs	r3, r0
 8003ad2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ad4:	e00c      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad6:	f7fd ffcd 	bl	8001a74 <HAL_GetTick>
 8003ada:	0002      	movs	r2, r0
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	4a54      	ldr	r2, [pc, #336]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d904      	bls.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003ae6:	2313      	movs	r3, #19
 8003ae8:	18fb      	adds	r3, r7, r3
 8003aea:	2203      	movs	r2, #3
 8003aec:	701a      	strb	r2, [r3, #0]
            break;
 8003aee:	e004      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003af0:	4b4c      	ldr	r3, [pc, #304]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af4:	2202      	movs	r2, #2
 8003af6:	4013      	ands	r3, r2
 8003af8:	d0ed      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003afa:	2313      	movs	r3, #19
 8003afc:	18fb      	adds	r3, r7, r3
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10a      	bne.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b04:	4b47      	ldr	r3, [pc, #284]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b08:	4a48      	ldr	r2, [pc, #288]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	0019      	movs	r1, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699a      	ldr	r2, [r3, #24]
 8003b12:	4b44      	ldr	r3, [pc, #272]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b14:	430a      	orrs	r2, r1
 8003b16:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b18:	e00c      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b1a:	2312      	movs	r3, #18
 8003b1c:	18fb      	adds	r3, r7, r3
 8003b1e:	2213      	movs	r2, #19
 8003b20:	18ba      	adds	r2, r7, r2
 8003b22:	7812      	ldrb	r2, [r2, #0]
 8003b24:	701a      	strb	r2, [r3, #0]
 8003b26:	e005      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b28:	2312      	movs	r3, #18
 8003b2a:	18fb      	adds	r3, r7, r3
 8003b2c:	2213      	movs	r2, #19
 8003b2e:	18ba      	adds	r2, r7, r2
 8003b30:	7812      	ldrb	r2, [r2, #0]
 8003b32:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b34:	2311      	movs	r3, #17
 8003b36:	18fb      	adds	r3, r7, r3
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d105      	bne.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b3e:	4b39      	ldr	r3, [pc, #228]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b42:	4b38      	ldr	r3, [pc, #224]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b44:	493c      	ldr	r1, [pc, #240]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003b46:	400a      	ands	r2, r1
 8003b48:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	4013      	ands	r3, r2
 8003b52:	d009      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b54:	4b33      	ldr	r3, [pc, #204]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b58:	2203      	movs	r2, #3
 8003b5a:	4393      	bics	r3, r2
 8003b5c:	0019      	movs	r1, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	4b30      	ldr	r3, [pc, #192]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b64:	430a      	orrs	r2, r1
 8003b66:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	4013      	ands	r3, r2
 8003b70:	d009      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b72:	4b2c      	ldr	r3, [pc, #176]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b76:	220c      	movs	r2, #12
 8003b78:	4393      	bics	r3, r2
 8003b7a:	0019      	movs	r1, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	4b28      	ldr	r3, [pc, #160]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b82:	430a      	orrs	r2, r1
 8003b84:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	d009      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b90:	4b24      	ldr	r3, [pc, #144]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b94:	4a29      	ldr	r2, [pc, #164]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	0019      	movs	r1, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	4b21      	ldr	r3, [pc, #132]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	2380      	movs	r3, #128	; 0x80
 8003baa:	01db      	lsls	r3, r3, #7
 8003bac:	4013      	ands	r3, r2
 8003bae:	d015      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bb0:	4b1c      	ldr	r3, [pc, #112]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	0899      	lsrs	r1, r3, #2
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	695a      	ldr	r2, [r3, #20]
 8003bbc:	4b19      	ldr	r3, [pc, #100]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695a      	ldr	r2, [r3, #20]
 8003bc6:	2380      	movs	r3, #128	; 0x80
 8003bc8:	05db      	lsls	r3, r3, #23
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d106      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003bce:	4b15      	ldr	r3, [pc, #84]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	4b14      	ldr	r3, [pc, #80]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003bd4:	2180      	movs	r1, #128	; 0x80
 8003bd6:	0249      	lsls	r1, r1, #9
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	2380      	movs	r3, #128	; 0x80
 8003be2:	011b      	lsls	r3, r3, #4
 8003be4:	4013      	ands	r3, r2
 8003be6:	d016      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003be8:	4b0e      	ldr	r3, [pc, #56]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bec:	4a14      	ldr	r2, [pc, #80]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bee:	4013      	ands	r3, r2
 8003bf0:	0019      	movs	r1, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691a      	ldr	r2, [r3, #16]
 8003bf6:	4b0b      	ldr	r3, [pc, #44]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	2380      	movs	r3, #128	; 0x80
 8003c02:	01db      	lsls	r3, r3, #7
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d106      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003c08:	4b06      	ldr	r3, [pc, #24]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c0e:	2180      	movs	r1, #128	; 0x80
 8003c10:	0249      	lsls	r1, r1, #9
 8003c12:	430a      	orrs	r2, r1
 8003c14:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003c16:	2312      	movs	r3, #18
 8003c18:	18fb      	adds	r3, r7, r3
 8003c1a:	781b      	ldrb	r3, [r3, #0]
}
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	b006      	add	sp, #24
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40021000 	.word	0x40021000
 8003c28:	40007000 	.word	0x40007000
 8003c2c:	fffffcff 	.word	0xfffffcff
 8003c30:	fffeffff 	.word	0xfffeffff
 8003c34:	00001388 	.word	0x00001388
 8003c38:	efffffff 	.word	0xefffffff
 8003c3c:	ffffcfff 	.word	0xffffcfff
 8003c40:	ffff3fff 	.word	0xffff3fff

08003c44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e0a8      	b.n	8003da8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d109      	bne.n	8003c72 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	2382      	movs	r3, #130	; 0x82
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d009      	beq.n	8003c7e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	61da      	str	r2, [r3, #28]
 8003c70:	e005      	b.n	8003c7e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	225d      	movs	r2, #93	; 0x5d
 8003c88:	5c9b      	ldrb	r3, [r3, r2]
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d107      	bne.n	8003ca0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	225c      	movs	r2, #92	; 0x5c
 8003c94:	2100      	movs	r1, #0
 8003c96:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	f7fc ff5e 	bl	8000b5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	225d      	movs	r2, #93	; 0x5d
 8003ca4:	2102      	movs	r1, #2
 8003ca6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2140      	movs	r1, #64	; 0x40
 8003cb4:	438a      	bics	r2, r1
 8003cb6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68da      	ldr	r2, [r3, #12]
 8003cbc:	23e0      	movs	r3, #224	; 0xe0
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d902      	bls.n	8003cca <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	e002      	b.n	8003cd0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003cca:	2380      	movs	r3, #128	; 0x80
 8003ccc:	015b      	lsls	r3, r3, #5
 8003cce:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	23f0      	movs	r3, #240	; 0xf0
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d008      	beq.n	8003cee <HAL_SPI_Init+0xaa>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	23e0      	movs	r3, #224	; 0xe0
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d002      	beq.n	8003cee <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	2382      	movs	r3, #130	; 0x82
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	401a      	ands	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6899      	ldr	r1, [r3, #8]
 8003cfc:	2384      	movs	r3, #132	; 0x84
 8003cfe:	021b      	lsls	r3, r3, #8
 8003d00:	400b      	ands	r3, r1
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	2102      	movs	r1, #2
 8003d0a:	400b      	ands	r3, r1
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	2101      	movs	r1, #1
 8003d14:	400b      	ands	r3, r1
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6999      	ldr	r1, [r3, #24]
 8003d1c:	2380      	movs	r3, #128	; 0x80
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	400b      	ands	r3, r1
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	2138      	movs	r1, #56	; 0x38
 8003d2a:	400b      	ands	r3, r1
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	2180      	movs	r1, #128	; 0x80
 8003d34:	400b      	ands	r3, r1
 8003d36:	431a      	orrs	r2, r3
 8003d38:	0011      	movs	r1, r2
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d3e:	2380      	movs	r3, #128	; 0x80
 8003d40:	019b      	lsls	r3, r3, #6
 8003d42:	401a      	ands	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	0c1b      	lsrs	r3, r3, #16
 8003d52:	2204      	movs	r2, #4
 8003d54:	401a      	ands	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	2110      	movs	r1, #16
 8003d5c:	400b      	ands	r3, r1
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d64:	2108      	movs	r1, #8
 8003d66:	400b      	ands	r3, r1
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68d9      	ldr	r1, [r3, #12]
 8003d6e:	23f0      	movs	r3, #240	; 0xf0
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	400b      	ands	r3, r1
 8003d74:	431a      	orrs	r2, r3
 8003d76:	0011      	movs	r1, r2
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	2380      	movs	r3, #128	; 0x80
 8003d7c:	015b      	lsls	r3, r3, #5
 8003d7e:	401a      	ands	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	69da      	ldr	r2, [r3, #28]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4907      	ldr	r1, [pc, #28]	; (8003db0 <HAL_SPI_Init+0x16c>)
 8003d94:	400a      	ands	r2, r1
 8003d96:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	225d      	movs	r2, #93	; 0x5d
 8003da2:	2101      	movs	r1, #1
 8003da4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	0018      	movs	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b004      	add	sp, #16
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	fffff7ff 	.word	0xfffff7ff

08003db4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e04a      	b.n	8003e5c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	223d      	movs	r2, #61	; 0x3d
 8003dca:	5c9b      	ldrb	r3, [r3, r2]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d107      	bne.n	8003de2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	223c      	movs	r2, #60	; 0x3c
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f7fd fb49 	bl	8001474 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	223d      	movs	r2, #61	; 0x3d
 8003de6:	2102      	movs	r1, #2
 8003de8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	3304      	adds	r3, #4
 8003df2:	0019      	movs	r1, r3
 8003df4:	0010      	movs	r0, r2
 8003df6:	f000 fc99 	bl	800472c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2248      	movs	r2, #72	; 0x48
 8003dfe:	2101      	movs	r1, #1
 8003e00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	223e      	movs	r2, #62	; 0x3e
 8003e06:	2101      	movs	r1, #1
 8003e08:	5499      	strb	r1, [r3, r2]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	223f      	movs	r2, #63	; 0x3f
 8003e0e:	2101      	movs	r1, #1
 8003e10:	5499      	strb	r1, [r3, r2]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2240      	movs	r2, #64	; 0x40
 8003e16:	2101      	movs	r1, #1
 8003e18:	5499      	strb	r1, [r3, r2]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2241      	movs	r2, #65	; 0x41
 8003e1e:	2101      	movs	r1, #1
 8003e20:	5499      	strb	r1, [r3, r2]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2242      	movs	r2, #66	; 0x42
 8003e26:	2101      	movs	r1, #1
 8003e28:	5499      	strb	r1, [r3, r2]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2243      	movs	r2, #67	; 0x43
 8003e2e:	2101      	movs	r1, #1
 8003e30:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2244      	movs	r2, #68	; 0x44
 8003e36:	2101      	movs	r1, #1
 8003e38:	5499      	strb	r1, [r3, r2]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2245      	movs	r2, #69	; 0x45
 8003e3e:	2101      	movs	r1, #1
 8003e40:	5499      	strb	r1, [r3, r2]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2246      	movs	r2, #70	; 0x46
 8003e46:	2101      	movs	r1, #1
 8003e48:	5499      	strb	r1, [r3, r2]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2247      	movs	r2, #71	; 0x47
 8003e4e:	2101      	movs	r1, #1
 8003e50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	223d      	movs	r2, #61	; 0x3d
 8003e56:	2101      	movs	r1, #1
 8003e58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	b002      	add	sp, #8
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	223d      	movs	r2, #61	; 0x3d
 8003e70:	5c9b      	ldrb	r3, [r3, r2]
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d001      	beq.n	8003e7c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e034      	b.n	8003ee6 <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	223d      	movs	r2, #61	; 0x3d
 8003e80:	2102      	movs	r1, #2
 8003e82:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a19      	ldr	r2, [pc, #100]	; (8003ef0 <HAL_TIM_Base_Start+0x8c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d009      	beq.n	8003ea2 <HAL_TIM_Base_Start+0x3e>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a18      	ldr	r2, [pc, #96]	; (8003ef4 <HAL_TIM_Base_Start+0x90>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d004      	beq.n	8003ea2 <HAL_TIM_Base_Start+0x3e>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a16      	ldr	r2, [pc, #88]	; (8003ef8 <HAL_TIM_Base_Start+0x94>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d116      	bne.n	8003ed0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	4a14      	ldr	r2, [pc, #80]	; (8003efc <HAL_TIM_Base_Start+0x98>)
 8003eaa:	4013      	ands	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2b06      	cmp	r3, #6
 8003eb2:	d016      	beq.n	8003ee2 <HAL_TIM_Base_Start+0x7e>
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	2380      	movs	r3, #128	; 0x80
 8003eb8:	025b      	lsls	r3, r3, #9
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d011      	beq.n	8003ee2 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2101      	movs	r1, #1
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ece:	e008      	b.n	8003ee2 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2101      	movs	r1, #1
 8003edc:	430a      	orrs	r2, r1
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	e000      	b.n	8003ee4 <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	b004      	add	sp, #16
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	46c0      	nop			; (mov r8, r8)
 8003ef0:	40012c00 	.word	0x40012c00
 8003ef4:	40000400 	.word	0x40000400
 8003ef8:	40014000 	.word	0x40014000
 8003efc:	00010007 	.word	0x00010007

08003f00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e04a      	b.n	8003fa8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	223d      	movs	r2, #61	; 0x3d
 8003f16:	5c9b      	ldrb	r3, [r3, r2]
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d107      	bne.n	8003f2e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	223c      	movs	r2, #60	; 0x3c
 8003f22:	2100      	movs	r1, #0
 8003f24:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f7fd fb03 	bl	8001534 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	223d      	movs	r2, #61	; 0x3d
 8003f32:	2102      	movs	r1, #2
 8003f34:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	0019      	movs	r1, r3
 8003f40:	0010      	movs	r0, r2
 8003f42:	f000 fbf3 	bl	800472c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2248      	movs	r2, #72	; 0x48
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	223e      	movs	r2, #62	; 0x3e
 8003f52:	2101      	movs	r1, #1
 8003f54:	5499      	strb	r1, [r3, r2]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	223f      	movs	r2, #63	; 0x3f
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	5499      	strb	r1, [r3, r2]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2240      	movs	r2, #64	; 0x40
 8003f62:	2101      	movs	r1, #1
 8003f64:	5499      	strb	r1, [r3, r2]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2241      	movs	r2, #65	; 0x41
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	5499      	strb	r1, [r3, r2]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2242      	movs	r2, #66	; 0x42
 8003f72:	2101      	movs	r1, #1
 8003f74:	5499      	strb	r1, [r3, r2]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2243      	movs	r2, #67	; 0x43
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2244      	movs	r2, #68	; 0x44
 8003f82:	2101      	movs	r1, #1
 8003f84:	5499      	strb	r1, [r3, r2]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2245      	movs	r2, #69	; 0x45
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	5499      	strb	r1, [r3, r2]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2246      	movs	r2, #70	; 0x46
 8003f92:	2101      	movs	r1, #1
 8003f94:	5499      	strb	r1, [r3, r2]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2247      	movs	r2, #71	; 0x47
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	223d      	movs	r2, #61	; 0x3d
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	0018      	movs	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	b002      	add	sp, #8
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e090      	b.n	80040e6 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	223d      	movs	r2, #61	; 0x3d
 8003fc8:	5c9b      	ldrb	r3, [r3, r2]
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d107      	bne.n	8003fe0 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	223c      	movs	r2, #60	; 0x3c
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f7fd f9b6 	bl	800134c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	223d      	movs	r2, #61	; 0x3d
 8003fe4:	2102      	movs	r1, #2
 8003fe6:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	493f      	ldr	r1, [pc, #252]	; (80040f0 <HAL_TIM_Encoder_Init+0x140>)
 8003ff4:	400a      	ands	r2, r1
 8003ff6:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3304      	adds	r3, #4
 8004000:	0019      	movs	r1, r3
 8004002:	0010      	movs	r0, r2
 8004004:	f000 fb92 	bl	800472c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	4313      	orrs	r3, r2
 8004028:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	4a31      	ldr	r2, [pc, #196]	; (80040f4 <HAL_TIM_Encoder_Init+0x144>)
 800402e:	4013      	ands	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	021b      	lsls	r3, r3, #8
 800403c:	4313      	orrs	r3, r2
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	4a2c      	ldr	r2, [pc, #176]	; (80040f8 <HAL_TIM_Encoder_Init+0x148>)
 8004048:	4013      	ands	r3, r2
 800404a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	4a2b      	ldr	r2, [pc, #172]	; (80040fc <HAL_TIM_Encoder_Init+0x14c>)
 8004050:	4013      	ands	r3, r2
 8004052:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	021b      	lsls	r3, r3, #8
 800405e:	4313      	orrs	r3, r2
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	011a      	lsls	r2, r3, #4
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	031b      	lsls	r3, r3, #12
 8004072:	4313      	orrs	r3, r2
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2222      	movs	r2, #34	; 0x22
 800407e:	4393      	bics	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2288      	movs	r2, #136	; 0x88
 8004086:	4393      	bics	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	4313      	orrs	r3, r2
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	4313      	orrs	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2248      	movs	r2, #72	; 0x48
 80040b8:	2101      	movs	r1, #1
 80040ba:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	223e      	movs	r2, #62	; 0x3e
 80040c0:	2101      	movs	r1, #1
 80040c2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	223f      	movs	r2, #63	; 0x3f
 80040c8:	2101      	movs	r1, #1
 80040ca:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2244      	movs	r2, #68	; 0x44
 80040d0:	2101      	movs	r1, #1
 80040d2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2245      	movs	r2, #69	; 0x45
 80040d8:	2101      	movs	r1, #1
 80040da:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	223d      	movs	r2, #61	; 0x3d
 80040e0:	2101      	movs	r1, #1
 80040e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	0018      	movs	r0, r3
 80040e8:	46bd      	mov	sp, r7
 80040ea:	b006      	add	sp, #24
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	46c0      	nop			; (mov r8, r8)
 80040f0:	fffebff8 	.word	0xfffebff8
 80040f4:	fffffcfc 	.word	0xfffffcfc
 80040f8:	fffff3f3 	.word	0xfffff3f3
 80040fc:	ffff0f0f 	.word	0xffff0f0f

08004100 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004100:	b590      	push	{r4, r7, lr}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800410a:	200f      	movs	r0, #15
 800410c:	183b      	adds	r3, r7, r0
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	213e      	movs	r1, #62	; 0x3e
 8004112:	5c52      	ldrb	r2, [r2, r1]
 8004114:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004116:	230e      	movs	r3, #14
 8004118:	18fb      	adds	r3, r7, r3
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	213f      	movs	r1, #63	; 0x3f
 800411e:	5c52      	ldrb	r2, [r2, r1]
 8004120:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004122:	240d      	movs	r4, #13
 8004124:	193b      	adds	r3, r7, r4
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	2144      	movs	r1, #68	; 0x44
 800412a:	5c52      	ldrb	r2, [r2, r1]
 800412c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800412e:	230c      	movs	r3, #12
 8004130:	18fb      	adds	r3, r7, r3
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	2145      	movs	r1, #69	; 0x45
 8004136:	5c52      	ldrb	r2, [r2, r1]
 8004138:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d112      	bne.n	8004166 <HAL_TIM_Encoder_Start_IT+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004140:	183b      	adds	r3, r7, r0
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d103      	bne.n	8004150 <HAL_TIM_Encoder_Start_IT+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004148:	193b      	adds	r3, r7, r4
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d001      	beq.n	8004154 <HAL_TIM_Encoder_Start_IT+0x54>
    {
      return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e095      	b.n	8004280 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	223e      	movs	r2, #62	; 0x3e
 8004158:	2102      	movs	r1, #2
 800415a:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2244      	movs	r2, #68	; 0x44
 8004160:	2102      	movs	r1, #2
 8004162:	5499      	strb	r1, [r3, r2]
 8004164:	e03d      	b.n	80041e2 <HAL_TIM_Encoder_Start_IT+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b04      	cmp	r3, #4
 800416a:	d114      	bne.n	8004196 <HAL_TIM_Encoder_Start_IT+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800416c:	230e      	movs	r3, #14
 800416e:	18fb      	adds	r3, r7, r3
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d104      	bne.n	8004180 <HAL_TIM_Encoder_Start_IT+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004176:	230c      	movs	r3, #12
 8004178:	18fb      	adds	r3, r7, r3
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d001      	beq.n	8004184 <HAL_TIM_Encoder_Start_IT+0x84>
    {
      return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e07d      	b.n	8004280 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	223f      	movs	r2, #63	; 0x3f
 8004188:	2102      	movs	r1, #2
 800418a:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2245      	movs	r2, #69	; 0x45
 8004190:	2102      	movs	r1, #2
 8004192:	5499      	strb	r1, [r3, r2]
 8004194:	e025      	b.n	80041e2 <HAL_TIM_Encoder_Start_IT+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004196:	230f      	movs	r3, #15
 8004198:	18fb      	adds	r3, r7, r3
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d10e      	bne.n	80041be <HAL_TIM_Encoder_Start_IT+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80041a0:	230e      	movs	r3, #14
 80041a2:	18fb      	adds	r3, r7, r3
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d109      	bne.n	80041be <HAL_TIM_Encoder_Start_IT+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041aa:	230d      	movs	r3, #13
 80041ac:	18fb      	adds	r3, r7, r3
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d104      	bne.n	80041be <HAL_TIM_Encoder_Start_IT+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80041b4:	230c      	movs	r3, #12
 80041b6:	18fb      	adds	r3, r7, r3
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d001      	beq.n	80041c2 <HAL_TIM_Encoder_Start_IT+0xc2>
    {
      return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e05e      	b.n	8004280 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	223e      	movs	r2, #62	; 0x3e
 80041c6:	2102      	movs	r1, #2
 80041c8:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	223f      	movs	r2, #63	; 0x3f
 80041ce:	2102      	movs	r1, #2
 80041d0:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2244      	movs	r2, #68	; 0x44
 80041d6:	2102      	movs	r1, #2
 80041d8:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2245      	movs	r2, #69	; 0x45
 80041de:	2102      	movs	r1, #2
 80041e0:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d003      	beq.n	80041f0 <HAL_TIM_Encoder_Start_IT+0xf0>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d010      	beq.n	8004210 <HAL_TIM_Encoder_Start_IT+0x110>
 80041ee:	e01f      	b.n	8004230 <HAL_TIM_Encoder_Start_IT+0x130>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2201      	movs	r2, #1
 80041f6:	2100      	movs	r1, #0
 80041f8:	0018      	movs	r0, r3
 80041fa:	f000 fdd1 	bl	8004da0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2102      	movs	r1, #2
 800420a:	430a      	orrs	r2, r1
 800420c:	60da      	str	r2, [r3, #12]
      break;
 800420e:	e02e      	b.n	800426e <HAL_TIM_Encoder_Start_IT+0x16e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2201      	movs	r2, #1
 8004216:	2104      	movs	r1, #4
 8004218:	0018      	movs	r0, r3
 800421a:	f000 fdc1 	bl	8004da0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68da      	ldr	r2, [r3, #12]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2104      	movs	r1, #4
 800422a:	430a      	orrs	r2, r1
 800422c:	60da      	str	r2, [r3, #12]
      break;
 800422e:	e01e      	b.n	800426e <HAL_TIM_Encoder_Start_IT+0x16e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2201      	movs	r2, #1
 8004236:	2100      	movs	r1, #0
 8004238:	0018      	movs	r0, r3
 800423a:	f000 fdb1 	bl	8004da0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2201      	movs	r2, #1
 8004244:	2104      	movs	r1, #4
 8004246:	0018      	movs	r0, r3
 8004248:	f000 fdaa 	bl	8004da0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2102      	movs	r1, #2
 8004258:	430a      	orrs	r2, r1
 800425a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2104      	movs	r1, #4
 8004268:	430a      	orrs	r2, r1
 800426a:	60da      	str	r2, [r3, #12]
      break;
 800426c:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2101      	movs	r1, #1
 800427a:	430a      	orrs	r2, r1
 800427c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	0018      	movs	r0, r3
 8004282:	46bd      	mov	sp, r7
 8004284:	b005      	add	sp, #20
 8004286:	bd90      	pop	{r4, r7, pc}

08004288 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	2202      	movs	r2, #2
 8004298:	4013      	ands	r3, r2
 800429a:	2b02      	cmp	r3, #2
 800429c:	d124      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	2202      	movs	r2, #2
 80042a6:	4013      	ands	r3, r2
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d11d      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2203      	movs	r2, #3
 80042b2:	4252      	negs	r2, r2
 80042b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	2203      	movs	r2, #3
 80042c4:	4013      	ands	r3, r2
 80042c6:	d004      	beq.n	80042d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	0018      	movs	r0, r3
 80042cc:	f7fc f93c 	bl	8000548 <HAL_TIM_IC_CaptureCallback>
 80042d0:	e007      	b.n	80042e2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	0018      	movs	r0, r3
 80042d6:	f000 fa11 	bl	80046fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	0018      	movs	r0, r3
 80042de:	f000 fa15 	bl	800470c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	2204      	movs	r2, #4
 80042f0:	4013      	ands	r3, r2
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d125      	bne.n	8004342 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	2204      	movs	r2, #4
 80042fe:	4013      	ands	r3, r2
 8004300:	2b04      	cmp	r3, #4
 8004302:	d11e      	bne.n	8004342 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2205      	movs	r2, #5
 800430a:	4252      	negs	r2, r2
 800430c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2202      	movs	r2, #2
 8004312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699a      	ldr	r2, [r3, #24]
 800431a:	23c0      	movs	r3, #192	; 0xc0
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4013      	ands	r3, r2
 8004320:	d004      	beq.n	800432c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	0018      	movs	r0, r3
 8004326:	f7fc f90f 	bl	8000548 <HAL_TIM_IC_CaptureCallback>
 800432a:	e007      	b.n	800433c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	0018      	movs	r0, r3
 8004330:	f000 f9e4 	bl	80046fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	0018      	movs	r0, r3
 8004338:	f000 f9e8 	bl	800470c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	2208      	movs	r2, #8
 800434a:	4013      	ands	r3, r2
 800434c:	2b08      	cmp	r3, #8
 800434e:	d124      	bne.n	800439a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	2208      	movs	r2, #8
 8004358:	4013      	ands	r3, r2
 800435a:	2b08      	cmp	r3, #8
 800435c:	d11d      	bne.n	800439a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2209      	movs	r2, #9
 8004364:	4252      	negs	r2, r2
 8004366:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2204      	movs	r2, #4
 800436c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	2203      	movs	r2, #3
 8004376:	4013      	ands	r3, r2
 8004378:	d004      	beq.n	8004384 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	0018      	movs	r0, r3
 800437e:	f7fc f8e3 	bl	8000548 <HAL_TIM_IC_CaptureCallback>
 8004382:	e007      	b.n	8004394 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	0018      	movs	r0, r3
 8004388:	f000 f9b8 	bl	80046fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	0018      	movs	r0, r3
 8004390:	f000 f9bc 	bl	800470c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	2210      	movs	r2, #16
 80043a2:	4013      	ands	r3, r2
 80043a4:	2b10      	cmp	r3, #16
 80043a6:	d125      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	2210      	movs	r2, #16
 80043b0:	4013      	ands	r3, r2
 80043b2:	2b10      	cmp	r3, #16
 80043b4:	d11e      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2211      	movs	r2, #17
 80043bc:	4252      	negs	r2, r2
 80043be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2208      	movs	r2, #8
 80043c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	69da      	ldr	r2, [r3, #28]
 80043cc:	23c0      	movs	r3, #192	; 0xc0
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4013      	ands	r3, r2
 80043d2:	d004      	beq.n	80043de <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	0018      	movs	r0, r3
 80043d8:	f7fc f8b6 	bl	8000548 <HAL_TIM_IC_CaptureCallback>
 80043dc:	e007      	b.n	80043ee <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	0018      	movs	r0, r3
 80043e2:	f000 f98b 	bl	80046fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	0018      	movs	r0, r3
 80043ea:	f000 f98f 	bl	800470c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	2201      	movs	r2, #1
 80043fc:	4013      	ands	r3, r2
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d10f      	bne.n	8004422 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	2201      	movs	r2, #1
 800440a:	4013      	ands	r3, r2
 800440c:	2b01      	cmp	r3, #1
 800440e:	d108      	bne.n	8004422 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2202      	movs	r2, #2
 8004416:	4252      	negs	r2, r2
 8004418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	0018      	movs	r0, r3
 800441e:	f000 f965 	bl	80046ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	2280      	movs	r2, #128	; 0x80
 800442a:	4013      	ands	r3, r2
 800442c:	2b80      	cmp	r3, #128	; 0x80
 800442e:	d10f      	bne.n	8004450 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	2280      	movs	r2, #128	; 0x80
 8004438:	4013      	ands	r3, r2
 800443a:	2b80      	cmp	r3, #128	; 0x80
 800443c:	d108      	bne.n	8004450 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2281      	movs	r2, #129	; 0x81
 8004444:	4252      	negs	r2, r2
 8004446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	0018      	movs	r0, r3
 800444c:	f000 fde2 	bl	8005014 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	2380      	movs	r3, #128	; 0x80
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	401a      	ands	r2, r3
 800445c:	2380      	movs	r3, #128	; 0x80
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	429a      	cmp	r2, r3
 8004462:	d10e      	bne.n	8004482 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	2280      	movs	r2, #128	; 0x80
 800446c:	4013      	ands	r3, r2
 800446e:	2b80      	cmp	r3, #128	; 0x80
 8004470:	d107      	bne.n	8004482 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a1c      	ldr	r2, [pc, #112]	; (80044e8 <HAL_TIM_IRQHandler+0x260>)
 8004478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	0018      	movs	r0, r3
 800447e:	f000 fdd1 	bl	8005024 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	2240      	movs	r2, #64	; 0x40
 800448a:	4013      	ands	r3, r2
 800448c:	2b40      	cmp	r3, #64	; 0x40
 800448e:	d10f      	bne.n	80044b0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	2240      	movs	r2, #64	; 0x40
 8004498:	4013      	ands	r3, r2
 800449a:	2b40      	cmp	r3, #64	; 0x40
 800449c:	d108      	bne.n	80044b0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2241      	movs	r2, #65	; 0x41
 80044a4:	4252      	negs	r2, r2
 80044a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	0018      	movs	r0, r3
 80044ac:	f000 f936 	bl	800471c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	2220      	movs	r2, #32
 80044b8:	4013      	ands	r3, r2
 80044ba:	2b20      	cmp	r3, #32
 80044bc:	d10f      	bne.n	80044de <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	2220      	movs	r2, #32
 80044c6:	4013      	ands	r3, r2
 80044c8:	2b20      	cmp	r3, #32
 80044ca:	d108      	bne.n	80044de <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2221      	movs	r2, #33	; 0x21
 80044d2:	4252      	negs	r2, r2
 80044d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	0018      	movs	r0, r3
 80044da:	f000 fd93 	bl	8005004 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044de:	46c0      	nop			; (mov r8, r8)
 80044e0:	46bd      	mov	sp, r7
 80044e2:	b002      	add	sp, #8
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	46c0      	nop			; (mov r8, r8)
 80044e8:	fffffeff 	.word	0xfffffeff

080044ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044f8:	2317      	movs	r3, #23
 80044fa:	18fb      	adds	r3, r7, r3
 80044fc:	2200      	movs	r2, #0
 80044fe:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	223c      	movs	r2, #60	; 0x3c
 8004504:	5c9b      	ldrb	r3, [r3, r2]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d101      	bne.n	800450e <HAL_TIM_PWM_ConfigChannel+0x22>
 800450a:	2302      	movs	r3, #2
 800450c:	e0e5      	b.n	80046da <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	223c      	movs	r2, #60	; 0x3c
 8004512:	2101      	movs	r1, #1
 8004514:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b14      	cmp	r3, #20
 800451a:	d900      	bls.n	800451e <HAL_TIM_PWM_ConfigChannel+0x32>
 800451c:	e0d1      	b.n	80046c2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	009a      	lsls	r2, r3, #2
 8004522:	4b70      	ldr	r3, [pc, #448]	; (80046e4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004524:	18d3      	adds	r3, r2, r3
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	0011      	movs	r1, r2
 8004532:	0018      	movs	r0, r3
 8004534:	f000 f970 	bl	8004818 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699a      	ldr	r2, [r3, #24]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2108      	movs	r1, #8
 8004544:	430a      	orrs	r2, r1
 8004546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2104      	movs	r1, #4
 8004554:	438a      	bics	r2, r1
 8004556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6999      	ldr	r1, [r3, #24]
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	691a      	ldr	r2, [r3, #16]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	619a      	str	r2, [r3, #24]
      break;
 800456a:	e0af      	b.n	80046cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	0011      	movs	r1, r2
 8004574:	0018      	movs	r0, r3
 8004576:	f000 f9d9 	bl	800492c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699a      	ldr	r2, [r3, #24]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2180      	movs	r1, #128	; 0x80
 8004586:	0109      	lsls	r1, r1, #4
 8004588:	430a      	orrs	r2, r1
 800458a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699a      	ldr	r2, [r3, #24]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4954      	ldr	r1, [pc, #336]	; (80046e8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004598:	400a      	ands	r2, r1
 800459a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6999      	ldr	r1, [r3, #24]
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	021a      	lsls	r2, r3, #8
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	619a      	str	r2, [r3, #24]
      break;
 80045b0:	e08c      	b.n	80046cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	0011      	movs	r1, r2
 80045ba:	0018      	movs	r0, r3
 80045bc:	f000 fa3a 	bl	8004a34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	69da      	ldr	r2, [r3, #28]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2108      	movs	r1, #8
 80045cc:	430a      	orrs	r2, r1
 80045ce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	69da      	ldr	r2, [r3, #28]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2104      	movs	r1, #4
 80045dc:	438a      	bics	r2, r1
 80045de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	69d9      	ldr	r1, [r3, #28]
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	691a      	ldr	r2, [r3, #16]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	61da      	str	r2, [r3, #28]
      break;
 80045f2:	e06b      	b.n	80046cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	0011      	movs	r1, r2
 80045fc:	0018      	movs	r0, r3
 80045fe:	f000 faa1 	bl	8004b44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	69da      	ldr	r2, [r3, #28]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2180      	movs	r1, #128	; 0x80
 800460e:	0109      	lsls	r1, r1, #4
 8004610:	430a      	orrs	r2, r1
 8004612:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	69da      	ldr	r2, [r3, #28]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4932      	ldr	r1, [pc, #200]	; (80046e8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004620:	400a      	ands	r2, r1
 8004622:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	69d9      	ldr	r1, [r3, #28]
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	021a      	lsls	r2, r3, #8
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	61da      	str	r2, [r3, #28]
      break;
 8004638:	e048      	b.n	80046cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	0011      	movs	r1, r2
 8004642:	0018      	movs	r0, r3
 8004644:	f000 fae8 	bl	8004c18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2108      	movs	r1, #8
 8004654:	430a      	orrs	r2, r1
 8004656:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2104      	movs	r1, #4
 8004664:	438a      	bics	r2, r1
 8004666:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	691a      	ldr	r2, [r3, #16]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800467a:	e027      	b.n	80046cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	0011      	movs	r1, r2
 8004684:	0018      	movs	r0, r3
 8004686:	f000 fb27 	bl	8004cd8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2180      	movs	r1, #128	; 0x80
 8004696:	0109      	lsls	r1, r1, #4
 8004698:	430a      	orrs	r2, r1
 800469a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4910      	ldr	r1, [pc, #64]	; (80046e8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80046a8:	400a      	ands	r2, r1
 80046aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	021a      	lsls	r2, r3, #8
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	430a      	orrs	r2, r1
 80046be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80046c0:	e004      	b.n	80046cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80046c2:	2317      	movs	r3, #23
 80046c4:	18fb      	adds	r3, r7, r3
 80046c6:	2201      	movs	r2, #1
 80046c8:	701a      	strb	r2, [r3, #0]
      break;
 80046ca:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	223c      	movs	r2, #60	; 0x3c
 80046d0:	2100      	movs	r1, #0
 80046d2:	5499      	strb	r1, [r3, r2]

  return status;
 80046d4:	2317      	movs	r3, #23
 80046d6:	18fb      	adds	r3, r7, r3
 80046d8:	781b      	ldrb	r3, [r3, #0]
}
 80046da:	0018      	movs	r0, r3
 80046dc:	46bd      	mov	sp, r7
 80046de:	b006      	add	sp, #24
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	46c0      	nop			; (mov r8, r8)
 80046e4:	08005ac0 	.word	0x08005ac0
 80046e8:	fffffbff 	.word	0xfffffbff

080046ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80046f4:	46c0      	nop			; (mov r8, r8)
 80046f6:	46bd      	mov	sp, r7
 80046f8:	b002      	add	sp, #8
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004704:	46c0      	nop			; (mov r8, r8)
 8004706:	46bd      	mov	sp, r7
 8004708:	b002      	add	sp, #8
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004714:	46c0      	nop			; (mov r8, r8)
 8004716:	46bd      	mov	sp, r7
 8004718:	b002      	add	sp, #8
 800471a:	bd80      	pop	{r7, pc}

0800471c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004724:	46c0      	nop			; (mov r8, r8)
 8004726:	46bd      	mov	sp, r7
 8004728:	b002      	add	sp, #8
 800472a:	bd80      	pop	{r7, pc}

0800472c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a2f      	ldr	r2, [pc, #188]	; (80047fc <TIM_Base_SetConfig+0xd0>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d003      	beq.n	800474c <TIM_Base_SetConfig+0x20>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a2e      	ldr	r2, [pc, #184]	; (8004800 <TIM_Base_SetConfig+0xd4>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d108      	bne.n	800475e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2270      	movs	r2, #112	; 0x70
 8004750:	4393      	bics	r3, r2
 8004752:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a26      	ldr	r2, [pc, #152]	; (80047fc <TIM_Base_SetConfig+0xd0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d013      	beq.n	800478e <TIM_Base_SetConfig+0x62>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a25      	ldr	r2, [pc, #148]	; (8004800 <TIM_Base_SetConfig+0xd4>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d00f      	beq.n	800478e <TIM_Base_SetConfig+0x62>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a24      	ldr	r2, [pc, #144]	; (8004804 <TIM_Base_SetConfig+0xd8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00b      	beq.n	800478e <TIM_Base_SetConfig+0x62>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a23      	ldr	r2, [pc, #140]	; (8004808 <TIM_Base_SetConfig+0xdc>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d007      	beq.n	800478e <TIM_Base_SetConfig+0x62>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a22      	ldr	r2, [pc, #136]	; (800480c <TIM_Base_SetConfig+0xe0>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d003      	beq.n	800478e <TIM_Base_SetConfig+0x62>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a21      	ldr	r2, [pc, #132]	; (8004810 <TIM_Base_SetConfig+0xe4>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d108      	bne.n	80047a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4a20      	ldr	r2, [pc, #128]	; (8004814 <TIM_Base_SetConfig+0xe8>)
 8004792:	4013      	ands	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	4313      	orrs	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2280      	movs	r2, #128	; 0x80
 80047a4:	4393      	bics	r3, r2
 80047a6:	001a      	movs	r2, r3
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	689a      	ldr	r2, [r3, #8]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a0c      	ldr	r2, [pc, #48]	; (80047fc <TIM_Base_SetConfig+0xd0>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d00b      	beq.n	80047e6 <TIM_Base_SetConfig+0xba>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a0d      	ldr	r2, [pc, #52]	; (8004808 <TIM_Base_SetConfig+0xdc>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d007      	beq.n	80047e6 <TIM_Base_SetConfig+0xba>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a0c      	ldr	r2, [pc, #48]	; (800480c <TIM_Base_SetConfig+0xe0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d003      	beq.n	80047e6 <TIM_Base_SetConfig+0xba>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a0b      	ldr	r2, [pc, #44]	; (8004810 <TIM_Base_SetConfig+0xe4>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d103      	bne.n	80047ee <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	691a      	ldr	r2, [r3, #16]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	615a      	str	r2, [r3, #20]
}
 80047f4:	46c0      	nop			; (mov r8, r8)
 80047f6:	46bd      	mov	sp, r7
 80047f8:	b004      	add	sp, #16
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	40012c00 	.word	0x40012c00
 8004800:	40000400 	.word	0x40000400
 8004804:	40002000 	.word	0x40002000
 8004808:	40014000 	.word	0x40014000
 800480c:	40014400 	.word	0x40014400
 8004810:	40014800 	.word	0x40014800
 8004814:	fffffcff 	.word	0xfffffcff

08004818 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	2201      	movs	r2, #1
 8004828:	4393      	bics	r3, r2
 800482a:	001a      	movs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4a32      	ldr	r2, [pc, #200]	; (8004910 <TIM_OC1_SetConfig+0xf8>)
 8004846:	4013      	ands	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2203      	movs	r2, #3
 800484e:	4393      	bics	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	4313      	orrs	r3, r2
 800485a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	2202      	movs	r2, #2
 8004860:	4393      	bics	r3, r2
 8004862:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	4313      	orrs	r3, r2
 800486c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a28      	ldr	r2, [pc, #160]	; (8004914 <TIM_OC1_SetConfig+0xfc>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d00b      	beq.n	800488e <TIM_OC1_SetConfig+0x76>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a27      	ldr	r2, [pc, #156]	; (8004918 <TIM_OC1_SetConfig+0x100>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d007      	beq.n	800488e <TIM_OC1_SetConfig+0x76>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a26      	ldr	r2, [pc, #152]	; (800491c <TIM_OC1_SetConfig+0x104>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d003      	beq.n	800488e <TIM_OC1_SetConfig+0x76>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a25      	ldr	r2, [pc, #148]	; (8004920 <TIM_OC1_SetConfig+0x108>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d10c      	bne.n	80048a8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2208      	movs	r2, #8
 8004892:	4393      	bics	r3, r2
 8004894:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	4313      	orrs	r3, r2
 800489e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2204      	movs	r2, #4
 80048a4:	4393      	bics	r3, r2
 80048a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a1a      	ldr	r2, [pc, #104]	; (8004914 <TIM_OC1_SetConfig+0xfc>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00b      	beq.n	80048c8 <TIM_OC1_SetConfig+0xb0>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a19      	ldr	r2, [pc, #100]	; (8004918 <TIM_OC1_SetConfig+0x100>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d007      	beq.n	80048c8 <TIM_OC1_SetConfig+0xb0>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a18      	ldr	r2, [pc, #96]	; (800491c <TIM_OC1_SetConfig+0x104>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d003      	beq.n	80048c8 <TIM_OC1_SetConfig+0xb0>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a17      	ldr	r2, [pc, #92]	; (8004920 <TIM_OC1_SetConfig+0x108>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d111      	bne.n	80048ec <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	4a16      	ldr	r2, [pc, #88]	; (8004924 <TIM_OC1_SetConfig+0x10c>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	4a15      	ldr	r2, [pc, #84]	; (8004928 <TIM_OC1_SetConfig+0x110>)
 80048d4:	4013      	ands	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	4313      	orrs	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	621a      	str	r2, [r3, #32]
}
 8004906:	46c0      	nop			; (mov r8, r8)
 8004908:	46bd      	mov	sp, r7
 800490a:	b006      	add	sp, #24
 800490c:	bd80      	pop	{r7, pc}
 800490e:	46c0      	nop			; (mov r8, r8)
 8004910:	fffeff8f 	.word	0xfffeff8f
 8004914:	40012c00 	.word	0x40012c00
 8004918:	40014000 	.word	0x40014000
 800491c:	40014400 	.word	0x40014400
 8004920:	40014800 	.word	0x40014800
 8004924:	fffffeff 	.word	0xfffffeff
 8004928:	fffffdff 	.word	0xfffffdff

0800492c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	2210      	movs	r2, #16
 800493c:	4393      	bics	r3, r2
 800493e:	001a      	movs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	4a2e      	ldr	r2, [pc, #184]	; (8004a14 <TIM_OC2_SetConfig+0xe8>)
 800495a:	4013      	ands	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	4a2d      	ldr	r2, [pc, #180]	; (8004a18 <TIM_OC2_SetConfig+0xec>)
 8004962:	4013      	ands	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	021b      	lsls	r3, r3, #8
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	4313      	orrs	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2220      	movs	r2, #32
 8004976:	4393      	bics	r3, r2
 8004978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	4313      	orrs	r3, r2
 8004984:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a24      	ldr	r2, [pc, #144]	; (8004a1c <TIM_OC2_SetConfig+0xf0>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d10d      	bne.n	80049aa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2280      	movs	r2, #128	; 0x80
 8004992:	4393      	bics	r3, r2
 8004994:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	011b      	lsls	r3, r3, #4
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2240      	movs	r2, #64	; 0x40
 80049a6:	4393      	bics	r3, r2
 80049a8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a1b      	ldr	r2, [pc, #108]	; (8004a1c <TIM_OC2_SetConfig+0xf0>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d00b      	beq.n	80049ca <TIM_OC2_SetConfig+0x9e>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a1a      	ldr	r2, [pc, #104]	; (8004a20 <TIM_OC2_SetConfig+0xf4>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d007      	beq.n	80049ca <TIM_OC2_SetConfig+0x9e>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a19      	ldr	r2, [pc, #100]	; (8004a24 <TIM_OC2_SetConfig+0xf8>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d003      	beq.n	80049ca <TIM_OC2_SetConfig+0x9e>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a18      	ldr	r2, [pc, #96]	; (8004a28 <TIM_OC2_SetConfig+0xfc>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d113      	bne.n	80049f2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	4a17      	ldr	r2, [pc, #92]	; (8004a2c <TIM_OC2_SetConfig+0x100>)
 80049ce:	4013      	ands	r3, r2
 80049d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	4a16      	ldr	r2, [pc, #88]	; (8004a30 <TIM_OC2_SetConfig+0x104>)
 80049d6:	4013      	ands	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	621a      	str	r2, [r3, #32]
}
 8004a0c:	46c0      	nop			; (mov r8, r8)
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	b006      	add	sp, #24
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	feff8fff 	.word	0xfeff8fff
 8004a18:	fffffcff 	.word	0xfffffcff
 8004a1c:	40012c00 	.word	0x40012c00
 8004a20:	40014000 	.word	0x40014000
 8004a24:	40014400 	.word	0x40014400
 8004a28:	40014800 	.word	0x40014800
 8004a2c:	fffffbff 	.word	0xfffffbff
 8004a30:	fffff7ff 	.word	0xfffff7ff

08004a34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	4a35      	ldr	r2, [pc, #212]	; (8004b18 <TIM_OC3_SetConfig+0xe4>)
 8004a44:	401a      	ands	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4a2f      	ldr	r2, [pc, #188]	; (8004b1c <TIM_OC3_SetConfig+0xe8>)
 8004a60:	4013      	ands	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2203      	movs	r2, #3
 8004a68:	4393      	bics	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	4a29      	ldr	r2, [pc, #164]	; (8004b20 <TIM_OC3_SetConfig+0xec>)
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	021b      	lsls	r3, r3, #8
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a25      	ldr	r2, [pc, #148]	; (8004b24 <TIM_OC3_SetConfig+0xf0>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d10d      	bne.n	8004aae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	4a24      	ldr	r2, [pc, #144]	; (8004b28 <TIM_OC3_SetConfig+0xf4>)
 8004a96:	4013      	ands	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	021b      	lsls	r3, r3, #8
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	4a20      	ldr	r2, [pc, #128]	; (8004b2c <TIM_OC3_SetConfig+0xf8>)
 8004aaa:	4013      	ands	r3, r2
 8004aac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a1c      	ldr	r2, [pc, #112]	; (8004b24 <TIM_OC3_SetConfig+0xf0>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d00b      	beq.n	8004ace <TIM_OC3_SetConfig+0x9a>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a1d      	ldr	r2, [pc, #116]	; (8004b30 <TIM_OC3_SetConfig+0xfc>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d007      	beq.n	8004ace <TIM_OC3_SetConfig+0x9a>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a1c      	ldr	r2, [pc, #112]	; (8004b34 <TIM_OC3_SetConfig+0x100>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d003      	beq.n	8004ace <TIM_OC3_SetConfig+0x9a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a1b      	ldr	r2, [pc, #108]	; (8004b38 <TIM_OC3_SetConfig+0x104>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d113      	bne.n	8004af6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	4a1a      	ldr	r2, [pc, #104]	; (8004b3c <TIM_OC3_SetConfig+0x108>)
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	4a19      	ldr	r2, [pc, #100]	; (8004b40 <TIM_OC3_SetConfig+0x10c>)
 8004ada:	4013      	ands	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	011b      	lsls	r3, r3, #4
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	621a      	str	r2, [r3, #32]
}
 8004b10:	46c0      	nop			; (mov r8, r8)
 8004b12:	46bd      	mov	sp, r7
 8004b14:	b006      	add	sp, #24
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	fffffeff 	.word	0xfffffeff
 8004b1c:	fffeff8f 	.word	0xfffeff8f
 8004b20:	fffffdff 	.word	0xfffffdff
 8004b24:	40012c00 	.word	0x40012c00
 8004b28:	fffff7ff 	.word	0xfffff7ff
 8004b2c:	fffffbff 	.word	0xfffffbff
 8004b30:	40014000 	.word	0x40014000
 8004b34:	40014400 	.word	0x40014400
 8004b38:	40014800 	.word	0x40014800
 8004b3c:	ffffefff 	.word	0xffffefff
 8004b40:	ffffdfff 	.word	0xffffdfff

08004b44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	4a28      	ldr	r2, [pc, #160]	; (8004bf4 <TIM_OC4_SetConfig+0xb0>)
 8004b54:	401a      	ands	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4a22      	ldr	r2, [pc, #136]	; (8004bf8 <TIM_OC4_SetConfig+0xb4>)
 8004b70:	4013      	ands	r3, r2
 8004b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4a21      	ldr	r2, [pc, #132]	; (8004bfc <TIM_OC4_SetConfig+0xb8>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	021b      	lsls	r3, r3, #8
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	4a1d      	ldr	r2, [pc, #116]	; (8004c00 <TIM_OC4_SetConfig+0xbc>)
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	031b      	lsls	r3, r3, #12
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a19      	ldr	r2, [pc, #100]	; (8004c04 <TIM_OC4_SetConfig+0xc0>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d00b      	beq.n	8004bbc <TIM_OC4_SetConfig+0x78>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a18      	ldr	r2, [pc, #96]	; (8004c08 <TIM_OC4_SetConfig+0xc4>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d007      	beq.n	8004bbc <TIM_OC4_SetConfig+0x78>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a17      	ldr	r2, [pc, #92]	; (8004c0c <TIM_OC4_SetConfig+0xc8>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d003      	beq.n	8004bbc <TIM_OC4_SetConfig+0x78>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a16      	ldr	r2, [pc, #88]	; (8004c10 <TIM_OC4_SetConfig+0xcc>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d109      	bne.n	8004bd0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	4a15      	ldr	r2, [pc, #84]	; (8004c14 <TIM_OC4_SetConfig+0xd0>)
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	019b      	lsls	r3, r3, #6
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	621a      	str	r2, [r3, #32]
}
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	46bd      	mov	sp, r7
 8004bee:	b006      	add	sp, #24
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	ffffefff 	.word	0xffffefff
 8004bf8:	feff8fff 	.word	0xfeff8fff
 8004bfc:	fffffcff 	.word	0xfffffcff
 8004c00:	ffffdfff 	.word	0xffffdfff
 8004c04:	40012c00 	.word	0x40012c00
 8004c08:	40014000 	.word	0x40014000
 8004c0c:	40014400 	.word	0x40014400
 8004c10:	40014800 	.word	0x40014800
 8004c14:	ffffbfff 	.word	0xffffbfff

08004c18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	4a25      	ldr	r2, [pc, #148]	; (8004cbc <TIM_OC5_SetConfig+0xa4>)
 8004c28:	401a      	ands	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4a1f      	ldr	r2, [pc, #124]	; (8004cc0 <TIM_OC5_SetConfig+0xa8>)
 8004c44:	4013      	ands	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	4a1b      	ldr	r2, [pc, #108]	; (8004cc4 <TIM_OC5_SetConfig+0xac>)
 8004c56:	4013      	ands	r3, r2
 8004c58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	041b      	lsls	r3, r3, #16
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a17      	ldr	r2, [pc, #92]	; (8004cc8 <TIM_OC5_SetConfig+0xb0>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d00b      	beq.n	8004c86 <TIM_OC5_SetConfig+0x6e>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a16      	ldr	r2, [pc, #88]	; (8004ccc <TIM_OC5_SetConfig+0xb4>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d007      	beq.n	8004c86 <TIM_OC5_SetConfig+0x6e>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a15      	ldr	r2, [pc, #84]	; (8004cd0 <TIM_OC5_SetConfig+0xb8>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d003      	beq.n	8004c86 <TIM_OC5_SetConfig+0x6e>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a14      	ldr	r2, [pc, #80]	; (8004cd4 <TIM_OC5_SetConfig+0xbc>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d109      	bne.n	8004c9a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	4a0c      	ldr	r2, [pc, #48]	; (8004cbc <TIM_OC5_SetConfig+0xa4>)
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	021b      	lsls	r3, r3, #8
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	621a      	str	r2, [r3, #32]
}
 8004cb4:	46c0      	nop			; (mov r8, r8)
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	b006      	add	sp, #24
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	fffeffff 	.word	0xfffeffff
 8004cc0:	fffeff8f 	.word	0xfffeff8f
 8004cc4:	fffdffff 	.word	0xfffdffff
 8004cc8:	40012c00 	.word	0x40012c00
 8004ccc:	40014000 	.word	0x40014000
 8004cd0:	40014400 	.word	0x40014400
 8004cd4:	40014800 	.word	0x40014800

08004cd8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	4a26      	ldr	r2, [pc, #152]	; (8004d80 <TIM_OC6_SetConfig+0xa8>)
 8004ce8:	401a      	ands	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4a20      	ldr	r2, [pc, #128]	; (8004d84 <TIM_OC6_SetConfig+0xac>)
 8004d04:	4013      	ands	r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	021b      	lsls	r3, r3, #8
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	4a1c      	ldr	r2, [pc, #112]	; (8004d88 <TIM_OC6_SetConfig+0xb0>)
 8004d18:	4013      	ands	r3, r2
 8004d1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	051b      	lsls	r3, r3, #20
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a18      	ldr	r2, [pc, #96]	; (8004d8c <TIM_OC6_SetConfig+0xb4>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d00b      	beq.n	8004d48 <TIM_OC6_SetConfig+0x70>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a17      	ldr	r2, [pc, #92]	; (8004d90 <TIM_OC6_SetConfig+0xb8>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d007      	beq.n	8004d48 <TIM_OC6_SetConfig+0x70>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a16      	ldr	r2, [pc, #88]	; (8004d94 <TIM_OC6_SetConfig+0xbc>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d003      	beq.n	8004d48 <TIM_OC6_SetConfig+0x70>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a15      	ldr	r2, [pc, #84]	; (8004d98 <TIM_OC6_SetConfig+0xc0>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d109      	bne.n	8004d5c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	4a14      	ldr	r2, [pc, #80]	; (8004d9c <TIM_OC6_SetConfig+0xc4>)
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	029b      	lsls	r3, r3, #10
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	621a      	str	r2, [r3, #32]
}
 8004d76:	46c0      	nop			; (mov r8, r8)
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	b006      	add	sp, #24
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	46c0      	nop			; (mov r8, r8)
 8004d80:	ffefffff 	.word	0xffefffff
 8004d84:	feff8fff 	.word	0xfeff8fff
 8004d88:	ffdfffff 	.word	0xffdfffff
 8004d8c:	40012c00 	.word	0x40012c00
 8004d90:	40014000 	.word	0x40014000
 8004d94:	40014400 	.word	0x40014400
 8004d98:	40014800 	.word	0x40014800
 8004d9c:	fffbffff 	.word	0xfffbffff

08004da0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	221f      	movs	r2, #31
 8004db0:	4013      	ands	r3, r2
 8004db2:	2201      	movs	r2, #1
 8004db4:	409a      	lsls	r2, r3
 8004db6:	0013      	movs	r3, r2
 8004db8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	43d2      	mvns	r2, r2
 8004dc2:	401a      	ands	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6a1a      	ldr	r2, [r3, #32]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	211f      	movs	r1, #31
 8004dd0:	400b      	ands	r3, r1
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	4099      	lsls	r1, r3
 8004dd6:	000b      	movs	r3, r1
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	621a      	str	r2, [r3, #32]
}
 8004dde:	46c0      	nop			; (mov r8, r8)
 8004de0:	46bd      	mov	sp, r7
 8004de2:	b006      	add	sp, #24
 8004de4:	bd80      	pop	{r7, pc}
	...

08004de8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	223c      	movs	r2, #60	; 0x3c
 8004df6:	5c9b      	ldrb	r3, [r3, r2]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d101      	bne.n	8004e00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	e04f      	b.n	8004ea0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	223c      	movs	r2, #60	; 0x3c
 8004e04:	2101      	movs	r1, #1
 8004e06:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	223d      	movs	r2, #61	; 0x3d
 8004e0c:	2102      	movs	r1, #2
 8004e0e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a20      	ldr	r2, [pc, #128]	; (8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d108      	bne.n	8004e3c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	4a1f      	ldr	r2, [pc, #124]	; (8004eac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004e2e:	4013      	ands	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2270      	movs	r2, #112	; 0x70
 8004e40:	4393      	bics	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a13      	ldr	r2, [pc, #76]	; (8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d009      	beq.n	8004e74 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a12      	ldr	r2, [pc, #72]	; (8004eb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d004      	beq.n	8004e74 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a11      	ldr	r2, [pc, #68]	; (8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d10c      	bne.n	8004e8e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	2280      	movs	r2, #128	; 0x80
 8004e78:	4393      	bics	r3, r2
 8004e7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	223d      	movs	r2, #61	; 0x3d
 8004e92:	2101      	movs	r1, #1
 8004e94:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	223c      	movs	r2, #60	; 0x3c
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	b004      	add	sp, #16
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	40012c00 	.word	0x40012c00
 8004eac:	ff0fffff 	.word	0xff0fffff
 8004eb0:	40000400 	.word	0x40000400
 8004eb4:	40014000 	.word	0x40014000

08004eb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	223c      	movs	r2, #60	; 0x3c
 8004eca:	5c9b      	ldrb	r3, [r3, r2]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e079      	b.n	8004fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	223c      	movs	r2, #60	; 0x3c
 8004ed8:	2101      	movs	r1, #1
 8004eda:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	22ff      	movs	r2, #255	; 0xff
 8004ee0:	4393      	bics	r3, r2
 8004ee2:	001a      	movs	r2, r3
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4a38      	ldr	r2, [pc, #224]	; (8004fd0 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004ef0:	401a      	ands	r2, r3
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4a35      	ldr	r2, [pc, #212]	; (8004fd4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004efe:	401a      	ands	r2, r3
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4a33      	ldr	r2, [pc, #204]	; (8004fd8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004f0c:	401a      	ands	r2, r3
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4a30      	ldr	r2, [pc, #192]	; (8004fdc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004f1a:	401a      	ands	r2, r3
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4a2e      	ldr	r2, [pc, #184]	; (8004fe0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004f28:	401a      	ands	r2, r3
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	4a2b      	ldr	r2, [pc, #172]	; (8004fe4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004f36:	401a      	ands	r2, r3
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4a29      	ldr	r2, [pc, #164]	; (8004fe8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004f44:	401a      	ands	r2, r3
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	041b      	lsls	r3, r3, #16
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a25      	ldr	r2, [pc, #148]	; (8004fec <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d106      	bne.n	8004f68 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	4a24      	ldr	r2, [pc, #144]	; (8004ff0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004f5e:	401a      	ands	r2, r3
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a1f      	ldr	r2, [pc, #124]	; (8004fec <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d121      	bne.n	8004fb6 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	4a1f      	ldr	r2, [pc, #124]	; (8004ff4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004f76:	401a      	ands	r2, r3
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7c:	051b      	lsls	r3, r3, #20
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	4a1c      	ldr	r2, [pc, #112]	; (8004ff8 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8004f86:	401a      	ands	r2, r3
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4a1a      	ldr	r2, [pc, #104]	; (8004ffc <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8004f94:	401a      	ands	r2, r3
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a12      	ldr	r2, [pc, #72]	; (8004fec <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d106      	bne.n	8004fb6 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4a15      	ldr	r2, [pc, #84]	; (8005000 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8004fac:	401a      	ands	r2, r3
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	223c      	movs	r2, #60	; 0x3c
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	0018      	movs	r0, r3
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	b004      	add	sp, #16
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	fffffcff 	.word	0xfffffcff
 8004fd4:	fffffbff 	.word	0xfffffbff
 8004fd8:	fffff7ff 	.word	0xfffff7ff
 8004fdc:	ffffefff 	.word	0xffffefff
 8004fe0:	ffffdfff 	.word	0xffffdfff
 8004fe4:	ffffbfff 	.word	0xffffbfff
 8004fe8:	fff0ffff 	.word	0xfff0ffff
 8004fec:	40012c00 	.word	0x40012c00
 8004ff0:	efffffff 	.word	0xefffffff
 8004ff4:	ff0fffff 	.word	0xff0fffff
 8004ff8:	feffffff 	.word	0xfeffffff
 8004ffc:	fdffffff 	.word	0xfdffffff
 8005000:	dfffffff 	.word	0xdfffffff

08005004 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800500c:	46c0      	nop			; (mov r8, r8)
 800500e:	46bd      	mov	sp, r7
 8005010:	b002      	add	sp, #8
 8005012:	bd80      	pop	{r7, pc}

08005014 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800501c:	46c0      	nop			; (mov r8, r8)
 800501e:	46bd      	mov	sp, r7
 8005020:	b002      	add	sp, #8
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800502c:	46c0      	nop			; (mov r8, r8)
 800502e:	46bd      	mov	sp, r7
 8005030:	b002      	add	sp, #8
 8005032:	bd80      	pop	{r7, pc}

08005034 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e046      	b.n	80050d4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2288      	movs	r2, #136	; 0x88
 800504a:	589b      	ldr	r3, [r3, r2]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d107      	bne.n	8005060 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2284      	movs	r2, #132	; 0x84
 8005054:	2100      	movs	r1, #0
 8005056:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	0018      	movs	r0, r3
 800505c:	f7fc fbca 	bl	80017f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2288      	movs	r2, #136	; 0x88
 8005064:	2124      	movs	r1, #36	; 0x24
 8005066:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2101      	movs	r1, #1
 8005074:	438a      	bics	r2, r1
 8005076:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	0018      	movs	r0, r3
 800507c:	f000 f830 	bl	80050e0 <UART_SetConfig>
 8005080:	0003      	movs	r3, r0
 8005082:	2b01      	cmp	r3, #1
 8005084:	d101      	bne.n	800508a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e024      	b.n	80050d4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	0018      	movs	r0, r3
 8005096:	f000 f9c7 	bl	8005428 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	490d      	ldr	r1, [pc, #52]	; (80050dc <HAL_UART_Init+0xa8>)
 80050a6:	400a      	ands	r2, r1
 80050a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	212a      	movs	r1, #42	; 0x2a
 80050b6:	438a      	bics	r2, r1
 80050b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2101      	movs	r1, #1
 80050c6:	430a      	orrs	r2, r1
 80050c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	0018      	movs	r0, r3
 80050ce:	f000 fa5f 	bl	8005590 <UART_CheckIdleState>
 80050d2:	0003      	movs	r3, r0
}
 80050d4:	0018      	movs	r0, r3
 80050d6:	46bd      	mov	sp, r7
 80050d8:	b002      	add	sp, #8
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	ffffb7ff 	.word	0xffffb7ff

080050e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b088      	sub	sp, #32
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050e8:	231a      	movs	r3, #26
 80050ea:	18fb      	adds	r3, r7, r3
 80050ec:	2200      	movs	r2, #0
 80050ee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	431a      	orrs	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	431a      	orrs	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	69db      	ldr	r3, [r3, #28]
 8005104:	4313      	orrs	r3, r2
 8005106:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4abc      	ldr	r2, [pc, #752]	; (8005400 <UART_SetConfig+0x320>)
 8005110:	4013      	ands	r3, r2
 8005112:	0019      	movs	r1, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	69fa      	ldr	r2, [r7, #28]
 800511a:	430a      	orrs	r2, r1
 800511c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	4ab7      	ldr	r2, [pc, #732]	; (8005404 <UART_SetConfig+0x324>)
 8005126:	4013      	ands	r3, r2
 8005128:	0019      	movs	r1, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68da      	ldr	r2, [r3, #12]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a1b      	ldr	r3, [r3, #32]
 8005140:	69fa      	ldr	r2, [r7, #28]
 8005142:	4313      	orrs	r3, r2
 8005144:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	4aae      	ldr	r2, [pc, #696]	; (8005408 <UART_SetConfig+0x328>)
 800514e:	4013      	ands	r3, r2
 8005150:	0019      	movs	r1, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	69fa      	ldr	r2, [r7, #28]
 8005158:	430a      	orrs	r2, r1
 800515a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005162:	220f      	movs	r2, #15
 8005164:	4393      	bics	r3, r2
 8005166:	0019      	movs	r1, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	430a      	orrs	r2, r1
 8005172:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4aa4      	ldr	r2, [pc, #656]	; (800540c <UART_SetConfig+0x32c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d127      	bne.n	80051ce <UART_SetConfig+0xee>
 800517e:	4ba4      	ldr	r3, [pc, #656]	; (8005410 <UART_SetConfig+0x330>)
 8005180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005182:	2203      	movs	r2, #3
 8005184:	4013      	ands	r3, r2
 8005186:	2b03      	cmp	r3, #3
 8005188:	d017      	beq.n	80051ba <UART_SetConfig+0xda>
 800518a:	d81b      	bhi.n	80051c4 <UART_SetConfig+0xe4>
 800518c:	2b02      	cmp	r3, #2
 800518e:	d00a      	beq.n	80051a6 <UART_SetConfig+0xc6>
 8005190:	d818      	bhi.n	80051c4 <UART_SetConfig+0xe4>
 8005192:	2b00      	cmp	r3, #0
 8005194:	d002      	beq.n	800519c <UART_SetConfig+0xbc>
 8005196:	2b01      	cmp	r3, #1
 8005198:	d00a      	beq.n	80051b0 <UART_SetConfig+0xd0>
 800519a:	e013      	b.n	80051c4 <UART_SetConfig+0xe4>
 800519c:	231b      	movs	r3, #27
 800519e:	18fb      	adds	r3, r7, r3
 80051a0:	2200      	movs	r2, #0
 80051a2:	701a      	strb	r2, [r3, #0]
 80051a4:	e058      	b.n	8005258 <UART_SetConfig+0x178>
 80051a6:	231b      	movs	r3, #27
 80051a8:	18fb      	adds	r3, r7, r3
 80051aa:	2202      	movs	r2, #2
 80051ac:	701a      	strb	r2, [r3, #0]
 80051ae:	e053      	b.n	8005258 <UART_SetConfig+0x178>
 80051b0:	231b      	movs	r3, #27
 80051b2:	18fb      	adds	r3, r7, r3
 80051b4:	2204      	movs	r2, #4
 80051b6:	701a      	strb	r2, [r3, #0]
 80051b8:	e04e      	b.n	8005258 <UART_SetConfig+0x178>
 80051ba:	231b      	movs	r3, #27
 80051bc:	18fb      	adds	r3, r7, r3
 80051be:	2208      	movs	r2, #8
 80051c0:	701a      	strb	r2, [r3, #0]
 80051c2:	e049      	b.n	8005258 <UART_SetConfig+0x178>
 80051c4:	231b      	movs	r3, #27
 80051c6:	18fb      	adds	r3, r7, r3
 80051c8:	2210      	movs	r2, #16
 80051ca:	701a      	strb	r2, [r3, #0]
 80051cc:	e044      	b.n	8005258 <UART_SetConfig+0x178>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a90      	ldr	r2, [pc, #576]	; (8005414 <UART_SetConfig+0x334>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d127      	bne.n	8005228 <UART_SetConfig+0x148>
 80051d8:	4b8d      	ldr	r3, [pc, #564]	; (8005410 <UART_SetConfig+0x330>)
 80051da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051dc:	220c      	movs	r2, #12
 80051de:	4013      	ands	r3, r2
 80051e0:	2b0c      	cmp	r3, #12
 80051e2:	d017      	beq.n	8005214 <UART_SetConfig+0x134>
 80051e4:	d81b      	bhi.n	800521e <UART_SetConfig+0x13e>
 80051e6:	2b08      	cmp	r3, #8
 80051e8:	d00a      	beq.n	8005200 <UART_SetConfig+0x120>
 80051ea:	d818      	bhi.n	800521e <UART_SetConfig+0x13e>
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d002      	beq.n	80051f6 <UART_SetConfig+0x116>
 80051f0:	2b04      	cmp	r3, #4
 80051f2:	d00a      	beq.n	800520a <UART_SetConfig+0x12a>
 80051f4:	e013      	b.n	800521e <UART_SetConfig+0x13e>
 80051f6:	231b      	movs	r3, #27
 80051f8:	18fb      	adds	r3, r7, r3
 80051fa:	2200      	movs	r2, #0
 80051fc:	701a      	strb	r2, [r3, #0]
 80051fe:	e02b      	b.n	8005258 <UART_SetConfig+0x178>
 8005200:	231b      	movs	r3, #27
 8005202:	18fb      	adds	r3, r7, r3
 8005204:	2202      	movs	r2, #2
 8005206:	701a      	strb	r2, [r3, #0]
 8005208:	e026      	b.n	8005258 <UART_SetConfig+0x178>
 800520a:	231b      	movs	r3, #27
 800520c:	18fb      	adds	r3, r7, r3
 800520e:	2204      	movs	r2, #4
 8005210:	701a      	strb	r2, [r3, #0]
 8005212:	e021      	b.n	8005258 <UART_SetConfig+0x178>
 8005214:	231b      	movs	r3, #27
 8005216:	18fb      	adds	r3, r7, r3
 8005218:	2208      	movs	r2, #8
 800521a:	701a      	strb	r2, [r3, #0]
 800521c:	e01c      	b.n	8005258 <UART_SetConfig+0x178>
 800521e:	231b      	movs	r3, #27
 8005220:	18fb      	adds	r3, r7, r3
 8005222:	2210      	movs	r2, #16
 8005224:	701a      	strb	r2, [r3, #0]
 8005226:	e017      	b.n	8005258 <UART_SetConfig+0x178>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a7a      	ldr	r2, [pc, #488]	; (8005418 <UART_SetConfig+0x338>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d104      	bne.n	800523c <UART_SetConfig+0x15c>
 8005232:	231b      	movs	r3, #27
 8005234:	18fb      	adds	r3, r7, r3
 8005236:	2200      	movs	r2, #0
 8005238:	701a      	strb	r2, [r3, #0]
 800523a:	e00d      	b.n	8005258 <UART_SetConfig+0x178>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a76      	ldr	r2, [pc, #472]	; (800541c <UART_SetConfig+0x33c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d104      	bne.n	8005250 <UART_SetConfig+0x170>
 8005246:	231b      	movs	r3, #27
 8005248:	18fb      	adds	r3, r7, r3
 800524a:	2200      	movs	r2, #0
 800524c:	701a      	strb	r2, [r3, #0]
 800524e:	e003      	b.n	8005258 <UART_SetConfig+0x178>
 8005250:	231b      	movs	r3, #27
 8005252:	18fb      	adds	r3, r7, r3
 8005254:	2210      	movs	r2, #16
 8005256:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	69da      	ldr	r2, [r3, #28]
 800525c:	2380      	movs	r3, #128	; 0x80
 800525e:	021b      	lsls	r3, r3, #8
 8005260:	429a      	cmp	r2, r3
 8005262:	d000      	beq.n	8005266 <UART_SetConfig+0x186>
 8005264:	e065      	b.n	8005332 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8005266:	231b      	movs	r3, #27
 8005268:	18fb      	adds	r3, r7, r3
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	2b08      	cmp	r3, #8
 800526e:	d015      	beq.n	800529c <UART_SetConfig+0x1bc>
 8005270:	dc18      	bgt.n	80052a4 <UART_SetConfig+0x1c4>
 8005272:	2b04      	cmp	r3, #4
 8005274:	d00d      	beq.n	8005292 <UART_SetConfig+0x1b2>
 8005276:	dc15      	bgt.n	80052a4 <UART_SetConfig+0x1c4>
 8005278:	2b00      	cmp	r3, #0
 800527a:	d002      	beq.n	8005282 <UART_SetConfig+0x1a2>
 800527c:	2b02      	cmp	r3, #2
 800527e:	d005      	beq.n	800528c <UART_SetConfig+0x1ac>
 8005280:	e010      	b.n	80052a4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005282:	f7fe fb95 	bl	80039b0 <HAL_RCC_GetPCLK1Freq>
 8005286:	0003      	movs	r3, r0
 8005288:	617b      	str	r3, [r7, #20]
        break;
 800528a:	e012      	b.n	80052b2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800528c:	4b64      	ldr	r3, [pc, #400]	; (8005420 <UART_SetConfig+0x340>)
 800528e:	617b      	str	r3, [r7, #20]
        break;
 8005290:	e00f      	b.n	80052b2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005292:	f7fe fb03 	bl	800389c <HAL_RCC_GetSysClockFreq>
 8005296:	0003      	movs	r3, r0
 8005298:	617b      	str	r3, [r7, #20]
        break;
 800529a:	e00a      	b.n	80052b2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800529c:	2380      	movs	r3, #128	; 0x80
 800529e:	021b      	lsls	r3, r3, #8
 80052a0:	617b      	str	r3, [r7, #20]
        break;
 80052a2:	e006      	b.n	80052b2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80052a4:	2300      	movs	r3, #0
 80052a6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80052a8:	231a      	movs	r3, #26
 80052aa:	18fb      	adds	r3, r7, r3
 80052ac:	2201      	movs	r2, #1
 80052ae:	701a      	strb	r2, [r3, #0]
        break;
 80052b0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d100      	bne.n	80052ba <UART_SetConfig+0x1da>
 80052b8:	e08d      	b.n	80053d6 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052be:	4b59      	ldr	r3, [pc, #356]	; (8005424 <UART_SetConfig+0x344>)
 80052c0:	0052      	lsls	r2, r2, #1
 80052c2:	5ad3      	ldrh	r3, [r2, r3]
 80052c4:	0019      	movs	r1, r3
 80052c6:	6978      	ldr	r0, [r7, #20]
 80052c8:	f7fa ff1a 	bl	8000100 <__udivsi3>
 80052cc:	0003      	movs	r3, r0
 80052ce:	005a      	lsls	r2, r3, #1
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	085b      	lsrs	r3, r3, #1
 80052d6:	18d2      	adds	r2, r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	0019      	movs	r1, r3
 80052de:	0010      	movs	r0, r2
 80052e0:	f7fa ff0e 	bl	8000100 <__udivsi3>
 80052e4:	0003      	movs	r3, r0
 80052e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	2b0f      	cmp	r3, #15
 80052ec:	d91c      	bls.n	8005328 <UART_SetConfig+0x248>
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	2380      	movs	r3, #128	; 0x80
 80052f2:	025b      	lsls	r3, r3, #9
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d217      	bcs.n	8005328 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	200e      	movs	r0, #14
 80052fe:	183b      	adds	r3, r7, r0
 8005300:	210f      	movs	r1, #15
 8005302:	438a      	bics	r2, r1
 8005304:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	085b      	lsrs	r3, r3, #1
 800530a:	b29b      	uxth	r3, r3
 800530c:	2207      	movs	r2, #7
 800530e:	4013      	ands	r3, r2
 8005310:	b299      	uxth	r1, r3
 8005312:	183b      	adds	r3, r7, r0
 8005314:	183a      	adds	r2, r7, r0
 8005316:	8812      	ldrh	r2, [r2, #0]
 8005318:	430a      	orrs	r2, r1
 800531a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	183a      	adds	r2, r7, r0
 8005322:	8812      	ldrh	r2, [r2, #0]
 8005324:	60da      	str	r2, [r3, #12]
 8005326:	e056      	b.n	80053d6 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8005328:	231a      	movs	r3, #26
 800532a:	18fb      	adds	r3, r7, r3
 800532c:	2201      	movs	r2, #1
 800532e:	701a      	strb	r2, [r3, #0]
 8005330:	e051      	b.n	80053d6 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005332:	231b      	movs	r3, #27
 8005334:	18fb      	adds	r3, r7, r3
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b08      	cmp	r3, #8
 800533a:	d015      	beq.n	8005368 <UART_SetConfig+0x288>
 800533c:	dc18      	bgt.n	8005370 <UART_SetConfig+0x290>
 800533e:	2b04      	cmp	r3, #4
 8005340:	d00d      	beq.n	800535e <UART_SetConfig+0x27e>
 8005342:	dc15      	bgt.n	8005370 <UART_SetConfig+0x290>
 8005344:	2b00      	cmp	r3, #0
 8005346:	d002      	beq.n	800534e <UART_SetConfig+0x26e>
 8005348:	2b02      	cmp	r3, #2
 800534a:	d005      	beq.n	8005358 <UART_SetConfig+0x278>
 800534c:	e010      	b.n	8005370 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800534e:	f7fe fb2f 	bl	80039b0 <HAL_RCC_GetPCLK1Freq>
 8005352:	0003      	movs	r3, r0
 8005354:	617b      	str	r3, [r7, #20]
        break;
 8005356:	e012      	b.n	800537e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005358:	4b31      	ldr	r3, [pc, #196]	; (8005420 <UART_SetConfig+0x340>)
 800535a:	617b      	str	r3, [r7, #20]
        break;
 800535c:	e00f      	b.n	800537e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800535e:	f7fe fa9d 	bl	800389c <HAL_RCC_GetSysClockFreq>
 8005362:	0003      	movs	r3, r0
 8005364:	617b      	str	r3, [r7, #20]
        break;
 8005366:	e00a      	b.n	800537e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005368:	2380      	movs	r3, #128	; 0x80
 800536a:	021b      	lsls	r3, r3, #8
 800536c:	617b      	str	r3, [r7, #20]
        break;
 800536e:	e006      	b.n	800537e <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8005370:	2300      	movs	r3, #0
 8005372:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005374:	231a      	movs	r3, #26
 8005376:	18fb      	adds	r3, r7, r3
 8005378:	2201      	movs	r2, #1
 800537a:	701a      	strb	r2, [r3, #0]
        break;
 800537c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d028      	beq.n	80053d6 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005388:	4b26      	ldr	r3, [pc, #152]	; (8005424 <UART_SetConfig+0x344>)
 800538a:	0052      	lsls	r2, r2, #1
 800538c:	5ad3      	ldrh	r3, [r2, r3]
 800538e:	0019      	movs	r1, r3
 8005390:	6978      	ldr	r0, [r7, #20]
 8005392:	f7fa feb5 	bl	8000100 <__udivsi3>
 8005396:	0003      	movs	r3, r0
 8005398:	001a      	movs	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	085b      	lsrs	r3, r3, #1
 80053a0:	18d2      	adds	r2, r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	0019      	movs	r1, r3
 80053a8:	0010      	movs	r0, r2
 80053aa:	f7fa fea9 	bl	8000100 <__udivsi3>
 80053ae:	0003      	movs	r3, r0
 80053b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	2b0f      	cmp	r3, #15
 80053b6:	d90a      	bls.n	80053ce <UART_SetConfig+0x2ee>
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	2380      	movs	r3, #128	; 0x80
 80053bc:	025b      	lsls	r3, r3, #9
 80053be:	429a      	cmp	r2, r3
 80053c0:	d205      	bcs.n	80053ce <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	60da      	str	r2, [r3, #12]
 80053cc:	e003      	b.n	80053d6 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80053ce:	231a      	movs	r3, #26
 80053d0:	18fb      	adds	r3, r7, r3
 80053d2:	2201      	movs	r2, #1
 80053d4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	226a      	movs	r2, #106	; 0x6a
 80053da:	2101      	movs	r1, #1
 80053dc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2268      	movs	r2, #104	; 0x68
 80053e2:	2101      	movs	r1, #1
 80053e4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80053f2:	231a      	movs	r3, #26
 80053f4:	18fb      	adds	r3, r7, r3
 80053f6:	781b      	ldrb	r3, [r3, #0]
}
 80053f8:	0018      	movs	r0, r3
 80053fa:	46bd      	mov	sp, r7
 80053fc:	b008      	add	sp, #32
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	cfff69f3 	.word	0xcfff69f3
 8005404:	ffffcfff 	.word	0xffffcfff
 8005408:	11fff4ff 	.word	0x11fff4ff
 800540c:	40013800 	.word	0x40013800
 8005410:	40021000 	.word	0x40021000
 8005414:	40004400 	.word	0x40004400
 8005418:	40004800 	.word	0x40004800
 800541c:	40004c00 	.word	0x40004c00
 8005420:	00f42400 	.word	0x00f42400
 8005424:	08005b14 	.word	0x08005b14

08005428 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005434:	2201      	movs	r2, #1
 8005436:	4013      	ands	r3, r2
 8005438:	d00b      	beq.n	8005452 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	4a4a      	ldr	r2, [pc, #296]	; (800556c <UART_AdvFeatureConfig+0x144>)
 8005442:	4013      	ands	r3, r2
 8005444:	0019      	movs	r1, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005456:	2202      	movs	r2, #2
 8005458:	4013      	ands	r3, r2
 800545a:	d00b      	beq.n	8005474 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	4a43      	ldr	r2, [pc, #268]	; (8005570 <UART_AdvFeatureConfig+0x148>)
 8005464:	4013      	ands	r3, r2
 8005466:	0019      	movs	r1, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005478:	2204      	movs	r2, #4
 800547a:	4013      	ands	r3, r2
 800547c:	d00b      	beq.n	8005496 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	4a3b      	ldr	r2, [pc, #236]	; (8005574 <UART_AdvFeatureConfig+0x14c>)
 8005486:	4013      	ands	r3, r2
 8005488:	0019      	movs	r1, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549a:	2208      	movs	r2, #8
 800549c:	4013      	ands	r3, r2
 800549e:	d00b      	beq.n	80054b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	4a34      	ldr	r2, [pc, #208]	; (8005578 <UART_AdvFeatureConfig+0x150>)
 80054a8:	4013      	ands	r3, r2
 80054aa:	0019      	movs	r1, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054bc:	2210      	movs	r2, #16
 80054be:	4013      	ands	r3, r2
 80054c0:	d00b      	beq.n	80054da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	4a2c      	ldr	r2, [pc, #176]	; (800557c <UART_AdvFeatureConfig+0x154>)
 80054ca:	4013      	ands	r3, r2
 80054cc:	0019      	movs	r1, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054de:	2220      	movs	r2, #32
 80054e0:	4013      	ands	r3, r2
 80054e2:	d00b      	beq.n	80054fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	4a25      	ldr	r2, [pc, #148]	; (8005580 <UART_AdvFeatureConfig+0x158>)
 80054ec:	4013      	ands	r3, r2
 80054ee:	0019      	movs	r1, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005500:	2240      	movs	r2, #64	; 0x40
 8005502:	4013      	ands	r3, r2
 8005504:	d01d      	beq.n	8005542 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	4a1d      	ldr	r2, [pc, #116]	; (8005584 <UART_AdvFeatureConfig+0x15c>)
 800550e:	4013      	ands	r3, r2
 8005510:	0019      	movs	r1, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005522:	2380      	movs	r3, #128	; 0x80
 8005524:	035b      	lsls	r3, r3, #13
 8005526:	429a      	cmp	r2, r3
 8005528:	d10b      	bne.n	8005542 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	4a15      	ldr	r2, [pc, #84]	; (8005588 <UART_AdvFeatureConfig+0x160>)
 8005532:	4013      	ands	r3, r2
 8005534:	0019      	movs	r1, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005546:	2280      	movs	r2, #128	; 0x80
 8005548:	4013      	ands	r3, r2
 800554a:	d00b      	beq.n	8005564 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	4a0e      	ldr	r2, [pc, #56]	; (800558c <UART_AdvFeatureConfig+0x164>)
 8005554:	4013      	ands	r3, r2
 8005556:	0019      	movs	r1, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	605a      	str	r2, [r3, #4]
  }
}
 8005564:	46c0      	nop			; (mov r8, r8)
 8005566:	46bd      	mov	sp, r7
 8005568:	b002      	add	sp, #8
 800556a:	bd80      	pop	{r7, pc}
 800556c:	fffdffff 	.word	0xfffdffff
 8005570:	fffeffff 	.word	0xfffeffff
 8005574:	fffbffff 	.word	0xfffbffff
 8005578:	ffff7fff 	.word	0xffff7fff
 800557c:	ffffefff 	.word	0xffffefff
 8005580:	ffffdfff 	.word	0xffffdfff
 8005584:	ffefffff 	.word	0xffefffff
 8005588:	ff9fffff 	.word	0xff9fffff
 800558c:	fff7ffff 	.word	0xfff7ffff

08005590 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af02      	add	r7, sp, #8
 8005596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2290      	movs	r2, #144	; 0x90
 800559c:	2100      	movs	r1, #0
 800559e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055a0:	f7fc fa68 	bl	8001a74 <HAL_GetTick>
 80055a4:	0003      	movs	r3, r0
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2208      	movs	r2, #8
 80055b0:	4013      	ands	r3, r2
 80055b2:	2b08      	cmp	r3, #8
 80055b4:	d10c      	bne.n	80055d0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2280      	movs	r2, #128	; 0x80
 80055ba:	0391      	lsls	r1, r2, #14
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	4a1a      	ldr	r2, [pc, #104]	; (8005628 <UART_CheckIdleState+0x98>)
 80055c0:	9200      	str	r2, [sp, #0]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f000 f832 	bl	800562c <UART_WaitOnFlagUntilTimeout>
 80055c8:	1e03      	subs	r3, r0, #0
 80055ca:	d001      	beq.n	80055d0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e026      	b.n	800561e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2204      	movs	r2, #4
 80055d8:	4013      	ands	r3, r2
 80055da:	2b04      	cmp	r3, #4
 80055dc:	d10c      	bne.n	80055f8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2280      	movs	r2, #128	; 0x80
 80055e2:	03d1      	lsls	r1, r2, #15
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	4a10      	ldr	r2, [pc, #64]	; (8005628 <UART_CheckIdleState+0x98>)
 80055e8:	9200      	str	r2, [sp, #0]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f000 f81e 	bl	800562c <UART_WaitOnFlagUntilTimeout>
 80055f0:	1e03      	subs	r3, r0, #0
 80055f2:	d001      	beq.n	80055f8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e012      	b.n	800561e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2288      	movs	r2, #136	; 0x88
 80055fc:	2120      	movs	r1, #32
 80055fe:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	228c      	movs	r2, #140	; 0x8c
 8005604:	2120      	movs	r1, #32
 8005606:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2284      	movs	r2, #132	; 0x84
 8005618:	2100      	movs	r1, #0
 800561a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	0018      	movs	r0, r3
 8005620:	46bd      	mov	sp, r7
 8005622:	b004      	add	sp, #16
 8005624:	bd80      	pop	{r7, pc}
 8005626:	46c0      	nop			; (mov r8, r8)
 8005628:	01ffffff 	.word	0x01ffffff

0800562c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b094      	sub	sp, #80	; 0x50
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	603b      	str	r3, [r7, #0]
 8005638:	1dfb      	adds	r3, r7, #7
 800563a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800563c:	e0a7      	b.n	800578e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800563e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005640:	3301      	adds	r3, #1
 8005642:	d100      	bne.n	8005646 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005644:	e0a3      	b.n	800578e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005646:	f7fc fa15 	bl	8001a74 <HAL_GetTick>
 800564a:	0002      	movs	r2, r0
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005652:	429a      	cmp	r2, r3
 8005654:	d302      	bcc.n	800565c <UART_WaitOnFlagUntilTimeout+0x30>
 8005656:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005658:	2b00      	cmp	r3, #0
 800565a:	d13f      	bne.n	80056dc <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800565c:	f3ef 8310 	mrs	r3, PRIMASK
 8005660:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005662:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005664:	647b      	str	r3, [r7, #68]	; 0x44
 8005666:	2301      	movs	r3, #1
 8005668:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800566a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566c:	f383 8810 	msr	PRIMASK, r3
}
 8005670:	46c0      	nop			; (mov r8, r8)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	494e      	ldr	r1, [pc, #312]	; (80057b8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800567e:	400a      	ands	r2, r1
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005684:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005688:	f383 8810 	msr	PRIMASK, r3
}
 800568c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800568e:	f3ef 8310 	mrs	r3, PRIMASK
 8005692:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005696:	643b      	str	r3, [r7, #64]	; 0x40
 8005698:	2301      	movs	r3, #1
 800569a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800569c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569e:	f383 8810 	msr	PRIMASK, r3
}
 80056a2:	46c0      	nop			; (mov r8, r8)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689a      	ldr	r2, [r3, #8]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2101      	movs	r1, #1
 80056b0:	438a      	bics	r2, r1
 80056b2:	609a      	str	r2, [r3, #8]
 80056b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ba:	f383 8810 	msr	PRIMASK, r3
}
 80056be:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2288      	movs	r2, #136	; 0x88
 80056c4:	2120      	movs	r1, #32
 80056c6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	228c      	movs	r2, #140	; 0x8c
 80056cc:	2120      	movs	r1, #32
 80056ce:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2284      	movs	r2, #132	; 0x84
 80056d4:	2100      	movs	r1, #0
 80056d6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e069      	b.n	80057b0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2204      	movs	r2, #4
 80056e4:	4013      	ands	r3, r2
 80056e6:	d052      	beq.n	800578e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	69da      	ldr	r2, [r3, #28]
 80056ee:	2380      	movs	r3, #128	; 0x80
 80056f0:	011b      	lsls	r3, r3, #4
 80056f2:	401a      	ands	r2, r3
 80056f4:	2380      	movs	r3, #128	; 0x80
 80056f6:	011b      	lsls	r3, r3, #4
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d148      	bne.n	800578e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2280      	movs	r2, #128	; 0x80
 8005702:	0112      	lsls	r2, r2, #4
 8005704:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005706:	f3ef 8310 	mrs	r3, PRIMASK
 800570a:	613b      	str	r3, [r7, #16]
  return(result);
 800570c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800570e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005710:	2301      	movs	r3, #1
 8005712:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f383 8810 	msr	PRIMASK, r3
}
 800571a:	46c0      	nop			; (mov r8, r8)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4924      	ldr	r1, [pc, #144]	; (80057b8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005728:	400a      	ands	r2, r1
 800572a:	601a      	str	r2, [r3, #0]
 800572c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800572e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	f383 8810 	msr	PRIMASK, r3
}
 8005736:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005738:	f3ef 8310 	mrs	r3, PRIMASK
 800573c:	61fb      	str	r3, [r7, #28]
  return(result);
 800573e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005740:	64bb      	str	r3, [r7, #72]	; 0x48
 8005742:	2301      	movs	r3, #1
 8005744:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	f383 8810 	msr	PRIMASK, r3
}
 800574c:	46c0      	nop			; (mov r8, r8)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2101      	movs	r1, #1
 800575a:	438a      	bics	r2, r1
 800575c:	609a      	str	r2, [r3, #8]
 800575e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005760:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	f383 8810 	msr	PRIMASK, r3
}
 8005768:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2288      	movs	r2, #136	; 0x88
 800576e:	2120      	movs	r1, #32
 8005770:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	228c      	movs	r2, #140	; 0x8c
 8005776:	2120      	movs	r1, #32
 8005778:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2290      	movs	r2, #144	; 0x90
 800577e:	2120      	movs	r1, #32
 8005780:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2284      	movs	r2, #132	; 0x84
 8005786:	2100      	movs	r1, #0
 8005788:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e010      	b.n	80057b0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	69db      	ldr	r3, [r3, #28]
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	4013      	ands	r3, r2
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	425a      	negs	r2, r3
 800579e:	4153      	adcs	r3, r2
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	001a      	movs	r2, r3
 80057a4:	1dfb      	adds	r3, r7, #7
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d100      	bne.n	80057ae <UART_WaitOnFlagUntilTimeout+0x182>
 80057ac:	e747      	b.n	800563e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	0018      	movs	r0, r3
 80057b2:	46bd      	mov	sp, r7
 80057b4:	b014      	add	sp, #80	; 0x50
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	fffffe5f 	.word	0xfffffe5f

080057bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2284      	movs	r2, #132	; 0x84
 80057c8:	5c9b      	ldrb	r3, [r3, r2]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d101      	bne.n	80057d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80057ce:	2302      	movs	r3, #2
 80057d0:	e027      	b.n	8005822 <HAL_UARTEx_DisableFifoMode+0x66>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2284      	movs	r2, #132	; 0x84
 80057d6:	2101      	movs	r1, #1
 80057d8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2288      	movs	r2, #136	; 0x88
 80057de:	2124      	movs	r1, #36	; 0x24
 80057e0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2101      	movs	r1, #1
 80057f6:	438a      	bics	r2, r1
 80057f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	4a0b      	ldr	r2, [pc, #44]	; (800582c <HAL_UARTEx_DisableFifoMode+0x70>)
 80057fe:	4013      	ands	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2288      	movs	r2, #136	; 0x88
 8005814:	2120      	movs	r1, #32
 8005816:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2284      	movs	r2, #132	; 0x84
 800581c:	2100      	movs	r1, #0
 800581e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	0018      	movs	r0, r3
 8005824:	46bd      	mov	sp, r7
 8005826:	b004      	add	sp, #16
 8005828:	bd80      	pop	{r7, pc}
 800582a:	46c0      	nop			; (mov r8, r8)
 800582c:	dfffffff 	.word	0xdfffffff

08005830 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2284      	movs	r2, #132	; 0x84
 800583e:	5c9b      	ldrb	r3, [r3, r2]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d101      	bne.n	8005848 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005844:	2302      	movs	r3, #2
 8005846:	e02e      	b.n	80058a6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2284      	movs	r2, #132	; 0x84
 800584c:	2101      	movs	r1, #1
 800584e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2288      	movs	r2, #136	; 0x88
 8005854:	2124      	movs	r1, #36	; 0x24
 8005856:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2101      	movs	r1, #1
 800586c:	438a      	bics	r2, r1
 800586e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	00db      	lsls	r3, r3, #3
 8005878:	08d9      	lsrs	r1, r3, #3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	430a      	orrs	r2, r1
 8005882:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	0018      	movs	r0, r3
 8005888:	f000 f854 	bl	8005934 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2288      	movs	r2, #136	; 0x88
 8005898:	2120      	movs	r1, #32
 800589a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2284      	movs	r2, #132	; 0x84
 80058a0:	2100      	movs	r1, #0
 80058a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	0018      	movs	r0, r3
 80058a8:	46bd      	mov	sp, r7
 80058aa:	b004      	add	sp, #16
 80058ac:	bd80      	pop	{r7, pc}
	...

080058b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2284      	movs	r2, #132	; 0x84
 80058be:	5c9b      	ldrb	r3, [r3, r2]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d101      	bne.n	80058c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80058c4:	2302      	movs	r3, #2
 80058c6:	e02f      	b.n	8005928 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2284      	movs	r2, #132	; 0x84
 80058cc:	2101      	movs	r1, #1
 80058ce:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2288      	movs	r2, #136	; 0x88
 80058d4:	2124      	movs	r1, #36	; 0x24
 80058d6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2101      	movs	r1, #1
 80058ec:	438a      	bics	r2, r1
 80058ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	4a0e      	ldr	r2, [pc, #56]	; (8005930 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	0019      	movs	r1, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	683a      	ldr	r2, [r7, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	0018      	movs	r0, r3
 800590a:	f000 f813 	bl	8005934 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2288      	movs	r2, #136	; 0x88
 800591a:	2120      	movs	r1, #32
 800591c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2284      	movs	r2, #132	; 0x84
 8005922:	2100      	movs	r1, #0
 8005924:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	0018      	movs	r0, r3
 800592a:	46bd      	mov	sp, r7
 800592c:	b004      	add	sp, #16
 800592e:	bd80      	pop	{r7, pc}
 8005930:	f1ffffff 	.word	0xf1ffffff

08005934 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005940:	2b00      	cmp	r3, #0
 8005942:	d108      	bne.n	8005956 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	226a      	movs	r2, #106	; 0x6a
 8005948:	2101      	movs	r1, #1
 800594a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2268      	movs	r2, #104	; 0x68
 8005950:	2101      	movs	r1, #1
 8005952:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005954:	e043      	b.n	80059de <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005956:	260f      	movs	r6, #15
 8005958:	19bb      	adds	r3, r7, r6
 800595a:	2208      	movs	r2, #8
 800595c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800595e:	200e      	movs	r0, #14
 8005960:	183b      	adds	r3, r7, r0
 8005962:	2208      	movs	r2, #8
 8005964:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	0e5b      	lsrs	r3, r3, #25
 800596e:	b2da      	uxtb	r2, r3
 8005970:	240d      	movs	r4, #13
 8005972:	193b      	adds	r3, r7, r4
 8005974:	2107      	movs	r1, #7
 8005976:	400a      	ands	r2, r1
 8005978:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	0f5b      	lsrs	r3, r3, #29
 8005982:	b2da      	uxtb	r2, r3
 8005984:	250c      	movs	r5, #12
 8005986:	197b      	adds	r3, r7, r5
 8005988:	2107      	movs	r1, #7
 800598a:	400a      	ands	r2, r1
 800598c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800598e:	183b      	adds	r3, r7, r0
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	197a      	adds	r2, r7, r5
 8005994:	7812      	ldrb	r2, [r2, #0]
 8005996:	4914      	ldr	r1, [pc, #80]	; (80059e8 <UARTEx_SetNbDataToProcess+0xb4>)
 8005998:	5c8a      	ldrb	r2, [r1, r2]
 800599a:	435a      	muls	r2, r3
 800599c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800599e:	197b      	adds	r3, r7, r5
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	4a12      	ldr	r2, [pc, #72]	; (80059ec <UARTEx_SetNbDataToProcess+0xb8>)
 80059a4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059a6:	0019      	movs	r1, r3
 80059a8:	f7fa fc34 	bl	8000214 <__divsi3>
 80059ac:	0003      	movs	r3, r0
 80059ae:	b299      	uxth	r1, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	226a      	movs	r2, #106	; 0x6a
 80059b4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059b6:	19bb      	adds	r3, r7, r6
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	193a      	adds	r2, r7, r4
 80059bc:	7812      	ldrb	r2, [r2, #0]
 80059be:	490a      	ldr	r1, [pc, #40]	; (80059e8 <UARTEx_SetNbDataToProcess+0xb4>)
 80059c0:	5c8a      	ldrb	r2, [r1, r2]
 80059c2:	435a      	muls	r2, r3
 80059c4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80059c6:	193b      	adds	r3, r7, r4
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	4a08      	ldr	r2, [pc, #32]	; (80059ec <UARTEx_SetNbDataToProcess+0xb8>)
 80059cc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059ce:	0019      	movs	r1, r3
 80059d0:	f7fa fc20 	bl	8000214 <__divsi3>
 80059d4:	0003      	movs	r3, r0
 80059d6:	b299      	uxth	r1, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2268      	movs	r2, #104	; 0x68
 80059dc:	5299      	strh	r1, [r3, r2]
}
 80059de:	46c0      	nop			; (mov r8, r8)
 80059e0:	46bd      	mov	sp, r7
 80059e2:	b005      	add	sp, #20
 80059e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059e6:	46c0      	nop			; (mov r8, r8)
 80059e8:	08005b2c 	.word	0x08005b2c
 80059ec:	08005b34 	.word	0x08005b34

080059f0 <memset>:
 80059f0:	0003      	movs	r3, r0
 80059f2:	1882      	adds	r2, r0, r2
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d100      	bne.n	80059fa <memset+0xa>
 80059f8:	4770      	bx	lr
 80059fa:	7019      	strb	r1, [r3, #0]
 80059fc:	3301      	adds	r3, #1
 80059fe:	e7f9      	b.n	80059f4 <memset+0x4>

08005a00 <__libc_init_array>:
 8005a00:	b570      	push	{r4, r5, r6, lr}
 8005a02:	2600      	movs	r6, #0
 8005a04:	4c0c      	ldr	r4, [pc, #48]	; (8005a38 <__libc_init_array+0x38>)
 8005a06:	4d0d      	ldr	r5, [pc, #52]	; (8005a3c <__libc_init_array+0x3c>)
 8005a08:	1b64      	subs	r4, r4, r5
 8005a0a:	10a4      	asrs	r4, r4, #2
 8005a0c:	42a6      	cmp	r6, r4
 8005a0e:	d109      	bne.n	8005a24 <__libc_init_array+0x24>
 8005a10:	2600      	movs	r6, #0
 8005a12:	f000 f819 	bl	8005a48 <_init>
 8005a16:	4c0a      	ldr	r4, [pc, #40]	; (8005a40 <__libc_init_array+0x40>)
 8005a18:	4d0a      	ldr	r5, [pc, #40]	; (8005a44 <__libc_init_array+0x44>)
 8005a1a:	1b64      	subs	r4, r4, r5
 8005a1c:	10a4      	asrs	r4, r4, #2
 8005a1e:	42a6      	cmp	r6, r4
 8005a20:	d105      	bne.n	8005a2e <__libc_init_array+0x2e>
 8005a22:	bd70      	pop	{r4, r5, r6, pc}
 8005a24:	00b3      	lsls	r3, r6, #2
 8005a26:	58eb      	ldr	r3, [r5, r3]
 8005a28:	4798      	blx	r3
 8005a2a:	3601      	adds	r6, #1
 8005a2c:	e7ee      	b.n	8005a0c <__libc_init_array+0xc>
 8005a2e:	00b3      	lsls	r3, r6, #2
 8005a30:	58eb      	ldr	r3, [r5, r3]
 8005a32:	4798      	blx	r3
 8005a34:	3601      	adds	r6, #1
 8005a36:	e7f2      	b.n	8005a1e <__libc_init_array+0x1e>
 8005a38:	08005b3c 	.word	0x08005b3c
 8005a3c:	08005b3c 	.word	0x08005b3c
 8005a40:	08005b40 	.word	0x08005b40
 8005a44:	08005b3c 	.word	0x08005b3c

08005a48 <_init>:
 8005a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a4a:	46c0      	nop			; (mov r8, r8)
 8005a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a4e:	bc08      	pop	{r3}
 8005a50:	469e      	mov	lr, r3
 8005a52:	4770      	bx	lr

08005a54 <_fini>:
 8005a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a56:	46c0      	nop			; (mov r8, r8)
 8005a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a5a:	bc08      	pop	{r3}
 8005a5c:	469e      	mov	lr, r3
 8005a5e:	4770      	bx	lr
