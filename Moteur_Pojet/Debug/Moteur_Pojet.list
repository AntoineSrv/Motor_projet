
Moteur_Pojet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065c4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800667c  0800667c  0001667c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006758  08006758  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006758  08006758  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006758  08006758  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006758  08006758  00016758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800675c  0800675c  0001675c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  20000010  08006770  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  08006770  000204f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   000184ff  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bbc  00000000  00000000  0003857a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001470  00000000  00000000  0003c138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fe2  00000000  00000000  0003d5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019505  00000000  00000000  0003e58a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ba91  00000000  00000000  00057a8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ad16  00000000  00000000  00073520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004884  00000000  00000000  0010e238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00112abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006664 	.word	0x08006664

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	08006664 	.word	0x08006664

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <HAL_GPIO_EXTI_Rising_Callback>:
// contact1 gauche
// contact2 devant
// contact3 derrière
// contact4 droite
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	0002      	movs	r2, r0
 80003f4:	1dbb      	adds	r3, r7, #6
 80003f6:	801a      	strh	r2, [r3, #0]
	switch (GPIO_Pin)
 80003f8:	1dbb      	adds	r3, r7, #6
 80003fa:	881b      	ldrh	r3, [r3, #0]
 80003fc:	2280      	movs	r2, #128	; 0x80
 80003fe:	0212      	lsls	r2, r2, #8
 8000400:	4293      	cmp	r3, r2
 8000402:	d04e      	beq.n	80004a2 <HAL_GPIO_EXTI_Rising_Callback+0xb6>
 8000404:	2280      	movs	r2, #128	; 0x80
 8000406:	0212      	lsls	r2, r2, #8
 8000408:	4293      	cmp	r3, r2
 800040a:	dd00      	ble.n	800040e <HAL_GPIO_EXTI_Rising_Callback+0x22>
 800040c:	e071      	b.n	80004f2 <HAL_GPIO_EXTI_Rising_Callback+0x106>
 800040e:	2280      	movs	r2, #128	; 0x80
 8000410:	01d2      	lsls	r2, r2, #7
 8000412:	4293      	cmp	r3, r2
 8000414:	d03f      	beq.n	8000496 <HAL_GPIO_EXTI_Rising_Callback+0xaa>
 8000416:	2280      	movs	r2, #128	; 0x80
 8000418:	01d2      	lsls	r2, r2, #7
 800041a:	4293      	cmp	r3, r2
 800041c:	dd00      	ble.n	8000420 <HAL_GPIO_EXTI_Rising_Callback+0x34>
 800041e:	e068      	b.n	80004f2 <HAL_GPIO_EXTI_Rising_Callback+0x106>
 8000420:	2280      	movs	r2, #128	; 0x80
 8000422:	0192      	lsls	r2, r2, #6
 8000424:	4293      	cmp	r3, r2
 8000426:	d030      	beq.n	800048a <HAL_GPIO_EXTI_Rising_Callback+0x9e>
 8000428:	2280      	movs	r2, #128	; 0x80
 800042a:	0192      	lsls	r2, r2, #6
 800042c:	4293      	cmp	r3, r2
 800042e:	dc60      	bgt.n	80004f2 <HAL_GPIO_EXTI_Rising_Callback+0x106>
 8000430:	2280      	movs	r2, #128	; 0x80
 8000432:	0092      	lsls	r2, r2, #2
 8000434:	4293      	cmp	r3, r2
 8000436:	d053      	beq.n	80004e0 <HAL_GPIO_EXTI_Rising_Callback+0xf4>
 8000438:	2280      	movs	r2, #128	; 0x80
 800043a:	0092      	lsls	r2, r2, #2
 800043c:	4293      	cmp	r3, r2
 800043e:	dc58      	bgt.n	80004f2 <HAL_GPIO_EXTI_Rising_Callback+0x106>
 8000440:	2280      	movs	r2, #128	; 0x80
 8000442:	0052      	lsls	r2, r2, #1
 8000444:	4293      	cmp	r3, r2
 8000446:	d042      	beq.n	80004ce <HAL_GPIO_EXTI_Rising_Callback+0xe2>
 8000448:	2280      	movs	r2, #128	; 0x80
 800044a:	0052      	lsls	r2, r2, #1
 800044c:	4293      	cmp	r3, r2
 800044e:	dc50      	bgt.n	80004f2 <HAL_GPIO_EXTI_Rising_Callback+0x106>
 8000450:	2b20      	cmp	r3, #32
 8000452:	d031      	beq.n	80004b8 <HAL_GPIO_EXTI_Rising_Callback+0xcc>
 8000454:	dc4d      	bgt.n	80004f2 <HAL_GPIO_EXTI_Rising_Callback+0x106>
 8000456:	2b10      	cmp	r3, #16
 8000458:	d011      	beq.n	800047e <HAL_GPIO_EXTI_Rising_Callback+0x92>
 800045a:	dc4a      	bgt.n	80004f2 <HAL_GPIO_EXTI_Rising_Callback+0x106>
 800045c:	2b01      	cmp	r3, #1
 800045e:	d002      	beq.n	8000466 <HAL_GPIO_EXTI_Rising_Callback+0x7a>
 8000460:	2b08      	cmp	r3, #8
 8000462:	d006      	beq.n	8000472 <HAL_GPIO_EXTI_Rising_Callback+0x86>
			}
		}

		else CAPT_BTN_MAP = CAPT_BTN_MAP_RESET;
	 */
}
 8000464:	e045      	b.n	80004f2 <HAL_GPIO_EXTI_Rising_Callback+0x106>
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000466:	4b25      	ldr	r3, [pc, #148]	; (80004fc <HAL_GPIO_EXTI_Rising_Callback+0x110>)
 8000468:	2110      	movs	r1, #16
 800046a:	0018      	movs	r0, r3
 800046c:	f003 f97f 	bl	800376e <HAL_GPIO_TogglePin>
		break;
 8000470:	e03f      	b.n	80004f2 <HAL_GPIO_EXTI_Rising_Callback+0x106>
		HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8000472:	4b22      	ldr	r3, [pc, #136]	; (80004fc <HAL_GPIO_EXTI_Rising_Callback+0x110>)
 8000474:	2102      	movs	r1, #2
 8000476:	0018      	movs	r0, r3
 8000478:	f003 f979 	bl	800376e <HAL_GPIO_TogglePin>
		break;
 800047c:	e039      	b.n	80004f2 <HAL_GPIO_EXTI_Rising_Callback+0x106>
		HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 800047e:	4b1f      	ldr	r3, [pc, #124]	; (80004fc <HAL_GPIO_EXTI_Rising_Callback+0x110>)
 8000480:	2108      	movs	r1, #8
 8000482:	0018      	movs	r0, r3
 8000484:	f003 f973 	bl	800376e <HAL_GPIO_TogglePin>
		break;
 8000488:	e033      	b.n	80004f2 <HAL_GPIO_EXTI_Rising_Callback+0x106>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800048a:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <HAL_GPIO_EXTI_Rising_Callback+0x110>)
 800048c:	2101      	movs	r1, #1
 800048e:	0018      	movs	r0, r3
 8000490:	f003 f96d 	bl	800376e <HAL_GPIO_TogglePin>
		break;
 8000494:	e02d      	b.n	80004f2 <HAL_GPIO_EXTI_Rising_Callback+0x106>
		HAL_GPIO_TogglePin(LED_WHITE_GPIO_Port, LED_WHITE_Pin);
 8000496:	4b19      	ldr	r3, [pc, #100]	; (80004fc <HAL_GPIO_EXTI_Rising_Callback+0x110>)
 8000498:	2104      	movs	r1, #4
 800049a:	0018      	movs	r0, r3
 800049c:	f003 f967 	bl	800376e <HAL_GPIO_TogglePin>
		break;
 80004a0:	e027      	b.n	80004f2 <HAL_GPIO_EXTI_Rising_Callback+0x106>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80004a2:	4b16      	ldr	r3, [pc, #88]	; (80004fc <HAL_GPIO_EXTI_Rising_Callback+0x110>)
 80004a4:	2101      	movs	r1, #1
 80004a6:	0018      	movs	r0, r3
 80004a8:	f003 f961 	bl	800376e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_WHITE_GPIO_Port, LED_WHITE_Pin);
 80004ac:	4b13      	ldr	r3, [pc, #76]	; (80004fc <HAL_GPIO_EXTI_Rising_Callback+0x110>)
 80004ae:	2104      	movs	r1, #4
 80004b0:	0018      	movs	r0, r3
 80004b2:	f003 f95c 	bl	800376e <HAL_GPIO_TogglePin>
		break;
 80004b6:	e01c      	b.n	80004f2 <HAL_GPIO_EXTI_Rising_Callback+0x106>
		HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80004b8:	4b10      	ldr	r3, [pc, #64]	; (80004fc <HAL_GPIO_EXTI_Rising_Callback+0x110>)
 80004ba:	2108      	movs	r1, #8
 80004bc:	0018      	movs	r0, r3
 80004be:	f003 f956 	bl	800376e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 80004c2:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <HAL_GPIO_EXTI_Rising_Callback+0x110>)
 80004c4:	2102      	movs	r1, #2
 80004c6:	0018      	movs	r0, r3
 80004c8:	f003 f951 	bl	800376e <HAL_GPIO_TogglePin>
		break;
 80004cc:	e011      	b.n	80004f2 <HAL_GPIO_EXTI_Rising_Callback+0x106>
		HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80004ce:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <HAL_GPIO_EXTI_Rising_Callback+0x110>)
 80004d0:	2108      	movs	r1, #8
 80004d2:	0018      	movs	r0, r3
 80004d4:	f003 f94b 	bl	800376e <HAL_GPIO_TogglePin>
		capteurs.BORDURE_1 = TRUE;
 80004d8:	4b09      	ldr	r3, [pc, #36]	; (8000500 <HAL_GPIO_EXTI_Rising_Callback+0x114>)
 80004da:	2201      	movs	r2, #1
 80004dc:	71da      	strb	r2, [r3, #7]
		break;
 80004de:	e008      	b.n	80004f2 <HAL_GPIO_EXTI_Rising_Callback+0x106>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <HAL_GPIO_EXTI_Rising_Callback+0x110>)
 80004e2:	2101      	movs	r1, #1
 80004e4:	0018      	movs	r0, r3
 80004e6:	f003 f942 	bl	800376e <HAL_GPIO_TogglePin>
		capteurs.BORDURE_2 = TRUE;
 80004ea:	4b05      	ldr	r3, [pc, #20]	; (8000500 <HAL_GPIO_EXTI_Rising_Callback+0x114>)
 80004ec:	2201      	movs	r2, #1
 80004ee:	721a      	strb	r2, [r3, #8]
		break;
 80004f0:	46c0      	nop			; (mov r8, r8)
}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	46bd      	mov	sp, r7
 80004f6:	b002      	add	sp, #8
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	50000c00 	.word	0x50000c00
 8000500:	2000002c 	.word	0x2000002c

08000504 <codeur_start>:

#include "encoder.h"
uint32_t counter_1,counter_2 = 0;
int16_t pos_1,pos_2 = 0;

void codeur_start(void){
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_ALL);
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <codeur_start+0x20>)
 800050a:	213c      	movs	r1, #60	; 0x3c
 800050c:	0018      	movs	r0, r3
 800050e:	f004 fc03 	bl	8004d18 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim1,TIM_CHANNEL_ALL);
 8000512:	4b05      	ldr	r3, [pc, #20]	; (8000528 <codeur_start+0x24>)
 8000514:	213c      	movs	r1, #60	; 0x3c
 8000516:	0018      	movs	r0, r3
 8000518:	f004 fbfe 	bl	8004d18 <HAL_TIM_Encoder_Start_IT>
}
 800051c:	46c0      	nop			; (mov r8, r8)
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	20000200 	.word	0x20000200
 8000528:	200001b4 	.word	0x200001b4

0800052c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	if (htim == &htim1){
 8000534:	687a      	ldr	r2, [r7, #4]
 8000536:	4b10      	ldr	r3, [pc, #64]	; (8000578 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000538:	429a      	cmp	r2, r3
 800053a:	d10a      	bne.n	8000552 <HAL_TIM_IC_CaptureCallback+0x26>
		counter_1 = __HAL_TIM_GET_COUNTER(htim);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000542:	4b0e      	ldr	r3, [pc, #56]	; (800057c <HAL_TIM_IC_CaptureCallback+0x50>)
 8000544:	601a      	str	r2, [r3, #0]
		pos_1 = counter_1/4;
 8000546:	4b0d      	ldr	r3, [pc, #52]	; (800057c <HAL_TIM_IC_CaptureCallback+0x50>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	089b      	lsrs	r3, r3, #2
 800054c:	b21a      	sxth	r2, r3
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000550:	801a      	strh	r2, [r3, #0]

	}

	if (htim == &htim3){
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000556:	429a      	cmp	r2, r3
 8000558:	d10a      	bne.n	8000570 <HAL_TIM_IC_CaptureCallback+0x44>
			counter_2 = __HAL_TIM_GET_COUNTER(htim);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000560:	4b09      	ldr	r3, [pc, #36]	; (8000588 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000562:	601a      	str	r2, [r3, #0]
			pos_2 = counter_2/4;
 8000564:	4b08      	ldr	r3, [pc, #32]	; (8000588 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	089b      	lsrs	r3, r3, #2
 800056a:	b21a      	sxth	r2, r3
 800056c:	4b07      	ldr	r3, [pc, #28]	; (800058c <HAL_TIM_IC_CaptureCallback+0x60>)
 800056e:	801a      	strh	r2, [r3, #0]

		}


}
 8000570:	46c0      	nop			; (mov r8, r8)
 8000572:	46bd      	mov	sp, r7
 8000574:	b002      	add	sp, #8
 8000576:	bd80      	pop	{r7, pc}
 8000578:	200001b4 	.word	0x200001b4
 800057c:	20000038 	.word	0x20000038
 8000580:	20000040 	.word	0x20000040
 8000584:	20000200 	.word	0x20000200
 8000588:	2000003c 	.word	0x2000003c
 800058c:	20000042 	.word	0x20000042

08000590 <pwm_start>:


int aTemp; //variable temporaire pour modifier la valeur du alpha en échelon

int pwm_start(TIM_HandleTypeDef htim, int Channel)
{
 8000590:	b084      	sub	sp, #16
 8000592:	b5b0      	push	{r4, r5, r7, lr}
 8000594:	af00      	add	r7, sp, #0
 8000596:	2510      	movs	r5, #16
 8000598:	197c      	adds	r4, r7, r5
 800059a:	6020      	str	r0, [r4, #0]
 800059c:	6061      	str	r1, [r4, #4]
 800059e:	60a2      	str	r2, [r4, #8]
 80005a0:	60e3      	str	r3, [r4, #12]
	return HAL_TIM_PWM_Start(&htim, Channel);
 80005a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80005a4:	197b      	adds	r3, r7, r5
 80005a6:	0011      	movs	r1, r2
 80005a8:	0018      	movs	r0, r3
 80005aa:	f004 f99d 	bl	80048e8 <HAL_TIM_PWM_Start>
 80005ae:	0003      	movs	r3, r0
}
 80005b0:	0018      	movs	r0, r3
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bcb0      	pop	{r4, r5, r7}
 80005b6:	bc08      	pop	{r3}
 80005b8:	b004      	add	sp, #16
 80005ba:	4718      	bx	r3

080005bc <pwm_stop>:

int pwm_stop(TIM_HandleTypeDef htim, int Channel)
{
 80005bc:	b084      	sub	sp, #16
 80005be:	b5b0      	push	{r4, r5, r7, lr}
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	2510      	movs	r5, #16
 80005c4:	197c      	adds	r4, r7, r5
 80005c6:	6020      	str	r0, [r4, #0]
 80005c8:	6061      	str	r1, [r4, #4]
 80005ca:	60a2      	str	r2, [r4, #8]
 80005cc:	60e3      	str	r3, [r4, #12]
	return HAL_TIM_PWM_Stop(&htim, Channel);
 80005ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80005d0:	197b      	adds	r3, r7, r5
 80005d2:	0011      	movs	r1, r2
 80005d4:	0018      	movs	r0, r3
 80005d6:	f004 fa6b 	bl	8004ab0 <HAL_TIM_PWM_Stop>
 80005da:	0003      	movs	r3, r0
}
 80005dc:	0018      	movs	r0, r3
 80005de:	46bd      	mov	sp, r7
 80005e0:	bcb0      	pop	{r4, r5, r7}
 80005e2:	bc08      	pop	{r3}
 80005e4:	b004      	add	sp, #16
 80005e6:	4718      	bx	r3

080005e8 <update_motor>:

void update_motor(struct Motor_drv_struct motor)
{
 80005e8:	b084      	sub	sp, #16
 80005ea:	b5b0      	push	{r4, r5, r7, lr}
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	250c      	movs	r5, #12
 80005f0:	1d2c      	adds	r4, r5, #4
 80005f2:	19e4      	adds	r4, r4, r7
 80005f4:	6020      	str	r0, [r4, #0]
 80005f6:	6061      	str	r1, [r4, #4]
 80005f8:	60a2      	str	r2, [r4, #8]
 80005fa:	60e3      	str	r3, [r4, #12]
	if (motor.sens == 1)
 80005fc:	002a      	movs	r2, r5
 80005fe:	1d13      	adds	r3, r2, #4
 8000600:	19db      	adds	r3, r3, r7
 8000602:	689b      	ldr	r3, [r3, #8]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d000      	beq.n	800060a <update_motor+0x22>
 8000608:	e094      	b.n	8000734 <update_motor+0x14c>
	{
		__HAL_TIM_SetCompare(&motor.Timer_Backward,motor.Channel_Backward,motor.alpha);
 800060a:	1d13      	adds	r3, r2, #4
 800060c:	19db      	adds	r3, r3, r7
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d108      	bne.n	8000626 <update_motor+0x3e>
 8000614:	0011      	movs	r1, r2
 8000616:	1d13      	adds	r3, r2, #4
 8000618:	19db      	adds	r3, r3, r7
 800061a:	68da      	ldr	r2, [r3, #12]
 800061c:	1d0b      	adds	r3, r1, #4
 800061e:	19db      	adds	r3, r3, r7
 8000620:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000622:	635a      	str	r2, [r3, #52]	; 0x34
 8000624:	e044      	b.n	80006b0 <update_motor+0xc8>
 8000626:	220c      	movs	r2, #12
 8000628:	1d13      	adds	r3, r2, #4
 800062a:	19db      	adds	r3, r3, r7
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	2b04      	cmp	r3, #4
 8000630:	d108      	bne.n	8000644 <update_motor+0x5c>
 8000632:	1d13      	adds	r3, r2, #4
 8000634:	19db      	adds	r3, r3, r7
 8000636:	68d9      	ldr	r1, [r3, #12]
 8000638:	1d13      	adds	r3, r2, #4
 800063a:	19db      	adds	r3, r3, r7
 800063c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800063e:	000b      	movs	r3, r1
 8000640:	6393      	str	r3, [r2, #56]	; 0x38
 8000642:	e035      	b.n	80006b0 <update_motor+0xc8>
 8000644:	220c      	movs	r2, #12
 8000646:	1d13      	adds	r3, r2, #4
 8000648:	19db      	adds	r3, r3, r7
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	2b08      	cmp	r3, #8
 800064e:	d108      	bne.n	8000662 <update_motor+0x7a>
 8000650:	1d13      	adds	r3, r2, #4
 8000652:	19db      	adds	r3, r3, r7
 8000654:	68d9      	ldr	r1, [r3, #12]
 8000656:	1d13      	adds	r3, r2, #4
 8000658:	19db      	adds	r3, r3, r7
 800065a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800065c:	000b      	movs	r3, r1
 800065e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000660:	e026      	b.n	80006b0 <update_motor+0xc8>
 8000662:	220c      	movs	r2, #12
 8000664:	1d13      	adds	r3, r2, #4
 8000666:	19db      	adds	r3, r3, r7
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	2b0c      	cmp	r3, #12
 800066c:	d108      	bne.n	8000680 <update_motor+0x98>
 800066e:	1d13      	adds	r3, r2, #4
 8000670:	19db      	adds	r3, r3, r7
 8000672:	68d9      	ldr	r1, [r3, #12]
 8000674:	1d13      	adds	r3, r2, #4
 8000676:	19db      	adds	r3, r3, r7
 8000678:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800067a:	000b      	movs	r3, r1
 800067c:	6413      	str	r3, [r2, #64]	; 0x40
 800067e:	e017      	b.n	80006b0 <update_motor+0xc8>
 8000680:	220c      	movs	r2, #12
 8000682:	1d13      	adds	r3, r2, #4
 8000684:	19db      	adds	r3, r3, r7
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	2b10      	cmp	r3, #16
 800068a:	d108      	bne.n	800069e <update_motor+0xb6>
 800068c:	1d13      	adds	r3, r2, #4
 800068e:	19db      	adds	r3, r3, r7
 8000690:	68d9      	ldr	r1, [r3, #12]
 8000692:	1d13      	adds	r3, r2, #4
 8000694:	19db      	adds	r3, r3, r7
 8000696:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000698:	000b      	movs	r3, r1
 800069a:	6593      	str	r3, [r2, #88]	; 0x58
 800069c:	e008      	b.n	80006b0 <update_motor+0xc8>
 800069e:	220c      	movs	r2, #12
 80006a0:	1d13      	adds	r3, r2, #4
 80006a2:	19db      	adds	r3, r3, r7
 80006a4:	68d9      	ldr	r1, [r3, #12]
 80006a6:	1d13      	adds	r3, r2, #4
 80006a8:	19db      	adds	r3, r3, r7
 80006aa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80006ac:	000b      	movs	r3, r1
 80006ae:	65d3      	str	r3, [r2, #92]	; 0x5c
		__HAL_TIM_SetCompare(&motor.Timer_Forward,motor.Channel_Forward,0);
 80006b0:	220c      	movs	r2, #12
 80006b2:	1d13      	adds	r3, r2, #4
 80006b4:	19db      	adds	r3, r3, r7
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d105      	bne.n	80006c8 <update_motor+0xe0>
 80006bc:	1d13      	adds	r3, r2, #4
 80006be:	19db      	adds	r3, r3, r7
 80006c0:	6a1b      	ldr	r3, [r3, #32]
 80006c2:	2200      	movs	r2, #0
 80006c4:	635a      	str	r2, [r3, #52]	; 0x34
 80006c6:	e035      	b.n	8000734 <update_motor+0x14c>
 80006c8:	220c      	movs	r2, #12
 80006ca:	1d13      	adds	r3, r2, #4
 80006cc:	19db      	adds	r3, r3, r7
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b04      	cmp	r3, #4
 80006d2:	d105      	bne.n	80006e0 <update_motor+0xf8>
 80006d4:	1d13      	adds	r3, r2, #4
 80006d6:	19db      	adds	r3, r3, r7
 80006d8:	6a1a      	ldr	r2, [r3, #32]
 80006da:	2300      	movs	r3, #0
 80006dc:	6393      	str	r3, [r2, #56]	; 0x38
 80006de:	e029      	b.n	8000734 <update_motor+0x14c>
 80006e0:	220c      	movs	r2, #12
 80006e2:	1d13      	adds	r3, r2, #4
 80006e4:	19db      	adds	r3, r3, r7
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b08      	cmp	r3, #8
 80006ea:	d105      	bne.n	80006f8 <update_motor+0x110>
 80006ec:	1d13      	adds	r3, r2, #4
 80006ee:	19db      	adds	r3, r3, r7
 80006f0:	6a1a      	ldr	r2, [r3, #32]
 80006f2:	2300      	movs	r3, #0
 80006f4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80006f6:	e01d      	b.n	8000734 <update_motor+0x14c>
 80006f8:	220c      	movs	r2, #12
 80006fa:	1d13      	adds	r3, r2, #4
 80006fc:	19db      	adds	r3, r3, r7
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b0c      	cmp	r3, #12
 8000702:	d105      	bne.n	8000710 <update_motor+0x128>
 8000704:	1d13      	adds	r3, r2, #4
 8000706:	19db      	adds	r3, r3, r7
 8000708:	6a1a      	ldr	r2, [r3, #32]
 800070a:	2300      	movs	r3, #0
 800070c:	6413      	str	r3, [r2, #64]	; 0x40
 800070e:	e011      	b.n	8000734 <update_motor+0x14c>
 8000710:	220c      	movs	r2, #12
 8000712:	1d13      	adds	r3, r2, #4
 8000714:	19db      	adds	r3, r3, r7
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b10      	cmp	r3, #16
 800071a:	d105      	bne.n	8000728 <update_motor+0x140>
 800071c:	1d13      	adds	r3, r2, #4
 800071e:	19db      	adds	r3, r3, r7
 8000720:	6a1a      	ldr	r2, [r3, #32]
 8000722:	2300      	movs	r3, #0
 8000724:	6593      	str	r3, [r2, #88]	; 0x58
 8000726:	e005      	b.n	8000734 <update_motor+0x14c>
 8000728:	230c      	movs	r3, #12
 800072a:	3304      	adds	r3, #4
 800072c:	19db      	adds	r3, r3, r7
 800072e:	6a1a      	ldr	r2, [r3, #32]
 8000730:	2300      	movs	r3, #0
 8000732:	65d3      	str	r3, [r2, #92]	; 0x5c
	}
	if (motor.sens == 2)
 8000734:	220c      	movs	r2, #12
 8000736:	1d13      	adds	r3, r2, #4
 8000738:	19db      	adds	r3, r3, r7
 800073a:	689b      	ldr	r3, [r3, #8]
 800073c:	2b02      	cmp	r3, #2
 800073e:	d000      	beq.n	8000742 <update_motor+0x15a>
 8000740:	e094      	b.n	800086c <update_motor+0x284>
	{
		__HAL_TIM_SetCompare(&motor.Timer_Backward,motor.Channel_Backward,0);
 8000742:	1d13      	adds	r3, r2, #4
 8000744:	19db      	adds	r3, r3, r7
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d105      	bne.n	8000758 <update_motor+0x170>
 800074c:	1d13      	adds	r3, r2, #4
 800074e:	19db      	adds	r3, r3, r7
 8000750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000752:	2200      	movs	r2, #0
 8000754:	635a      	str	r2, [r3, #52]	; 0x34
 8000756:	e035      	b.n	80007c4 <update_motor+0x1dc>
 8000758:	220c      	movs	r2, #12
 800075a:	1d13      	adds	r3, r2, #4
 800075c:	19db      	adds	r3, r3, r7
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	2b04      	cmp	r3, #4
 8000762:	d105      	bne.n	8000770 <update_motor+0x188>
 8000764:	1d13      	adds	r3, r2, #4
 8000766:	19db      	adds	r3, r3, r7
 8000768:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800076a:	2300      	movs	r3, #0
 800076c:	6393      	str	r3, [r2, #56]	; 0x38
 800076e:	e029      	b.n	80007c4 <update_motor+0x1dc>
 8000770:	220c      	movs	r2, #12
 8000772:	1d13      	adds	r3, r2, #4
 8000774:	19db      	adds	r3, r3, r7
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	2b08      	cmp	r3, #8
 800077a:	d105      	bne.n	8000788 <update_motor+0x1a0>
 800077c:	1d13      	adds	r3, r2, #4
 800077e:	19db      	adds	r3, r3, r7
 8000780:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000782:	2300      	movs	r3, #0
 8000784:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000786:	e01d      	b.n	80007c4 <update_motor+0x1dc>
 8000788:	220c      	movs	r2, #12
 800078a:	1d13      	adds	r3, r2, #4
 800078c:	19db      	adds	r3, r3, r7
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	2b0c      	cmp	r3, #12
 8000792:	d105      	bne.n	80007a0 <update_motor+0x1b8>
 8000794:	1d13      	adds	r3, r2, #4
 8000796:	19db      	adds	r3, r3, r7
 8000798:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800079a:	2300      	movs	r3, #0
 800079c:	6413      	str	r3, [r2, #64]	; 0x40
 800079e:	e011      	b.n	80007c4 <update_motor+0x1dc>
 80007a0:	220c      	movs	r2, #12
 80007a2:	1d13      	adds	r3, r2, #4
 80007a4:	19db      	adds	r3, r3, r7
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	2b10      	cmp	r3, #16
 80007aa:	d105      	bne.n	80007b8 <update_motor+0x1d0>
 80007ac:	1d13      	adds	r3, r2, #4
 80007ae:	19db      	adds	r3, r3, r7
 80007b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80007b2:	2300      	movs	r3, #0
 80007b4:	6593      	str	r3, [r2, #88]	; 0x58
 80007b6:	e005      	b.n	80007c4 <update_motor+0x1dc>
 80007b8:	230c      	movs	r3, #12
 80007ba:	3304      	adds	r3, #4
 80007bc:	19db      	adds	r3, r3, r7
 80007be:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80007c0:	2300      	movs	r3, #0
 80007c2:	65d3      	str	r3, [r2, #92]	; 0x5c
		__HAL_TIM_SetCompare(&motor.Timer_Forward,motor.Channel_Forward,motor.alpha);
 80007c4:	220c      	movs	r2, #12
 80007c6:	1d13      	adds	r3, r2, #4
 80007c8:	19db      	adds	r3, r3, r7
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d108      	bne.n	80007e2 <update_motor+0x1fa>
 80007d0:	0011      	movs	r1, r2
 80007d2:	1d13      	adds	r3, r2, #4
 80007d4:	19db      	adds	r3, r3, r7
 80007d6:	68da      	ldr	r2, [r3, #12]
 80007d8:	1d0b      	adds	r3, r1, #4
 80007da:	19db      	adds	r3, r3, r7
 80007dc:	6a1b      	ldr	r3, [r3, #32]
 80007de:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80007e0:	e044      	b.n	800086c <update_motor+0x284>
		__HAL_TIM_SetCompare(&motor.Timer_Forward,motor.Channel_Forward,motor.alpha);
 80007e2:	220c      	movs	r2, #12
 80007e4:	1d13      	adds	r3, r2, #4
 80007e6:	19db      	adds	r3, r3, r7
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	d108      	bne.n	8000800 <update_motor+0x218>
 80007ee:	1d13      	adds	r3, r2, #4
 80007f0:	19db      	adds	r3, r3, r7
 80007f2:	68d9      	ldr	r1, [r3, #12]
 80007f4:	1d13      	adds	r3, r2, #4
 80007f6:	19db      	adds	r3, r3, r7
 80007f8:	6a1a      	ldr	r2, [r3, #32]
 80007fa:	000b      	movs	r3, r1
 80007fc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80007fe:	e035      	b.n	800086c <update_motor+0x284>
		__HAL_TIM_SetCompare(&motor.Timer_Forward,motor.Channel_Forward,motor.alpha);
 8000800:	220c      	movs	r2, #12
 8000802:	1d13      	adds	r3, r2, #4
 8000804:	19db      	adds	r3, r3, r7
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b08      	cmp	r3, #8
 800080a:	d108      	bne.n	800081e <update_motor+0x236>
 800080c:	1d13      	adds	r3, r2, #4
 800080e:	19db      	adds	r3, r3, r7
 8000810:	68d9      	ldr	r1, [r3, #12]
 8000812:	1d13      	adds	r3, r2, #4
 8000814:	19db      	adds	r3, r3, r7
 8000816:	6a1a      	ldr	r2, [r3, #32]
 8000818:	000b      	movs	r3, r1
 800081a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800081c:	e026      	b.n	800086c <update_motor+0x284>
		__HAL_TIM_SetCompare(&motor.Timer_Forward,motor.Channel_Forward,motor.alpha);
 800081e:	220c      	movs	r2, #12
 8000820:	1d13      	adds	r3, r2, #4
 8000822:	19db      	adds	r3, r3, r7
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2b0c      	cmp	r3, #12
 8000828:	d108      	bne.n	800083c <update_motor+0x254>
 800082a:	1d13      	adds	r3, r2, #4
 800082c:	19db      	adds	r3, r3, r7
 800082e:	68d9      	ldr	r1, [r3, #12]
 8000830:	1d13      	adds	r3, r2, #4
 8000832:	19db      	adds	r3, r3, r7
 8000834:	6a1a      	ldr	r2, [r3, #32]
 8000836:	000b      	movs	r3, r1
 8000838:	6413      	str	r3, [r2, #64]	; 0x40
}
 800083a:	e017      	b.n	800086c <update_motor+0x284>
		__HAL_TIM_SetCompare(&motor.Timer_Forward,motor.Channel_Forward,motor.alpha);
 800083c:	220c      	movs	r2, #12
 800083e:	1d13      	adds	r3, r2, #4
 8000840:	19db      	adds	r3, r3, r7
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b10      	cmp	r3, #16
 8000846:	d108      	bne.n	800085a <update_motor+0x272>
 8000848:	1d13      	adds	r3, r2, #4
 800084a:	19db      	adds	r3, r3, r7
 800084c:	68d9      	ldr	r1, [r3, #12]
 800084e:	1d13      	adds	r3, r2, #4
 8000850:	19db      	adds	r3, r3, r7
 8000852:	6a1a      	ldr	r2, [r3, #32]
 8000854:	000b      	movs	r3, r1
 8000856:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000858:	e008      	b.n	800086c <update_motor+0x284>
		__HAL_TIM_SetCompare(&motor.Timer_Forward,motor.Channel_Forward,motor.alpha);
 800085a:	220c      	movs	r2, #12
 800085c:	1d13      	adds	r3, r2, #4
 800085e:	19db      	adds	r3, r3, r7
 8000860:	68d9      	ldr	r1, [r3, #12]
 8000862:	1d13      	adds	r3, r2, #4
 8000864:	19db      	adds	r3, r3, r7
 8000866:	6a1a      	ldr	r2, [r3, #32]
 8000868:	000b      	movs	r3, r1
 800086a:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	bcb0      	pop	{r4, r5, r7}
 8000872:	bc08      	pop	{r3}
 8000874:	b004      	add	sp, #16
 8000876:	4718      	bx	r3

08000878 <motor_Init>:
void motor_Init(struct Motor_drv_struct *moteur1, struct Motor_drv_struct *moteur2){
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]

	moteur1->Channel_Backward = TIM_CHANNEL_1;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2200      	movs	r2, #0
 8000886:	605a      	str	r2, [r3, #4]
	moteur1->Channel_Forward = TIM_CHANNEL_2;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2204      	movs	r2, #4
 800088c:	601a      	str	r2, [r3, #0]
	moteur1->Timer_Backward = htim15;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4a20      	ldr	r2, [pc, #128]	; (8000914 <motor_Init+0x9c>)
 8000892:	336c      	adds	r3, #108	; 0x6c
 8000894:	0011      	movs	r1, r2
 8000896:	224c      	movs	r2, #76	; 0x4c
 8000898:	0018      	movs	r0, r3
 800089a:	f005 fed9 	bl	8006650 <memcpy>
	moteur1->Timer_Forward = htim15;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a1c      	ldr	r2, [pc, #112]	; (8000914 <motor_Init+0x9c>)
 80008a2:	3320      	adds	r3, #32
 80008a4:	0011      	movs	r1, r2
 80008a6:	224c      	movs	r2, #76	; 0x4c
 80008a8:	0018      	movs	r0, r3
 80008aa:	f005 fed1 	bl	8006650 <memcpy>
	moteur1->pwm_start = pwm_start;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	21b8      	movs	r1, #184	; 0xb8
 80008b2:	4a19      	ldr	r2, [pc, #100]	; (8000918 <motor_Init+0xa0>)
 80008b4:	505a      	str	r2, [r3, r1]
	moteur1->pwm_stop = pwm_stop;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	21bc      	movs	r1, #188	; 0xbc
 80008ba:	4a18      	ldr	r2, [pc, #96]	; (800091c <motor_Init+0xa4>)
 80008bc:	505a      	str	r2, [r3, r1]
	moteur1->update = update_motor;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	21c0      	movs	r1, #192	; 0xc0
 80008c2:	4a17      	ldr	r2, [pc, #92]	; (8000920 <motor_Init+0xa8>)
 80008c4:	505a      	str	r2, [r3, r1]

	moteur2->Channel_Backward = TIM_CHANNEL_1;
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	2200      	movs	r2, #0
 80008ca:	605a      	str	r2, [r3, #4]
	moteur2->Channel_Forward = TIM_CHANNEL_1;
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
	moteur2->Timer_Backward = htim16;
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	4a13      	ldr	r2, [pc, #76]	; (8000924 <motor_Init+0xac>)
 80008d6:	336c      	adds	r3, #108	; 0x6c
 80008d8:	0011      	movs	r1, r2
 80008da:	224c      	movs	r2, #76	; 0x4c
 80008dc:	0018      	movs	r0, r3
 80008de:	f005 feb7 	bl	8006650 <memcpy>
	moteur2->Timer_Forward = htim17;
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	4a10      	ldr	r2, [pc, #64]	; (8000928 <motor_Init+0xb0>)
 80008e6:	3320      	adds	r3, #32
 80008e8:	0011      	movs	r1, r2
 80008ea:	224c      	movs	r2, #76	; 0x4c
 80008ec:	0018      	movs	r0, r3
 80008ee:	f005 feaf 	bl	8006650 <memcpy>
	moteur2->pwm_start = pwm_start;
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	21b8      	movs	r1, #184	; 0xb8
 80008f6:	4a08      	ldr	r2, [pc, #32]	; (8000918 <motor_Init+0xa0>)
 80008f8:	505a      	str	r2, [r3, r1]
	moteur2->pwm_stop = pwm_stop;
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	21bc      	movs	r1, #188	; 0xbc
 80008fe:	4a07      	ldr	r2, [pc, #28]	; (800091c <motor_Init+0xa4>)
 8000900:	505a      	str	r2, [r3, r1]
	moteur2->update = update_motor;
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	21c0      	movs	r1, #192	; 0xc0
 8000906:	4a06      	ldr	r2, [pc, #24]	; (8000920 <motor_Init+0xa8>)
 8000908:	505a      	str	r2, [r3, r1]
}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	46bd      	mov	sp, r7
 800090e:	b002      	add	sp, #8
 8000910:	bd80      	pop	{r7, pc}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	200002e4 	.word	0x200002e4
 8000918:	08000591 	.word	0x08000591
 800091c:	080005bd 	.word	0x080005bd
 8000920:	080005e9 	.word	0x080005e9
 8000924:	20000330 	.word	0x20000330
 8000928:	2000037c 	.word	0x2000037c

0800092c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	0018      	movs	r0, r3
 8000936:	230c      	movs	r3, #12
 8000938:	001a      	movs	r2, r3
 800093a:	2100      	movs	r1, #0
 800093c:	f005 fe5c 	bl	80065f8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000940:	4b34      	ldr	r3, [pc, #208]	; (8000a14 <MX_ADC1_Init+0xe8>)
 8000942:	4a35      	ldr	r2, [pc, #212]	; (8000a18 <MX_ADC1_Init+0xec>)
 8000944:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000946:	4b33      	ldr	r3, [pc, #204]	; (8000a14 <MX_ADC1_Init+0xe8>)
 8000948:	2280      	movs	r2, #128	; 0x80
 800094a:	05d2      	lsls	r2, r2, #23
 800094c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800094e:	4b31      	ldr	r3, [pc, #196]	; (8000a14 <MX_ADC1_Init+0xe8>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000954:	4b2f      	ldr	r3, [pc, #188]	; (8000a14 <MX_ADC1_Init+0xe8>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800095a:	4b2e      	ldr	r3, [pc, #184]	; (8000a14 <MX_ADC1_Init+0xe8>)
 800095c:	2280      	movs	r2, #128	; 0x80
 800095e:	0392      	lsls	r2, r2, #14
 8000960:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000962:	4b2c      	ldr	r3, [pc, #176]	; (8000a14 <MX_ADC1_Init+0xe8>)
 8000964:	2204      	movs	r2, #4
 8000966:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000968:	4b2a      	ldr	r3, [pc, #168]	; (8000a14 <MX_ADC1_Init+0xe8>)
 800096a:	2200      	movs	r2, #0
 800096c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800096e:	4b29      	ldr	r3, [pc, #164]	; (8000a14 <MX_ADC1_Init+0xe8>)
 8000970:	2200      	movs	r2, #0
 8000972:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000974:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <MX_ADC1_Init+0xe8>)
 8000976:	2201      	movs	r2, #1
 8000978:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 800097a:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <MX_ADC1_Init+0xe8>)
 800097c:	2202      	movs	r2, #2
 800097e:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000980:	4b24      	ldr	r3, [pc, #144]	; (8000a14 <MX_ADC1_Init+0xe8>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000986:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <MX_ADC1_Init+0xe8>)
 8000988:	2200      	movs	r2, #0
 800098a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800098c:	4b21      	ldr	r3, [pc, #132]	; (8000a14 <MX_ADC1_Init+0xe8>)
 800098e:	222c      	movs	r2, #44	; 0x2c
 8000990:	2100      	movs	r1, #0
 8000992:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000994:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <MX_ADC1_Init+0xe8>)
 8000996:	2200      	movs	r2, #0
 8000998:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 800099a:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <MX_ADC1_Init+0xe8>)
 800099c:	2206      	movs	r2, #6
 800099e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 80009a0:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <MX_ADC1_Init+0xe8>)
 80009a2:	2206      	movs	r2, #6
 80009a4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80009a6:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <MX_ADC1_Init+0xe8>)
 80009a8:	223c      	movs	r2, #60	; 0x3c
 80009aa:	2100      	movs	r1, #0
 80009ac:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80009ae:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <MX_ADC1_Init+0xe8>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009b4:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <MX_ADC1_Init+0xe8>)
 80009b6:	0018      	movs	r0, r3
 80009b8:	f001 fdea 	bl	8002590 <HAL_ADC_Init>
 80009bc:	1e03      	subs	r3, r0, #0
 80009be:	d001      	beq.n	80009c4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80009c0:	f000 fc4c 	bl	800125c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2201      	movs	r2, #1
 80009c8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2200      	movs	r2, #0
 80009ce:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d6:	1d3a      	adds	r2, r7, #4
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_ADC1_Init+0xe8>)
 80009da:	0011      	movs	r1, r2
 80009dc:	0018      	movs	r0, r3
 80009de:	f001 ff7f 	bl	80028e0 <HAL_ADC_ConfigChannel>
 80009e2:	1e03      	subs	r3, r0, #0
 80009e4:	d001      	beq.n	80009ea <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80009e6:	f000 fc39 	bl	800125c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	4a0b      	ldr	r2, [pc, #44]	; (8000a1c <MX_ADC1_Init+0xf0>)
 80009ee:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2204      	movs	r2, #4
 80009f4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f6:	1d3a      	adds	r2, r7, #4
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_ADC1_Init+0xe8>)
 80009fa:	0011      	movs	r1, r2
 80009fc:	0018      	movs	r0, r3
 80009fe:	f001 ff6f 	bl	80028e0 <HAL_ADC_ConfigChannel>
 8000a02:	1e03      	subs	r3, r0, #0
 8000a04:	d001      	beq.n	8000a0a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000a06:	f000 fc29 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	b004      	add	sp, #16
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	20000044 	.word	0x20000044
 8000a18:	40012400 	.word	0x40012400
 8000a1c:	04000002 	.word	0x04000002

08000a20 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a20:	b590      	push	{r4, r7, lr}
 8000a22:	b08b      	sub	sp, #44	; 0x2c
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	2414      	movs	r4, #20
 8000a2a:	193b      	adds	r3, r7, r4
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	2314      	movs	r3, #20
 8000a30:	001a      	movs	r2, r3
 8000a32:	2100      	movs	r1, #0
 8000a34:	f005 fde0 	bl	80065f8 <memset>
  if(adcHandle->Instance==ADC1)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a2d      	ldr	r2, [pc, #180]	; (8000af4 <HAL_ADC_MspInit+0xd4>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d154      	bne.n	8000aec <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a42:	4b2d      	ldr	r3, [pc, #180]	; (8000af8 <HAL_ADC_MspInit+0xd8>)
 8000a44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a46:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <HAL_ADC_MspInit+0xd8>)
 8000a48:	2180      	movs	r1, #128	; 0x80
 8000a4a:	0349      	lsls	r1, r1, #13
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	641a      	str	r2, [r3, #64]	; 0x40
 8000a50:	4b29      	ldr	r3, [pc, #164]	; (8000af8 <HAL_ADC_MspInit+0xd8>)
 8000a52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a54:	2380      	movs	r3, #128	; 0x80
 8000a56:	035b      	lsls	r3, r3, #13
 8000a58:	4013      	ands	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	4b26      	ldr	r3, [pc, #152]	; (8000af8 <HAL_ADC_MspInit+0xd8>)
 8000a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a62:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <HAL_ADC_MspInit+0xd8>)
 8000a64:	2101      	movs	r1, #1
 8000a66:	430a      	orrs	r2, r1
 8000a68:	635a      	str	r2, [r3, #52]	; 0x34
 8000a6a:	4b23      	ldr	r3, [pc, #140]	; (8000af8 <HAL_ADC_MspInit+0xd8>)
 8000a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a6e:	2201      	movs	r2, #1
 8000a70:	4013      	ands	r3, r2
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_Shunt1_Pin|ADC_Shunt2_Pin;
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	2203      	movs	r2, #3
 8000a7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a7c:	193b      	adds	r3, r7, r4
 8000a7e:	2203      	movs	r2, #3
 8000a80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a88:	193a      	adds	r2, r7, r4
 8000a8a:	23a0      	movs	r3, #160	; 0xa0
 8000a8c:	05db      	lsls	r3, r3, #23
 8000a8e:	0011      	movs	r1, r2
 8000a90:	0018      	movs	r0, r3
 8000a92:	f002 fceb 	bl	800346c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000a96:	4b19      	ldr	r3, [pc, #100]	; (8000afc <HAL_ADC_MspInit+0xdc>)
 8000a98:	4a19      	ldr	r2, [pc, #100]	; (8000b00 <HAL_ADC_MspInit+0xe0>)
 8000a9a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a9c:	4b17      	ldr	r3, [pc, #92]	; (8000afc <HAL_ADC_MspInit+0xdc>)
 8000a9e:	2205      	movs	r2, #5
 8000aa0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <HAL_ADC_MspInit+0xdc>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <HAL_ADC_MspInit+0xdc>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000aae:	4b13      	ldr	r3, [pc, #76]	; (8000afc <HAL_ADC_MspInit+0xdc>)
 8000ab0:	2280      	movs	r2, #128	; 0x80
 8000ab2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <HAL_ADC_MspInit+0xdc>)
 8000ab6:	2280      	movs	r2, #128	; 0x80
 8000ab8:	0052      	lsls	r2, r2, #1
 8000aba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <HAL_ADC_MspInit+0xdc>)
 8000abe:	2280      	movs	r2, #128	; 0x80
 8000ac0:	00d2      	lsls	r2, r2, #3
 8000ac2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <HAL_ADC_MspInit+0xdc>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <HAL_ADC_MspInit+0xdc>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <HAL_ADC_MspInit+0xdc>)
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f002 fb3e 	bl	8003154 <HAL_DMA_Init>
 8000ad8:	1e03      	subs	r3, r0, #0
 8000ada:	d001      	beq.n	8000ae0 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000adc:	f000 fbbe 	bl	800125c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a06      	ldr	r2, [pc, #24]	; (8000afc <HAL_ADC_MspInit+0xdc>)
 8000ae4:	651a      	str	r2, [r3, #80]	; 0x50
 8000ae6:	4b05      	ldr	r3, [pc, #20]	; (8000afc <HAL_ADC_MspInit+0xdc>)
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000aec:	46c0      	nop			; (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b00b      	add	sp, #44	; 0x2c
 8000af2:	bd90      	pop	{r4, r7, pc}
 8000af4:	40012400 	.word	0x40012400
 8000af8:	40021000 	.word	0x40021000
 8000afc:	200000a8 	.word	0x200000a8
 8000b00:	40020008 	.word	0x40020008

08000b04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <MX_DMA_Init+0x38>)
 8000b0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <MX_DMA_Init+0x38>)
 8000b10:	2101      	movs	r1, #1
 8000b12:	430a      	orrs	r2, r1
 8000b14:	639a      	str	r2, [r3, #56]	; 0x38
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <MX_DMA_Init+0x38>)
 8000b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2100      	movs	r1, #0
 8000b26:	2009      	movs	r0, #9
 8000b28:	f002 faee 	bl	8003108 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b2c:	2009      	movs	r0, #9
 8000b2e:	f002 fb00 	bl	8003132 <HAL_NVIC_EnableIRQ>

}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b002      	add	sp, #8
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	40021000 	.word	0x40021000

08000b40 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b08b      	sub	sp, #44	; 0x2c
 8000b44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b46:	2414      	movs	r4, #20
 8000b48:	193b      	adds	r3, r7, r4
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	2314      	movs	r3, #20
 8000b4e:	001a      	movs	r2, r3
 8000b50:	2100      	movs	r1, #0
 8000b52:	f005 fd51 	bl	80065f8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	4b75      	ldr	r3, [pc, #468]	; (8000d2c <MX_GPIO_Init+0x1ec>)
 8000b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b5a:	4b74      	ldr	r3, [pc, #464]	; (8000d2c <MX_GPIO_Init+0x1ec>)
 8000b5c:	2104      	movs	r1, #4
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	635a      	str	r2, [r3, #52]	; 0x34
 8000b62:	4b72      	ldr	r3, [pc, #456]	; (8000d2c <MX_GPIO_Init+0x1ec>)
 8000b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b66:	2204      	movs	r2, #4
 8000b68:	4013      	ands	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b6e:	4b6f      	ldr	r3, [pc, #444]	; (8000d2c <MX_GPIO_Init+0x1ec>)
 8000b70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b72:	4b6e      	ldr	r3, [pc, #440]	; (8000d2c <MX_GPIO_Init+0x1ec>)
 8000b74:	2120      	movs	r1, #32
 8000b76:	430a      	orrs	r2, r1
 8000b78:	635a      	str	r2, [r3, #52]	; 0x34
 8000b7a:	4b6c      	ldr	r3, [pc, #432]	; (8000d2c <MX_GPIO_Init+0x1ec>)
 8000b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b7e:	2220      	movs	r2, #32
 8000b80:	4013      	ands	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	4b69      	ldr	r3, [pc, #420]	; (8000d2c <MX_GPIO_Init+0x1ec>)
 8000b88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b8a:	4b68      	ldr	r3, [pc, #416]	; (8000d2c <MX_GPIO_Init+0x1ec>)
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	635a      	str	r2, [r3, #52]	; 0x34
 8000b92:	4b66      	ldr	r3, [pc, #408]	; (8000d2c <MX_GPIO_Init+0x1ec>)
 8000b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b96:	2201      	movs	r2, #1
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9e:	4b63      	ldr	r3, [pc, #396]	; (8000d2c <MX_GPIO_Init+0x1ec>)
 8000ba0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ba2:	4b62      	ldr	r3, [pc, #392]	; (8000d2c <MX_GPIO_Init+0x1ec>)
 8000ba4:	2102      	movs	r1, #2
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	635a      	str	r2, [r3, #52]	; 0x34
 8000baa:	4b60      	ldr	r3, [pc, #384]	; (8000d2c <MX_GPIO_Init+0x1ec>)
 8000bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bae:	2202      	movs	r2, #2
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb6:	4b5d      	ldr	r3, [pc, #372]	; (8000d2c <MX_GPIO_Init+0x1ec>)
 8000bb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bba:	4b5c      	ldr	r3, [pc, #368]	; (8000d2c <MX_GPIO_Init+0x1ec>)
 8000bbc:	2108      	movs	r1, #8
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	635a      	str	r2, [r3, #52]	; 0x34
 8000bc2:	4b5a      	ldr	r3, [pc, #360]	; (8000d2c <MX_GPIO_Init+0x1ec>)
 8000bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bc6:	2208      	movs	r2, #8
 8000bc8:	4013      	ands	r3, r2
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000bce:	2380      	movs	r3, #128	; 0x80
 8000bd0:	00d9      	lsls	r1, r3, #3
 8000bd2:	23a0      	movs	r3, #160	; 0xa0
 8000bd4:	05db      	lsls	r3, r3, #23
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f002 fdab 	bl	8003734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_RED_Pin|LED_YELLOW_Pin|LED_WHITE_Pin|LED_BLUE_Pin
 8000bde:	4b54      	ldr	r3, [pc, #336]	; (8000d30 <MX_GPIO_Init+0x1f0>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	213f      	movs	r1, #63	; 0x3f
 8000be4:	0018      	movs	r0, r3
 8000be6:	f002 fda5 	bl	8003734 <HAL_GPIO_WritePin>
                          |LED_GREEN_Pin|Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DEV_EN_Pin|M_EN_Pin, GPIO_PIN_RESET);
 8000bea:	4b52      	ldr	r3, [pc, #328]	; (8000d34 <MX_GPIO_Init+0x1f4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	2118      	movs	r1, #24
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f002 fd9f 	bl	8003734 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Bouton1_Pin|Bouton2_Pin;
 8000bf6:	193b      	adds	r3, r7, r4
 8000bf8:	2209      	movs	r2, #9
 8000bfa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bfc:	193b      	adds	r3, r7, r4
 8000bfe:	2288      	movs	r2, #136	; 0x88
 8000c00:	0352      	lsls	r2, r2, #13
 8000c02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c04:	193b      	adds	r3, r7, r4
 8000c06:	2201      	movs	r2, #1
 8000c08:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0a:	193b      	adds	r3, r7, r4
 8000c0c:	4a4a      	ldr	r2, [pc, #296]	; (8000d38 <MX_GPIO_Init+0x1f8>)
 8000c0e:	0019      	movs	r1, r3
 8000c10:	0010      	movs	r0, r2
 8000c12:	f002 fc2b 	bl	800346c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Bouton3_Pin;
 8000c16:	193b      	adds	r3, r7, r4
 8000c18:	2210      	movs	r2, #16
 8000c1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c1c:	193b      	adds	r3, r7, r4
 8000c1e:	2288      	movs	r2, #136	; 0x88
 8000c20:	0352      	lsls	r2, r2, #13
 8000c22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c24:	193b      	adds	r3, r7, r4
 8000c26:	2201      	movs	r2, #1
 8000c28:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Bouton3_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	193a      	adds	r2, r7, r4
 8000c2c:	23a0      	movs	r3, #160	; 0xa0
 8000c2e:	05db      	lsls	r3, r3, #23
 8000c30:	0011      	movs	r1, r2
 8000c32:	0018      	movs	r0, r3
 8000c34:	f002 fc1a 	bl	800346c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = Contact1_Pin|Contact2_Pin|Contact3_Pin|Contact4_Pin
 8000c38:	0021      	movs	r1, r4
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	4a3f      	ldr	r2, [pc, #252]	; (8000d3c <MX_GPIO_Init+0x1fc>)
 8000c3e:	601a      	str	r2, [r3, #0]
                          |Bordure2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c40:	187b      	adds	r3, r7, r1
 8000c42:	2288      	movs	r2, #136	; 0x88
 8000c44:	0352      	lsls	r2, r2, #13
 8000c46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4e:	000c      	movs	r4, r1
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	4a38      	ldr	r2, [pc, #224]	; (8000d34 <MX_GPIO_Init+0x1f4>)
 8000c54:	0019      	movs	r1, r3
 8000c56:	0010      	movs	r0, r2
 8000c58:	f002 fc08 	bl	800346c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000c5c:	0021      	movs	r1, r4
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	2280      	movs	r2, #128	; 0x80
 8000c62:	00d2      	lsls	r2, r2, #3
 8000c64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	000c      	movs	r4, r1
 8000c68:	193b      	adds	r3, r7, r4
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	193b      	adds	r3, r7, r4
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	193b      	adds	r3, r7, r4
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	193a      	adds	r2, r7, r4
 8000c7c:	23a0      	movs	r3, #160	; 0xa0
 8000c7e:	05db      	lsls	r3, r3, #23
 8000c80:	0011      	movs	r1, r2
 8000c82:	0018      	movs	r0, r3
 8000c84:	f002 fbf2 	bl	800346c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_WHITE_Pin|LED_BLUE_Pin
 8000c88:	193b      	adds	r3, r7, r4
 8000c8a:	223f      	movs	r2, #63	; 0x3f
 8000c8c:	601a      	str	r2, [r3, #0]
                          |LED_GREEN_Pin|Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	193b      	adds	r3, r7, r4
 8000c90:	2201      	movs	r2, #1
 8000c92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	193b      	adds	r3, r7, r4
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca0:	193b      	adds	r3, r7, r4
 8000ca2:	4a23      	ldr	r2, [pc, #140]	; (8000d30 <MX_GPIO_Init+0x1f0>)
 8000ca4:	0019      	movs	r1, r3
 8000ca6:	0010      	movs	r0, r2
 8000ca8:	f002 fbe0 	bl	800346c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DEV_EN_Pin|M_EN_Pin;
 8000cac:	193b      	adds	r3, r7, r4
 8000cae:	2218      	movs	r2, #24
 8000cb0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	193b      	adds	r3, r7, r4
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	193b      	adds	r3, r7, r4
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	193b      	adds	r3, r7, r4
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc4:	193b      	adds	r3, r7, r4
 8000cc6:	4a1b      	ldr	r2, [pc, #108]	; (8000d34 <MX_GPIO_Init+0x1f4>)
 8000cc8:	0019      	movs	r1, r3
 8000cca:	0010      	movs	r0, r2
 8000ccc:	f002 fbce 	bl	800346c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Bordure1_Pin;
 8000cd0:	0021      	movs	r1, r4
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	2280      	movs	r2, #128	; 0x80
 8000cd6:	0052      	lsls	r2, r2, #1
 8000cd8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	2288      	movs	r2, #136	; 0x88
 8000cde:	0352      	lsls	r2, r2, #13
 8000ce0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Bordure1_GPIO_Port, &GPIO_InitStruct);
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <MX_GPIO_Init+0x1f4>)
 8000cec:	0019      	movs	r1, r3
 8000cee:	0010      	movs	r0, r2
 8000cf0:	f002 fbbc 	bl	800346c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2005      	movs	r0, #5
 8000cfa:	f002 fa05 	bl	8003108 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000cfe:	2005      	movs	r0, #5
 8000d00:	f002 fa17 	bl	8003132 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2100      	movs	r1, #0
 8000d08:	2006      	movs	r0, #6
 8000d0a:	f002 f9fd 	bl	8003108 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000d0e:	2006      	movs	r0, #6
 8000d10:	f002 fa0f 	bl	8003132 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2100      	movs	r1, #0
 8000d18:	2007      	movs	r0, #7
 8000d1a:	f002 f9f5 	bl	8003108 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000d1e:	2007      	movs	r0, #7
 8000d20:	f002 fa07 	bl	8003132 <HAL_NVIC_EnableIRQ>

}
 8000d24:	46c0      	nop			; (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b00b      	add	sp, #44	; 0x2c
 8000d2a:	bd90      	pop	{r4, r7, pc}
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	50000c00 	.word	0x50000c00
 8000d34:	50000400 	.word	0x50000400
 8000d38:	50000800 	.word	0x50000800
 8000d3c:	0000e220 	.word	0x0000e220

08000d40 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d42:	4ce3      	ldr	r4, [pc, #908]	; (80010d0 <main+0x390>)
 8000d44:	44a5      	add	sp, r4
 8000d46:	af2e      	add	r7, sp, #184	; 0xb8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d48:	f001 fa8a 	bl	8002260 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d4c:	f000 fa1a 	bl	8001184 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d50:	f7ff fef6 	bl	8000b40 <MX_GPIO_Init>
	MX_DMA_Init();
 8000d54:	f7ff fed6 	bl	8000b04 <MX_DMA_Init>
	MX_ADC1_Init();
 8000d58:	f7ff fde8 	bl	800092c <MX_ADC1_Init>
	MX_TIM1_Init();
 8000d5c:	f000 fc5a 	bl	8001614 <MX_TIM1_Init>
	MX_TIM3_Init();
 8000d60:	f000 fcc2 	bl	80016e8 <MX_TIM3_Init>
	MX_TIM14_Init();
 8000d64:	f000 fd60 	bl	8001828 <MX_TIM14_Init>
	MX_TIM15_Init();
 8000d68:	f000 fdae 	bl	80018c8 <MX_TIM15_Init>
	MX_TIM16_Init();
 8000d6c:	f000 fe50 	bl	8001a10 <MX_TIM16_Init>
	MX_TIM17_Init();
 8000d70:	f000 fed6 	bl	8001b20 <MX_TIM17_Init>
	MX_USART1_UART_Init();
 8000d74:	f001 f92e 	bl	8001fd4 <MX_USART1_UART_Init>
	MX_USART4_UART_Init();
 8000d78:	f001 f97a 	bl	8002070 <MX_USART4_UART_Init>
	MX_SPI1_Init();
 8000d7c:	f000 fa94 	bl	80012a8 <MX_SPI1_Init>
	MX_TIM6_Init();
 8000d80:	f000 fd16 	bl	80017b0 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */

	HAL_ADCEx_Calibration_Start(&hadc1);
 8000d84:	4bd3      	ldr	r3, [pc, #844]	; (80010d4 <main+0x394>)
 8000d86:	0018      	movs	r0, r3
 8000d88:	f002 f860 	bl	8002e4c <HAL_ADCEx_Calibration_Start>
	}

	 */
	//=============================== Fin de création des taches =======================================

	HAL_TIM_Base_Start(&htim6);
 8000d8c:	4bd2      	ldr	r3, [pc, #840]	; (80010d8 <main+0x398>)
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f003 fcae 	bl	80046f0 <HAL_TIM_Base_Start>

	codeur_start();
 8000d94:	f7ff fbb6 	bl	8000504 <codeur_start>


	Motor_drv moteur1,moteur2;
	motor_Init(&moteur1,&moteur2);
 8000d98:	003a      	movs	r2, r7
 8000d9a:	26c4      	movs	r6, #196	; 0xc4
 8000d9c:	19bb      	adds	r3, r7, r6
 8000d9e:	0011      	movs	r1, r2
 8000da0:	0018      	movs	r0, r3
 8000da2:	f7ff fd69 	bl	8000878 <motor_Init>
	moteur1.sens = 1;
 8000da6:	19bb      	adds	r3, r7, r6
 8000da8:	2201      	movs	r2, #1
 8000daa:	609a      	str	r2, [r3, #8]
	moteur1.alpha = alpha_test;
 8000dac:	4bcb      	ldr	r3, [pc, #812]	; (80010dc <main+0x39c>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	19bb      	adds	r3, r7, r6
 8000db2:	60da      	str	r2, [r3, #12]
	moteur1.update(moteur1);
 8000db4:	19bb      	adds	r3, r7, r6
 8000db6:	22c0      	movs	r2, #192	; 0xc0
 8000db8:	589d      	ldr	r5, [r3, r2]
 8000dba:	19bc      	adds	r4, r7, r6
 8000dbc:	466b      	mov	r3, sp
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	0023      	movs	r3, r4
 8000dc2:	3310      	adds	r3, #16
 8000dc4:	22b4      	movs	r2, #180	; 0xb4
 8000dc6:	0019      	movs	r1, r3
 8000dc8:	f005 fc42 	bl	8006650 <memcpy>
 8000dcc:	6820      	ldr	r0, [r4, #0]
 8000dce:	6861      	ldr	r1, [r4, #4]
 8000dd0:	68a2      	ldr	r2, [r4, #8]
 8000dd2:	68e3      	ldr	r3, [r4, #12]
 8000dd4:	47a8      	blx	r5

	moteur1.pwm_start(moteur1.Timer_Backward,moteur1.Channel_Backward);
 8000dd6:	19bb      	adds	r3, r7, r6
 8000dd8:	22b8      	movs	r2, #184	; 0xb8
 8000dda:	589d      	ldr	r5, [r3, r2]
 8000ddc:	19bb      	adds	r3, r7, r6
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	19bc      	adds	r4, r7, r6
 8000de2:	930f      	str	r3, [sp, #60]	; 0x3c
 8000de4:	466b      	mov	r3, sp
 8000de6:	0018      	movs	r0, r3
 8000de8:	0023      	movs	r3, r4
 8000dea:	337c      	adds	r3, #124	; 0x7c
 8000dec:	223c      	movs	r2, #60	; 0x3c
 8000dee:	0019      	movs	r1, r3
 8000df0:	f005 fc2e 	bl	8006650 <memcpy>
 8000df4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8000df6:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8000df8:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8000dfa:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8000dfc:	47a8      	blx	r5
	moteur1.pwm_start(moteur1.Timer_Forward,moteur1.Channel_Forward);
 8000dfe:	19bb      	adds	r3, r7, r6
 8000e00:	22b8      	movs	r2, #184	; 0xb8
 8000e02:	589d      	ldr	r5, [r3, r2]
 8000e04:	19bb      	adds	r3, r7, r6
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	19bc      	adds	r4, r7, r6
 8000e0a:	930f      	str	r3, [sp, #60]	; 0x3c
 8000e0c:	466b      	mov	r3, sp
 8000e0e:	0018      	movs	r0, r3
 8000e10:	0023      	movs	r3, r4
 8000e12:	3330      	adds	r3, #48	; 0x30
 8000e14:	223c      	movs	r2, #60	; 0x3c
 8000e16:	0019      	movs	r1, r3
 8000e18:	f005 fc1a 	bl	8006650 <memcpy>
 8000e1c:	6a20      	ldr	r0, [r4, #32]
 8000e1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000e20:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000e22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e24:	47a8      	blx	r5

	moteur2.sens = 2;
 8000e26:	4bae      	ldr	r3, [pc, #696]	; (80010e0 <main+0x3a0>)
 8000e28:	26c8      	movs	r6, #200	; 0xc8
 8000e2a:	0076      	lsls	r6, r6, #1
 8000e2c:	199b      	adds	r3, r3, r6
 8000e2e:	19db      	adds	r3, r3, r7
 8000e30:	2202      	movs	r2, #2
 8000e32:	609a      	str	r2, [r3, #8]
	moteur2.alpha = alpha_test;
 8000e34:	4ba9      	ldr	r3, [pc, #676]	; (80010dc <main+0x39c>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4ba9      	ldr	r3, [pc, #676]	; (80010e0 <main+0x3a0>)
 8000e3a:	199b      	adds	r3, r3, r6
 8000e3c:	19db      	adds	r3, r3, r7
 8000e3e:	60da      	str	r2, [r3, #12]
	moteur2.update(moteur2);
 8000e40:	4ba7      	ldr	r3, [pc, #668]	; (80010e0 <main+0x3a0>)
 8000e42:	199b      	adds	r3, r3, r6
 8000e44:	19db      	adds	r3, r3, r7
 8000e46:	22c0      	movs	r2, #192	; 0xc0
 8000e48:	589d      	ldr	r5, [r3, r2]
 8000e4a:	4ba5      	ldr	r3, [pc, #660]	; (80010e0 <main+0x3a0>)
 8000e4c:	199b      	adds	r3, r3, r6
 8000e4e:	19dc      	adds	r4, r3, r7
 8000e50:	466b      	mov	r3, sp
 8000e52:	0018      	movs	r0, r3
 8000e54:	0023      	movs	r3, r4
 8000e56:	3310      	adds	r3, #16
 8000e58:	22b4      	movs	r2, #180	; 0xb4
 8000e5a:	0019      	movs	r1, r3
 8000e5c:	f005 fbf8 	bl	8006650 <memcpy>
 8000e60:	6820      	ldr	r0, [r4, #0]
 8000e62:	6861      	ldr	r1, [r4, #4]
 8000e64:	68a2      	ldr	r2, [r4, #8]
 8000e66:	68e3      	ldr	r3, [r4, #12]
 8000e68:	47a8      	blx	r5

	moteur2.pwm_start(moteur2.Timer_Backward,moteur2.Channel_Backward);
 8000e6a:	4b9d      	ldr	r3, [pc, #628]	; (80010e0 <main+0x3a0>)
 8000e6c:	199b      	adds	r3, r3, r6
 8000e6e:	19db      	adds	r3, r3, r7
 8000e70:	22b8      	movs	r2, #184	; 0xb8
 8000e72:	589d      	ldr	r5, [r3, r2]
 8000e74:	4b9a      	ldr	r3, [pc, #616]	; (80010e0 <main+0x3a0>)
 8000e76:	199b      	adds	r3, r3, r6
 8000e78:	19db      	adds	r3, r3, r7
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	4a98      	ldr	r2, [pc, #608]	; (80010e0 <main+0x3a0>)
 8000e7e:	1992      	adds	r2, r2, r6
 8000e80:	19d4      	adds	r4, r2, r7
 8000e82:	930f      	str	r3, [sp, #60]	; 0x3c
 8000e84:	466b      	mov	r3, sp
 8000e86:	0018      	movs	r0, r3
 8000e88:	0023      	movs	r3, r4
 8000e8a:	337c      	adds	r3, #124	; 0x7c
 8000e8c:	223c      	movs	r2, #60	; 0x3c
 8000e8e:	0019      	movs	r1, r3
 8000e90:	f005 fbde 	bl	8006650 <memcpy>
 8000e94:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8000e96:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8000e98:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8000e9a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8000e9c:	47a8      	blx	r5
	moteur2.pwm_start(moteur2.Timer_Forward,moteur2.Channel_Forward);
 8000e9e:	4b90      	ldr	r3, [pc, #576]	; (80010e0 <main+0x3a0>)
 8000ea0:	199b      	adds	r3, r3, r6
 8000ea2:	19db      	adds	r3, r3, r7
 8000ea4:	22b8      	movs	r2, #184	; 0xb8
 8000ea6:	589d      	ldr	r5, [r3, r2]
 8000ea8:	4b8d      	ldr	r3, [pc, #564]	; (80010e0 <main+0x3a0>)
 8000eaa:	199b      	adds	r3, r3, r6
 8000eac:	19db      	adds	r3, r3, r7
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a8b      	ldr	r2, [pc, #556]	; (80010e0 <main+0x3a0>)
 8000eb2:	1992      	adds	r2, r2, r6
 8000eb4:	19d4      	adds	r4, r2, r7
 8000eb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8000eb8:	466b      	mov	r3, sp
 8000eba:	0018      	movs	r0, r3
 8000ebc:	0023      	movs	r3, r4
 8000ebe:	3330      	adds	r3, #48	; 0x30
 8000ec0:	223c      	movs	r2, #60	; 0x3c
 8000ec2:	0019      	movs	r1, r3
 8000ec4:	f005 fbc4 	bl	8006650 <memcpy>
 8000ec8:	6a20      	ldr	r0, [r4, #32]
 8000eca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000ecc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ece:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000ed0:	47a8      	blx	r5
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		moteur1.alpha = 500;
 8000ed2:	26c4      	movs	r6, #196	; 0xc4
 8000ed4:	19bb      	adds	r3, r7, r6
 8000ed6:	22fa      	movs	r2, #250	; 0xfa
 8000ed8:	0052      	lsls	r2, r2, #1
 8000eda:	60da      	str	r2, [r3, #12]
		moteur1.sens = 1;
 8000edc:	19bb      	adds	r3, r7, r6
 8000ede:	2201      	movs	r2, #1
 8000ee0:	609a      	str	r2, [r3, #8]
		moteur1.update(moteur1);
 8000ee2:	19bb      	adds	r3, r7, r6
 8000ee4:	22c0      	movs	r2, #192	; 0xc0
 8000ee6:	589d      	ldr	r5, [r3, r2]
 8000ee8:	19bc      	adds	r4, r7, r6
 8000eea:	466b      	mov	r3, sp
 8000eec:	0018      	movs	r0, r3
 8000eee:	0023      	movs	r3, r4
 8000ef0:	3310      	adds	r3, #16
 8000ef2:	22b4      	movs	r2, #180	; 0xb4
 8000ef4:	0019      	movs	r1, r3
 8000ef6:	f005 fbab 	bl	8006650 <memcpy>
 8000efa:	6820      	ldr	r0, [r4, #0]
 8000efc:	6861      	ldr	r1, [r4, #4]
 8000efe:	68a2      	ldr	r2, [r4, #8]
 8000f00:	68e3      	ldr	r3, [r4, #12]
 8000f02:	47a8      	blx	r5
		moteur2.alpha = 500;
 8000f04:	4b76      	ldr	r3, [pc, #472]	; (80010e0 <main+0x3a0>)
 8000f06:	21c8      	movs	r1, #200	; 0xc8
 8000f08:	0049      	lsls	r1, r1, #1
 8000f0a:	185b      	adds	r3, r3, r1
 8000f0c:	19db      	adds	r3, r3, r7
 8000f0e:	22fa      	movs	r2, #250	; 0xfa
 8000f10:	0052      	lsls	r2, r2, #1
 8000f12:	60da      	str	r2, [r3, #12]
		moteur2.sens = 2;
 8000f14:	4b72      	ldr	r3, [pc, #456]	; (80010e0 <main+0x3a0>)
 8000f16:	185b      	adds	r3, r3, r1
 8000f18:	19db      	adds	r3, r3, r7
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	609a      	str	r2, [r3, #8]
		moteur2.update(moteur2);
 8000f1e:	4b70      	ldr	r3, [pc, #448]	; (80010e0 <main+0x3a0>)
 8000f20:	185b      	adds	r3, r3, r1
 8000f22:	19db      	adds	r3, r3, r7
 8000f24:	22c0      	movs	r2, #192	; 0xc0
 8000f26:	589d      	ldr	r5, [r3, r2]
 8000f28:	4b6d      	ldr	r3, [pc, #436]	; (80010e0 <main+0x3a0>)
 8000f2a:	185b      	adds	r3, r3, r1
 8000f2c:	19dc      	adds	r4, r3, r7
 8000f2e:	466b      	mov	r3, sp
 8000f30:	0018      	movs	r0, r3
 8000f32:	0023      	movs	r3, r4
 8000f34:	3310      	adds	r3, #16
 8000f36:	22b4      	movs	r2, #180	; 0xb4
 8000f38:	0019      	movs	r1, r3
 8000f3a:	f005 fb89 	bl	8006650 <memcpy>
 8000f3e:	6820      	ldr	r0, [r4, #0]
 8000f40:	6861      	ldr	r1, [r4, #4]
 8000f42:	68a2      	ldr	r2, [r4, #8]
 8000f44:	68e3      	ldr	r3, [r4, #12]
 8000f46:	47a8      	blx	r5

		if (capteurs.BORDURE_1==TRUE){
 8000f48:	4b66      	ldr	r3, [pc, #408]	; (80010e4 <main+0x3a4>)
 8000f4a:	79db      	ldrb	r3, [r3, #7]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d1c0      	bne.n	8000ed2 <main+0x192>

			moteur1.sens = 2;
 8000f50:	19bb      	adds	r3, r7, r6
 8000f52:	2202      	movs	r2, #2
 8000f54:	609a      	str	r2, [r3, #8]
			moteur2.sens = 1;
 8000f56:	4b62      	ldr	r3, [pc, #392]	; (80010e0 <main+0x3a0>)
 8000f58:	21c8      	movs	r1, #200	; 0xc8
 8000f5a:	0049      	lsls	r1, r1, #1
 8000f5c:	185b      	adds	r3, r3, r1
 8000f5e:	19db      	adds	r3, r3, r7
 8000f60:	2201      	movs	r2, #1
 8000f62:	609a      	str	r2, [r3, #8]
			moteur1.alpha = 300;
 8000f64:	19bb      	adds	r3, r7, r6
 8000f66:	2296      	movs	r2, #150	; 0x96
 8000f68:	0052      	lsls	r2, r2, #1
 8000f6a:	60da      	str	r2, [r3, #12]
			moteur2.alpha = 300;
 8000f6c:	4b5c      	ldr	r3, [pc, #368]	; (80010e0 <main+0x3a0>)
 8000f6e:	185b      	adds	r3, r3, r1
 8000f70:	19db      	adds	r3, r3, r7
 8000f72:	2296      	movs	r2, #150	; 0x96
 8000f74:	0052      	lsls	r2, r2, #1
 8000f76:	60da      	str	r2, [r3, #12]
			moteur1.update(moteur1);
 8000f78:	19bb      	adds	r3, r7, r6
 8000f7a:	22c0      	movs	r2, #192	; 0xc0
 8000f7c:	589d      	ldr	r5, [r3, r2]
 8000f7e:	19bc      	adds	r4, r7, r6
 8000f80:	466b      	mov	r3, sp
 8000f82:	0018      	movs	r0, r3
 8000f84:	0023      	movs	r3, r4
 8000f86:	3310      	adds	r3, #16
 8000f88:	22b4      	movs	r2, #180	; 0xb4
 8000f8a:	0019      	movs	r1, r3
 8000f8c:	f005 fb60 	bl	8006650 <memcpy>
 8000f90:	6820      	ldr	r0, [r4, #0]
 8000f92:	6861      	ldr	r1, [r4, #4]
 8000f94:	68a2      	ldr	r2, [r4, #8]
 8000f96:	68e3      	ldr	r3, [r4, #12]
 8000f98:	47a8      	blx	r5
			moteur2.update(moteur2);
 8000f9a:	4b51      	ldr	r3, [pc, #324]	; (80010e0 <main+0x3a0>)
 8000f9c:	21c8      	movs	r1, #200	; 0xc8
 8000f9e:	0049      	lsls	r1, r1, #1
 8000fa0:	185b      	adds	r3, r3, r1
 8000fa2:	19db      	adds	r3, r3, r7
 8000fa4:	22c0      	movs	r2, #192	; 0xc0
 8000fa6:	589d      	ldr	r5, [r3, r2]
 8000fa8:	4b4d      	ldr	r3, [pc, #308]	; (80010e0 <main+0x3a0>)
 8000faa:	185b      	adds	r3, r3, r1
 8000fac:	19dc      	adds	r4, r3, r7
 8000fae:	466b      	mov	r3, sp
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	0023      	movs	r3, r4
 8000fb4:	3310      	adds	r3, #16
 8000fb6:	22b4      	movs	r2, #180	; 0xb4
 8000fb8:	0019      	movs	r1, r3
 8000fba:	f005 fb49 	bl	8006650 <memcpy>
 8000fbe:	6820      	ldr	r0, [r4, #0]
 8000fc0:	6861      	ldr	r1, [r4, #4]
 8000fc2:	68a2      	ldr	r2, [r4, #8]
 8000fc4:	68e3      	ldr	r3, [r4, #12]
 8000fc6:	47a8      	blx	r5

			for (int i = 300; i<800; i++){
 8000fc8:	2396      	movs	r3, #150	; 0x96
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	22c6      	movs	r2, #198	; 0xc6
 8000fce:	0052      	lsls	r2, r2, #1
 8000fd0:	18ba      	adds	r2, r7, r2
 8000fd2:	6013      	str	r3, [r2, #0]
 8000fd4:	e03c      	b.n	8001050 <main+0x310>
				moteur1.alpha = i;
 8000fd6:	21c4      	movs	r1, #196	; 0xc4
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	26c6      	movs	r6, #198	; 0xc6
 8000fdc:	0076      	lsls	r6, r6, #1
 8000fde:	19ba      	adds	r2, r7, r6
 8000fe0:	6812      	ldr	r2, [r2, #0]
 8000fe2:	60da      	str	r2, [r3, #12]
				moteur1.update(moteur1);
 8000fe4:	187b      	adds	r3, r7, r1
 8000fe6:	22c0      	movs	r2, #192	; 0xc0
 8000fe8:	589d      	ldr	r5, [r3, r2]
 8000fea:	187c      	adds	r4, r7, r1
 8000fec:	466b      	mov	r3, sp
 8000fee:	0018      	movs	r0, r3
 8000ff0:	0023      	movs	r3, r4
 8000ff2:	3310      	adds	r3, #16
 8000ff4:	22b4      	movs	r2, #180	; 0xb4
 8000ff6:	0019      	movs	r1, r3
 8000ff8:	f005 fb2a 	bl	8006650 <memcpy>
 8000ffc:	6820      	ldr	r0, [r4, #0]
 8000ffe:	6861      	ldr	r1, [r4, #4]
 8001000:	68a2      	ldr	r2, [r4, #8]
 8001002:	68e3      	ldr	r3, [r4, #12]
 8001004:	47a8      	blx	r5
				moteur2.alpha = i;
 8001006:	4b36      	ldr	r3, [pc, #216]	; (80010e0 <main+0x3a0>)
 8001008:	21c8      	movs	r1, #200	; 0xc8
 800100a:	0049      	lsls	r1, r1, #1
 800100c:	185b      	adds	r3, r3, r1
 800100e:	19db      	adds	r3, r3, r7
 8001010:	19ba      	adds	r2, r7, r6
 8001012:	6812      	ldr	r2, [r2, #0]
 8001014:	60da      	str	r2, [r3, #12]
				moteur2.update(moteur2);
 8001016:	4b32      	ldr	r3, [pc, #200]	; (80010e0 <main+0x3a0>)
 8001018:	185b      	adds	r3, r3, r1
 800101a:	19db      	adds	r3, r3, r7
 800101c:	22c0      	movs	r2, #192	; 0xc0
 800101e:	589d      	ldr	r5, [r3, r2]
 8001020:	4b2f      	ldr	r3, [pc, #188]	; (80010e0 <main+0x3a0>)
 8001022:	185b      	adds	r3, r3, r1
 8001024:	19dc      	adds	r4, r3, r7
 8001026:	466b      	mov	r3, sp
 8001028:	0018      	movs	r0, r3
 800102a:	0023      	movs	r3, r4
 800102c:	3310      	adds	r3, #16
 800102e:	22b4      	movs	r2, #180	; 0xb4
 8001030:	0019      	movs	r1, r3
 8001032:	f005 fb0d 	bl	8006650 <memcpy>
 8001036:	6820      	ldr	r0, [r4, #0]
 8001038:	6861      	ldr	r1, [r4, #4]
 800103a:	68a2      	ldr	r2, [r4, #8]
 800103c:	68e3      	ldr	r3, [r4, #12]
 800103e:	47a8      	blx	r5
				HAL_Delay(5);
 8001040:	2005      	movs	r0, #5
 8001042:	f001 f949 	bl	80022d8 <HAL_Delay>
			for (int i = 300; i<800; i++){
 8001046:	19bb      	adds	r3, r7, r6
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	19ba      	adds	r2, r7, r6
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	23c6      	movs	r3, #198	; 0xc6
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	18fb      	adds	r3, r7, r3
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	23c8      	movs	r3, #200	; 0xc8
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	429a      	cmp	r2, r3
 800105e:	dbba      	blt.n	8000fd6 <main+0x296>
			}
			moteur1.sens = 2;
 8001060:	21c4      	movs	r1, #196	; 0xc4
 8001062:	187b      	adds	r3, r7, r1
 8001064:	2202      	movs	r2, #2
 8001066:	609a      	str	r2, [r3, #8]
			moteur2.sens = 2;
 8001068:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <main+0x3a0>)
 800106a:	26c8      	movs	r6, #200	; 0xc8
 800106c:	0076      	lsls	r6, r6, #1
 800106e:	199b      	adds	r3, r3, r6
 8001070:	19db      	adds	r3, r3, r7
 8001072:	2202      	movs	r2, #2
 8001074:	609a      	str	r2, [r3, #8]
			moteur1.update(moteur1);
 8001076:	187b      	adds	r3, r7, r1
 8001078:	22c0      	movs	r2, #192	; 0xc0
 800107a:	589d      	ldr	r5, [r3, r2]
 800107c:	187c      	adds	r4, r7, r1
 800107e:	466b      	mov	r3, sp
 8001080:	0018      	movs	r0, r3
 8001082:	0023      	movs	r3, r4
 8001084:	3310      	adds	r3, #16
 8001086:	22b4      	movs	r2, #180	; 0xb4
 8001088:	0019      	movs	r1, r3
 800108a:	f005 fae1 	bl	8006650 <memcpy>
 800108e:	6820      	ldr	r0, [r4, #0]
 8001090:	6861      	ldr	r1, [r4, #4]
 8001092:	68a2      	ldr	r2, [r4, #8]
 8001094:	68e3      	ldr	r3, [r4, #12]
 8001096:	47a8      	blx	r5
			moteur2.update(moteur2);
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <main+0x3a0>)
 800109a:	199b      	adds	r3, r3, r6
 800109c:	19db      	adds	r3, r3, r7
 800109e:	22c0      	movs	r2, #192	; 0xc0
 80010a0:	589d      	ldr	r5, [r3, r2]
 80010a2:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <main+0x3a0>)
 80010a4:	199b      	adds	r3, r3, r6
 80010a6:	19dc      	adds	r4, r3, r7
 80010a8:	466b      	mov	r3, sp
 80010aa:	0018      	movs	r0, r3
 80010ac:	0023      	movs	r3, r4
 80010ae:	3310      	adds	r3, #16
 80010b0:	22b4      	movs	r2, #180	; 0xb4
 80010b2:	0019      	movs	r1, r3
 80010b4:	f005 facc 	bl	8006650 <memcpy>
 80010b8:	6820      	ldr	r0, [r4, #0]
 80010ba:	6861      	ldr	r1, [r4, #4]
 80010bc:	68a2      	ldr	r2, [r4, #8]
 80010be:	68e3      	ldr	r3, [r4, #12]
 80010c0:	47a8      	blx	r5
			for (int i = 300; i<500; i++){
 80010c2:	2396      	movs	r3, #150	; 0x96
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	22c4      	movs	r2, #196	; 0xc4
 80010c8:	0052      	lsls	r2, r2, #1
 80010ca:	18ba      	adds	r2, r7, r2
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	e048      	b.n	8001162 <main+0x422>
 80010d0:	fffffdb4 	.word	0xfffffdb4
 80010d4:	20000044 	.word	0x20000044
 80010d8:	2000024c 	.word	0x2000024c
 80010dc:	20000000 	.word	0x20000000
 80010e0:	fffffe70 	.word	0xfffffe70
 80010e4:	2000002c 	.word	0x2000002c
				moteur1.alpha = i;
 80010e8:	21c4      	movs	r1, #196	; 0xc4
 80010ea:	187b      	adds	r3, r7, r1
 80010ec:	26c4      	movs	r6, #196	; 0xc4
 80010ee:	0076      	lsls	r6, r6, #1
 80010f0:	19ba      	adds	r2, r7, r6
 80010f2:	6812      	ldr	r2, [r2, #0]
 80010f4:	60da      	str	r2, [r3, #12]
				moteur1.update(moteur1);
 80010f6:	187b      	adds	r3, r7, r1
 80010f8:	22c0      	movs	r2, #192	; 0xc0
 80010fa:	589d      	ldr	r5, [r3, r2]
 80010fc:	187c      	adds	r4, r7, r1
 80010fe:	466b      	mov	r3, sp
 8001100:	0018      	movs	r0, r3
 8001102:	0023      	movs	r3, r4
 8001104:	3310      	adds	r3, #16
 8001106:	22b4      	movs	r2, #180	; 0xb4
 8001108:	0019      	movs	r1, r3
 800110a:	f005 faa1 	bl	8006650 <memcpy>
 800110e:	6820      	ldr	r0, [r4, #0]
 8001110:	6861      	ldr	r1, [r4, #4]
 8001112:	68a2      	ldr	r2, [r4, #8]
 8001114:	68e3      	ldr	r3, [r4, #12]
 8001116:	47a8      	blx	r5
				moteur2.alpha = i;
 8001118:	4b18      	ldr	r3, [pc, #96]	; (800117c <main+0x43c>)
 800111a:	21c8      	movs	r1, #200	; 0xc8
 800111c:	0049      	lsls	r1, r1, #1
 800111e:	185b      	adds	r3, r3, r1
 8001120:	19db      	adds	r3, r3, r7
 8001122:	19ba      	adds	r2, r7, r6
 8001124:	6812      	ldr	r2, [r2, #0]
 8001126:	60da      	str	r2, [r3, #12]
				moteur2.update(moteur2);
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <main+0x43c>)
 800112a:	185b      	adds	r3, r3, r1
 800112c:	19db      	adds	r3, r3, r7
 800112e:	22c0      	movs	r2, #192	; 0xc0
 8001130:	589d      	ldr	r5, [r3, r2]
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <main+0x43c>)
 8001134:	185b      	adds	r3, r3, r1
 8001136:	19dc      	adds	r4, r3, r7
 8001138:	466b      	mov	r3, sp
 800113a:	0018      	movs	r0, r3
 800113c:	0023      	movs	r3, r4
 800113e:	3310      	adds	r3, #16
 8001140:	22b4      	movs	r2, #180	; 0xb4
 8001142:	0019      	movs	r1, r3
 8001144:	f005 fa84 	bl	8006650 <memcpy>
 8001148:	6820      	ldr	r0, [r4, #0]
 800114a:	6861      	ldr	r1, [r4, #4]
 800114c:	68a2      	ldr	r2, [r4, #8]
 800114e:	68e3      	ldr	r3, [r4, #12]
 8001150:	47a8      	blx	r5
				HAL_Delay(5);
 8001152:	2005      	movs	r0, #5
 8001154:	f001 f8c0 	bl	80022d8 <HAL_Delay>
			for (int i = 300; i<500; i++){
 8001158:	19bb      	adds	r3, r7, r6
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	3301      	adds	r3, #1
 800115e:	19ba      	adds	r2, r7, r6
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	23c4      	movs	r3, #196	; 0xc4
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	18fb      	adds	r3, r7, r3
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	23fa      	movs	r3, #250	; 0xfa
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	429a      	cmp	r2, r3
 8001170:	dbba      	blt.n	80010e8 <main+0x3a8>
			}

			capteurs.BORDURE_1 = FALSE;
 8001172:	4b03      	ldr	r3, [pc, #12]	; (8001180 <main+0x440>)
 8001174:	2200      	movs	r2, #0
 8001176:	71da      	strb	r2, [r3, #7]
		moteur1.alpha = 500;
 8001178:	e6ab      	b.n	8000ed2 <main+0x192>
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	fffffe70 	.word	0xfffffe70
 8001180:	2000002c 	.word	0x2000002c

08001184 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001184:	b590      	push	{r4, r7, lr}
 8001186:	b093      	sub	sp, #76	; 0x4c
 8001188:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118a:	2414      	movs	r4, #20
 800118c:	193b      	adds	r3, r7, r4
 800118e:	0018      	movs	r0, r3
 8001190:	2334      	movs	r3, #52	; 0x34
 8001192:	001a      	movs	r2, r3
 8001194:	2100      	movs	r1, #0
 8001196:	f005 fa2f 	bl	80065f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	0018      	movs	r0, r3
 800119e:	2310      	movs	r3, #16
 80011a0:	001a      	movs	r2, r3
 80011a2:	2100      	movs	r1, #0
 80011a4:	f005 fa28 	bl	80065f8 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	0018      	movs	r0, r3
 80011ae:	f002 fb2d 	bl	800380c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011b2:	193b      	adds	r3, r7, r4
 80011b4:	2202      	movs	r2, #2
 80011b6:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b8:	193b      	adds	r3, r7, r4
 80011ba:	2280      	movs	r2, #128	; 0x80
 80011bc:	0052      	lsls	r2, r2, #1
 80011be:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80011c0:	0021      	movs	r1, r4
 80011c2:	187b      	adds	r3, r7, r1
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c8:	187b      	adds	r3, r7, r1
 80011ca:	2240      	movs	r2, #64	; 0x40
 80011cc:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ce:	187b      	adds	r3, r7, r1
 80011d0:	2202      	movs	r2, #2
 80011d2:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011d4:	187b      	adds	r3, r7, r1
 80011d6:	2202      	movs	r2, #2
 80011d8:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80011da:	187b      	adds	r3, r7, r1
 80011dc:	2200      	movs	r2, #0
 80011de:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLN = 8;
 80011e0:	187b      	adds	r3, r7, r1
 80011e2:	2208      	movs	r2, #8
 80011e4:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011e6:	187b      	adds	r3, r7, r1
 80011e8:	2280      	movs	r2, #128	; 0x80
 80011ea:	0292      	lsls	r2, r2, #10
 80011ec:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011ee:	187b      	adds	r3, r7, r1
 80011f0:	2280      	movs	r2, #128	; 0x80
 80011f2:	0592      	lsls	r2, r2, #22
 80011f4:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f6:	187b      	adds	r3, r7, r1
 80011f8:	0018      	movs	r0, r3
 80011fa:	f002 fb53 	bl	80038a4 <HAL_RCC_OscConfig>
 80011fe:	1e03      	subs	r3, r0, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0x82>
	{
		Error_Handler();
 8001202:	f000 f82b 	bl	800125c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	2207      	movs	r2, #7
 800120a:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	2202      	movs	r2, #2
 8001210:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	2102      	movs	r1, #2
 8001222:	0018      	movs	r0, r3
 8001224:	f002 fe4e 	bl	8003ec4 <HAL_RCC_ClockConfig>
 8001228:	1e03      	subs	r3, r0, #0
 800122a:	d001      	beq.n	8001230 <SystemClock_Config+0xac>
	{
		Error_Handler();
 800122c:	f000 f816 	bl	800125c <Error_Handler>
	}
}
 8001230:	46c0      	nop			; (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	b013      	add	sp, #76	; 0x4c
 8001236:	bd90      	pop	{r4, r7, pc}

08001238 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM7) {
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a04      	ldr	r2, [pc, #16]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d101      	bne.n	800124e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800124a:	f001 f829 	bl	80022a0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	46bd      	mov	sp, r7
 8001252:	b002      	add	sp, #8
 8001254:	bd80      	pop	{r7, pc}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	40001400 	.word	0x40001400

0800125c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001260:	b672      	cpsid	i
}
 8001262:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <Error_Handler+0x48>)
 8001266:	2101      	movs	r1, #1
 8001268:	0018      	movs	r0, r3
 800126a:	f002 fa80 	bl	800376e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_WHITE_GPIO_Port, LED_WHITE_Pin);
 800126e:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <Error_Handler+0x48>)
 8001270:	2104      	movs	r1, #4
 8001272:	0018      	movs	r0, r3
 8001274:	f002 fa7b 	bl	800376e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <Error_Handler+0x48>)
 800127a:	2108      	movs	r1, #8
 800127c:	0018      	movs	r0, r3
 800127e:	f002 fa76 	bl	800376e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <Error_Handler+0x48>)
 8001284:	2102      	movs	r1, #2
 8001286:	0018      	movs	r0, r3
 8001288:	f002 fa71 	bl	800376e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <Error_Handler+0x48>)
 800128e:	2110      	movs	r1, #16
 8001290:	0018      	movs	r0, r3
 8001292:	f002 fa6c 	bl	800376e <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8001296:	23fa      	movs	r3, #250	; 0xfa
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	0018      	movs	r0, r3
 800129c:	f001 f81c 	bl	80022d8 <HAL_Delay>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80012a0:	e7e0      	b.n	8001264 <Error_Handler+0x8>
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	50000c00 	.word	0x50000c00

080012a8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80012ac:	4b1b      	ldr	r3, [pc, #108]	; (800131c <MX_SPI1_Init+0x74>)
 80012ae:	4a1c      	ldr	r2, [pc, #112]	; (8001320 <MX_SPI1_Init+0x78>)
 80012b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012b2:	4b1a      	ldr	r3, [pc, #104]	; (800131c <MX_SPI1_Init+0x74>)
 80012b4:	2282      	movs	r2, #130	; 0x82
 80012b6:	0052      	lsls	r2, r2, #1
 80012b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012ba:	4b18      	ldr	r3, [pc, #96]	; (800131c <MX_SPI1_Init+0x74>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80012c0:	4b16      	ldr	r3, [pc, #88]	; (800131c <MX_SPI1_Init+0x74>)
 80012c2:	22c0      	movs	r2, #192	; 0xc0
 80012c4:	0092      	lsls	r2, r2, #2
 80012c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <MX_SPI1_Init+0x74>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ce:	4b13      	ldr	r3, [pc, #76]	; (800131c <MX_SPI1_Init+0x74>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <MX_SPI1_Init+0x74>)
 80012d6:	2280      	movs	r2, #128	; 0x80
 80012d8:	0092      	lsls	r2, r2, #2
 80012da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <MX_SPI1_Init+0x74>)
 80012de:	2210      	movs	r2, #16
 80012e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <MX_SPI1_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <MX_SPI1_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <MX_SPI1_Init+0x74>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012f4:	4b09      	ldr	r3, [pc, #36]	; (800131c <MX_SPI1_Init+0x74>)
 80012f6:	2207      	movs	r2, #7
 80012f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <MX_SPI1_Init+0x74>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <MX_SPI1_Init+0x74>)
 8001302:	2208      	movs	r2, #8
 8001304:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001306:	4b05      	ldr	r3, [pc, #20]	; (800131c <MX_SPI1_Init+0x74>)
 8001308:	0018      	movs	r0, r3
 800130a:	f003 f8e1 	bl	80044d0 <HAL_SPI_Init>
 800130e:	1e03      	subs	r3, r0, #0
 8001310:	d001      	beq.n	8001316 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001312:	f7ff ffa3 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000104 	.word	0x20000104
 8001320:	40013000 	.word	0x40013000

08001324 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001324:	b590      	push	{r4, r7, lr}
 8001326:	b08b      	sub	sp, #44	; 0x2c
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	2414      	movs	r4, #20
 800132e:	193b      	adds	r3, r7, r4
 8001330:	0018      	movs	r0, r3
 8001332:	2314      	movs	r3, #20
 8001334:	001a      	movs	r2, r3
 8001336:	2100      	movs	r1, #0
 8001338:	f005 f95e 	bl	80065f8 <memset>
  if(spiHandle->Instance==SPI1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a1b      	ldr	r2, [pc, #108]	; (80013b0 <HAL_SPI_MspInit+0x8c>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d130      	bne.n	80013a8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001346:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <HAL_SPI_MspInit+0x90>)
 8001348:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800134a:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <HAL_SPI_MspInit+0x90>)
 800134c:	2180      	movs	r1, #128	; 0x80
 800134e:	0149      	lsls	r1, r1, #5
 8001350:	430a      	orrs	r2, r1
 8001352:	641a      	str	r2, [r3, #64]	; 0x40
 8001354:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <HAL_SPI_MspInit+0x90>)
 8001356:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	015b      	lsls	r3, r3, #5
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <HAL_SPI_MspInit+0x90>)
 8001364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <HAL_SPI_MspInit+0x90>)
 8001368:	2101      	movs	r1, #1
 800136a:	430a      	orrs	r2, r1
 800136c:	635a      	str	r2, [r3, #52]	; 0x34
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <HAL_SPI_MspInit+0x90>)
 8001370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001372:	2201      	movs	r2, #1
 8001374:	4013      	ands	r3, r2
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA2     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    PA11 [PA9]     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_11;
 800137a:	0021      	movs	r1, r4
 800137c:	187b      	adds	r3, r7, r1
 800137e:	4a0e      	ldr	r2, [pc, #56]	; (80013b8 <HAL_SPI_MspInit+0x94>)
 8001380:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	187b      	adds	r3, r7, r1
 8001384:	2202      	movs	r2, #2
 8001386:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	187b      	adds	r3, r7, r1
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	187b      	adds	r3, r7, r1
 8001390:	2200      	movs	r2, #0
 8001392:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001394:	187b      	adds	r3, r7, r1
 8001396:	2200      	movs	r2, #0
 8001398:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	187a      	adds	r2, r7, r1
 800139c:	23a0      	movs	r3, #160	; 0xa0
 800139e:	05db      	lsls	r3, r3, #23
 80013a0:	0011      	movs	r1, r2
 80013a2:	0018      	movs	r0, r3
 80013a4:	f002 f862 	bl	800346c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80013a8:	46c0      	nop			; (mov r8, r8)
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b00b      	add	sp, #44	; 0x2c
 80013ae:	bd90      	pop	{r4, r7, pc}
 80013b0:	40013000 	.word	0x40013000
 80013b4:	40021000 	.word	0x40021000
 80013b8:	00000824 	.word	0x00000824

080013bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c2:	4b11      	ldr	r3, [pc, #68]	; (8001408 <HAL_MspInit+0x4c>)
 80013c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <HAL_MspInit+0x4c>)
 80013c8:	2101      	movs	r1, #1
 80013ca:	430a      	orrs	r2, r1
 80013cc:	641a      	str	r2, [r3, #64]	; 0x40
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <HAL_MspInit+0x4c>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	2201      	movs	r2, #1
 80013d4:	4013      	ands	r3, r2
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <HAL_MspInit+0x4c>)
 80013dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <HAL_MspInit+0x4c>)
 80013e0:	2180      	movs	r1, #128	; 0x80
 80013e2:	0549      	lsls	r1, r1, #21
 80013e4:	430a      	orrs	r2, r1
 80013e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80013e8:	4b07      	ldr	r3, [pc, #28]	; (8001408 <HAL_MspInit+0x4c>)
 80013ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	055b      	lsls	r3, r3, #21
 80013f0:	4013      	ands	r3, r2
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80013f6:	23c0      	movs	r3, #192	; 0xc0
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	0018      	movs	r0, r3
 80013fc:	f000 ff90 	bl	8002320 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001400:	46c0      	nop			; (mov r8, r8)
 8001402:	46bd      	mov	sp, r7
 8001404:	b002      	add	sp, #8
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40021000 	.word	0x40021000

0800140c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800140c:	b5b0      	push	{r4, r5, r7, lr}
 800140e:	b08c      	sub	sp, #48	; 0x30
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001414:	232b      	movs	r3, #43	; 0x2b
 8001416:	18fb      	adds	r3, r7, r3
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800141c:	4b37      	ldr	r3, [pc, #220]	; (80014fc <HAL_InitTick+0xf0>)
 800141e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001420:	4b36      	ldr	r3, [pc, #216]	; (80014fc <HAL_InitTick+0xf0>)
 8001422:	2120      	movs	r1, #32
 8001424:	430a      	orrs	r2, r1
 8001426:	63da      	str	r2, [r3, #60]	; 0x3c
 8001428:	4b34      	ldr	r3, [pc, #208]	; (80014fc <HAL_InitTick+0xf0>)
 800142a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800142c:	2220      	movs	r2, #32
 800142e:	4013      	ands	r3, r2
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001434:	230c      	movs	r3, #12
 8001436:	18fa      	adds	r2, r7, r3
 8001438:	2410      	movs	r4, #16
 800143a:	193b      	adds	r3, r7, r4
 800143c:	0011      	movs	r1, r2
 800143e:	0018      	movs	r0, r3
 8001440:	f002 fee8 	bl	8004214 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001444:	193b      	adds	r3, r7, r4
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	2b00      	cmp	r3, #0
 800144e:	d104      	bne.n	800145a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001450:	f002 feca 	bl	80041e8 <HAL_RCC_GetPCLK1Freq>
 8001454:	0003      	movs	r3, r0
 8001456:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001458:	e004      	b.n	8001464 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800145a:	f002 fec5 	bl	80041e8 <HAL_RCC_GetPCLK1Freq>
 800145e:	0003      	movs	r3, r0
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001466:	4926      	ldr	r1, [pc, #152]	; (8001500 <HAL_InitTick+0xf4>)
 8001468:	0018      	movs	r0, r3
 800146a:	f7fe fe49 	bl	8000100 <__udivsi3>
 800146e:	0003      	movs	r3, r0
 8001470:	3b01      	subs	r3, #1
 8001472:	623b      	str	r3, [r7, #32]

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001474:	4b23      	ldr	r3, [pc, #140]	; (8001504 <HAL_InitTick+0xf8>)
 8001476:	4a24      	ldr	r2, [pc, #144]	; (8001508 <HAL_InitTick+0xfc>)
 8001478:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800147a:	4b22      	ldr	r3, [pc, #136]	; (8001504 <HAL_InitTick+0xf8>)
 800147c:	4a23      	ldr	r2, [pc, #140]	; (800150c <HAL_InitTick+0x100>)
 800147e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001480:	4b20      	ldr	r3, [pc, #128]	; (8001504 <HAL_InitTick+0xf8>)
 8001482:	6a3a      	ldr	r2, [r7, #32]
 8001484:	605a      	str	r2, [r3, #4]
  htim7.Init.ClockDivision = 0;
 8001486:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <HAL_InitTick+0xf8>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148c:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <HAL_InitTick+0xf8>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001492:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <HAL_InitTick+0xf8>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001498:	252b      	movs	r5, #43	; 0x2b
 800149a:	197c      	adds	r4, r7, r5
 800149c:	4b19      	ldr	r3, [pc, #100]	; (8001504 <HAL_InitTick+0xf8>)
 800149e:	0018      	movs	r0, r3
 80014a0:	f003 f8ce 	bl	8004640 <HAL_TIM_Base_Init>
 80014a4:	0003      	movs	r3, r0
 80014a6:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80014a8:	197b      	adds	r3, r7, r5
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d11e      	bne.n	80014ee <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80014b0:	197c      	adds	r4, r7, r5
 80014b2:	4b14      	ldr	r3, [pc, #80]	; (8001504 <HAL_InitTick+0xf8>)
 80014b4:	0018      	movs	r0, r3
 80014b6:	f003 f969 	bl	800478c <HAL_TIM_Base_Start_IT>
 80014ba:	0003      	movs	r3, r0
 80014bc:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80014be:	197b      	adds	r3, r7, r5
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d113      	bne.n	80014ee <HAL_InitTick+0xe2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80014c6:	2012      	movs	r0, #18
 80014c8:	f001 fe33 	bl	8003132 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	d809      	bhi.n	80014e6 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	0019      	movs	r1, r3
 80014d8:	2012      	movs	r0, #18
 80014da:	f001 fe15 	bl	8003108 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <HAL_InitTick+0x104>)
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	e003      	b.n	80014ee <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 80014e6:	232b      	movs	r3, #43	; 0x2b
 80014e8:	18fb      	adds	r3, r7, r3
 80014ea:	2201      	movs	r2, #1
 80014ec:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80014ee:	232b      	movs	r3, #43	; 0x2b
 80014f0:	18fb      	adds	r3, r7, r3
 80014f2:	781b      	ldrb	r3, [r3, #0]
}
 80014f4:	0018      	movs	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	b00c      	add	sp, #48	; 0x30
 80014fa:	bdb0      	pop	{r4, r5, r7, pc}
 80014fc:	40021000 	.word	0x40021000
 8001500:	000f4240 	.word	0x000f4240
 8001504:	20000168 	.word	0x20000168
 8001508:	40001400 	.word	0x40001400
 800150c:	000003e7 	.word	0x000003e7
 8001510:	20000008 	.word	0x20000008

08001514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <NMI_Handler+0x4>

0800151a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800151e:	e7fe      	b.n	800151e <HardFault_Handler+0x4>

08001520 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001524:	46c0      	nop			; (mov r8, r8)
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001538:	46c0      	nop			; (mov r8, r8)
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Bouton1_Pin);
 8001542:	2001      	movs	r0, #1
 8001544:	f002 f92e 	bl	80037a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001548:	46c0      	nop			; (mov r8, r8)
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Bouton2_Pin);
 8001552:	2008      	movs	r0, #8
 8001554:	f002 f926 	bl	80037a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001558:	46c0      	nop			; (mov r8, r8)
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Bouton3_Pin);
 8001562:	2010      	movs	r0, #16
 8001564:	f002 f91e 	bl	80037a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Contact4_Pin);
 8001568:	2020      	movs	r0, #32
 800156a:	f002 f91b 	bl	80037a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Bordure1_Pin);
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	0018      	movs	r0, r3
 8001574:	f002 f916 	bl	80037a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Bordure2_Pin);
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	0018      	movs	r0, r3
 800157e:	f002 f911 	bl	80037a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Contact1_Pin);
 8001582:	2380      	movs	r3, #128	; 0x80
 8001584:	019b      	lsls	r3, r3, #6
 8001586:	0018      	movs	r0, r3
 8001588:	f002 f90c 	bl	80037a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Contact2_Pin);
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	01db      	lsls	r3, r3, #7
 8001590:	0018      	movs	r0, r3
 8001592:	f002 f907 	bl	80037a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Contact3_Pin);
 8001596:	2380      	movs	r3, #128	; 0x80
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	0018      	movs	r0, r3
 800159c:	f002 f902 	bl	80037a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80015a0:	46c0      	nop			; (mov r8, r8)
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015ac:	4b03      	ldr	r3, [pc, #12]	; (80015bc <DMA1_Channel1_IRQHandler+0x14>)
 80015ae:	0018      	movs	r0, r3
 80015b0:	f001 fe5a 	bl	8003268 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015b4:	46c0      	nop			; (mov r8, r8)
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	200000a8 	.word	0x200000a8

080015c0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <TIM1_CC_IRQHandler+0x14>)
 80015c6:	0018      	movs	r0, r3
 80015c8:	f003 fc6a 	bl	8004ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80015cc:	46c0      	nop			; (mov r8, r8)
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	200001b4 	.word	0x200001b4

080015d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015dc:	4b03      	ldr	r3, [pc, #12]	; (80015ec <TIM3_IRQHandler+0x14>)
 80015de:	0018      	movs	r0, r3
 80015e0:	f003 fc5e 	bl	8004ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015e4:	46c0      	nop			; (mov r8, r8)
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	46c0      	nop			; (mov r8, r8)
 80015ec:	20000200 	.word	0x20000200

080015f0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80015f4:	4b03      	ldr	r3, [pc, #12]	; (8001604 <TIM7_IRQHandler+0x14>)
 80015f6:	0018      	movs	r0, r3
 80015f8:	f003 fc52 	bl	8004ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80015fc:	46c0      	nop			; (mov r8, r8)
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	20000168 	.word	0x20000168

08001608 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800160c:	46c0      	nop			; (mov r8, r8)
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b08d      	sub	sp, #52	; 0x34
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800161a:	240c      	movs	r4, #12
 800161c:	193b      	adds	r3, r7, r4
 800161e:	0018      	movs	r0, r3
 8001620:	2324      	movs	r3, #36	; 0x24
 8001622:	001a      	movs	r2, r3
 8001624:	2100      	movs	r1, #0
 8001626:	f004 ffe7 	bl	80065f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800162a:	003b      	movs	r3, r7
 800162c:	0018      	movs	r0, r3
 800162e:	230c      	movs	r3, #12
 8001630:	001a      	movs	r2, r3
 8001632:	2100      	movs	r1, #0
 8001634:	f004 ffe0 	bl	80065f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001638:	4b28      	ldr	r3, [pc, #160]	; (80016dc <MX_TIM1_Init+0xc8>)
 800163a:	4a29      	ldr	r2, [pc, #164]	; (80016e0 <MX_TIM1_Init+0xcc>)
 800163c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800163e:	4b27      	ldr	r3, [pc, #156]	; (80016dc <MX_TIM1_Init+0xc8>)
 8001640:	2200      	movs	r2, #0
 8001642:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001644:	4b25      	ldr	r3, [pc, #148]	; (80016dc <MX_TIM1_Init+0xc8>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800164a:	4b24      	ldr	r3, [pc, #144]	; (80016dc <MX_TIM1_Init+0xc8>)
 800164c:	4a25      	ldr	r2, [pc, #148]	; (80016e4 <MX_TIM1_Init+0xd0>)
 800164e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001650:	4b22      	ldr	r3, [pc, #136]	; (80016dc <MX_TIM1_Init+0xc8>)
 8001652:	2200      	movs	r2, #0
 8001654:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001656:	4b21      	ldr	r3, [pc, #132]	; (80016dc <MX_TIM1_Init+0xc8>)
 8001658:	2200      	movs	r2, #0
 800165a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800165c:	4b1f      	ldr	r3, [pc, #124]	; (80016dc <MX_TIM1_Init+0xc8>)
 800165e:	2200      	movs	r2, #0
 8001660:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001662:	0021      	movs	r1, r4
 8001664:	187b      	adds	r3, r7, r1
 8001666:	2203      	movs	r2, #3
 8001668:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800166a:	187b      	adds	r3, r7, r1
 800166c:	2202      	movs	r2, #2
 800166e:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001670:	187b      	adds	r3, r7, r1
 8001672:	2201      	movs	r2, #1
 8001674:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001676:	187b      	adds	r3, r7, r1
 8001678:	2200      	movs	r2, #0
 800167a:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 800167c:	187b      	adds	r3, r7, r1
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001682:	187b      	adds	r3, r7, r1
 8001684:	2202      	movs	r2, #2
 8001686:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001688:	187b      	adds	r3, r7, r1
 800168a:	2201      	movs	r2, #1
 800168c:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800168e:	187b      	adds	r3, r7, r1
 8001690:	2200      	movs	r2, #0
 8001692:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8001694:	187b      	adds	r3, r7, r1
 8001696:	2200      	movs	r2, #0
 8001698:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800169a:	187a      	adds	r2, r7, r1
 800169c:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <MX_TIM1_Init+0xc8>)
 800169e:	0011      	movs	r1, r2
 80016a0:	0018      	movs	r0, r3
 80016a2:	f003 fa91 	bl	8004bc8 <HAL_TIM_Encoder_Init>
 80016a6:	1e03      	subs	r3, r0, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80016aa:	f7ff fdd7 	bl	800125c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ae:	003b      	movs	r3, r7
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016b4:	003b      	movs	r3, r7
 80016b6:	2200      	movs	r2, #0
 80016b8:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ba:	003b      	movs	r3, r7
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016c0:	003a      	movs	r2, r7
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <MX_TIM1_Init+0xc8>)
 80016c4:	0011      	movs	r1, r2
 80016c6:	0018      	movs	r0, r3
 80016c8:	f004 f992 	bl	80059f0 <HAL_TIMEx_MasterConfigSynchronization>
 80016cc:	1e03      	subs	r3, r0, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80016d0:	f7ff fdc4 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016d4:	46c0      	nop			; (mov r8, r8)
 80016d6:	46bd      	mov	sp, r7
 80016d8:	b00d      	add	sp, #52	; 0x34
 80016da:	bd90      	pop	{r4, r7, pc}
 80016dc:	200001b4 	.word	0x200001b4
 80016e0:	40012c00 	.word	0x40012c00
 80016e4:	0000ffff 	.word	0x0000ffff

080016e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b08d      	sub	sp, #52	; 0x34
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016ee:	240c      	movs	r4, #12
 80016f0:	193b      	adds	r3, r7, r4
 80016f2:	0018      	movs	r0, r3
 80016f4:	2324      	movs	r3, #36	; 0x24
 80016f6:	001a      	movs	r2, r3
 80016f8:	2100      	movs	r1, #0
 80016fa:	f004 ff7d 	bl	80065f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016fe:	003b      	movs	r3, r7
 8001700:	0018      	movs	r0, r3
 8001702:	230c      	movs	r3, #12
 8001704:	001a      	movs	r2, r3
 8001706:	2100      	movs	r1, #0
 8001708:	f004 ff76 	bl	80065f8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800170c:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <MX_TIM3_Init+0xbc>)
 800170e:	4a26      	ldr	r2, [pc, #152]	; (80017a8 <MX_TIM3_Init+0xc0>)
 8001710:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001712:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <MX_TIM3_Init+0xbc>)
 8001714:	2200      	movs	r2, #0
 8001716:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001718:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <MX_TIM3_Init+0xbc>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800171e:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <MX_TIM3_Init+0xbc>)
 8001720:	4a22      	ldr	r2, [pc, #136]	; (80017ac <MX_TIM3_Init+0xc4>)
 8001722:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001724:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <MX_TIM3_Init+0xbc>)
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172a:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <MX_TIM3_Init+0xbc>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001730:	0021      	movs	r1, r4
 8001732:	187b      	adds	r3, r7, r1
 8001734:	2203      	movs	r2, #3
 8001736:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001738:	187b      	adds	r3, r7, r1
 800173a:	2202      	movs	r2, #2
 800173c:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800173e:	187b      	adds	r3, r7, r1
 8001740:	2201      	movs	r2, #1
 8001742:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001744:	187b      	adds	r3, r7, r1
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 800174a:	187b      	adds	r3, r7, r1
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001750:	187b      	adds	r3, r7, r1
 8001752:	2202      	movs	r2, #2
 8001754:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001756:	187b      	adds	r3, r7, r1
 8001758:	2201      	movs	r2, #1
 800175a:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800175c:	187b      	adds	r3, r7, r1
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8001762:	187b      	adds	r3, r7, r1
 8001764:	2200      	movs	r2, #0
 8001766:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001768:	187a      	adds	r2, r7, r1
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <MX_TIM3_Init+0xbc>)
 800176c:	0011      	movs	r1, r2
 800176e:	0018      	movs	r0, r3
 8001770:	f003 fa2a 	bl	8004bc8 <HAL_TIM_Encoder_Init>
 8001774:	1e03      	subs	r3, r0, #0
 8001776:	d001      	beq.n	800177c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001778:	f7ff fd70 	bl	800125c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800177c:	003b      	movs	r3, r7
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001782:	003b      	movs	r3, r7
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001788:	003a      	movs	r2, r7
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <MX_TIM3_Init+0xbc>)
 800178c:	0011      	movs	r1, r2
 800178e:	0018      	movs	r0, r3
 8001790:	f004 f92e 	bl	80059f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001794:	1e03      	subs	r3, r0, #0
 8001796:	d001      	beq.n	800179c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001798:	f7ff fd60 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800179c:	46c0      	nop			; (mov r8, r8)
 800179e:	46bd      	mov	sp, r7
 80017a0:	b00d      	add	sp, #52	; 0x34
 80017a2:	bd90      	pop	{r4, r7, pc}
 80017a4:	20000200 	.word	0x20000200
 80017a8:	40000400 	.word	0x40000400
 80017ac:	0000ffff 	.word	0x0000ffff

080017b0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	0018      	movs	r0, r3
 80017ba:	230c      	movs	r3, #12
 80017bc:	001a      	movs	r2, r3
 80017be:	2100      	movs	r1, #0
 80017c0:	f004 ff1a 	bl	80065f8 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017c4:	4b15      	ldr	r3, [pc, #84]	; (800181c <MX_TIM6_Init+0x6c>)
 80017c6:	4a16      	ldr	r2, [pc, #88]	; (8001820 <MX_TIM6_Init+0x70>)
 80017c8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 63999;
 80017ca:	4b14      	ldr	r3, [pc, #80]	; (800181c <MX_TIM6_Init+0x6c>)
 80017cc:	4a15      	ldr	r2, [pc, #84]	; (8001824 <MX_TIM6_Init+0x74>)
 80017ce:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <MX_TIM6_Init+0x6c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <MX_TIM6_Init+0x6c>)
 80017d8:	2263      	movs	r2, #99	; 0x63
 80017da:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <MX_TIM6_Init+0x6c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <MX_TIM6_Init+0x6c>)
 80017e4:	0018      	movs	r0, r3
 80017e6:	f002 ff2b 	bl	8004640 <HAL_TIM_Base_Init>
 80017ea:	1e03      	subs	r3, r0, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80017ee:	f7ff fd35 	bl	800125c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	2220      	movs	r2, #32
 80017f6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80017fe:	1d3a      	adds	r2, r7, #4
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <MX_TIM6_Init+0x6c>)
 8001802:	0011      	movs	r1, r2
 8001804:	0018      	movs	r0, r3
 8001806:	f004 f8f3 	bl	80059f0 <HAL_TIMEx_MasterConfigSynchronization>
 800180a:	1e03      	subs	r3, r0, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800180e:	f7ff fd25 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	46bd      	mov	sp, r7
 8001816:	b004      	add	sp, #16
 8001818:	bd80      	pop	{r7, pc}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	2000024c 	.word	0x2000024c
 8001820:	40001000 	.word	0x40001000
 8001824:	0000f9ff 	.word	0x0000f9ff

08001828 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	0018      	movs	r0, r3
 8001832:	231c      	movs	r3, #28
 8001834:	001a      	movs	r2, r3
 8001836:	2100      	movs	r1, #0
 8001838:	f004 fede 	bl	80065f8 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800183c:	4b1f      	ldr	r3, [pc, #124]	; (80018bc <MX_TIM14_Init+0x94>)
 800183e:	4a20      	ldr	r2, [pc, #128]	; (80018c0 <MX_TIM14_Init+0x98>)
 8001840:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001842:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <MX_TIM14_Init+0x94>)
 8001844:	2200      	movs	r2, #0
 8001846:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001848:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <MX_TIM14_Init+0x94>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800184e:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <MX_TIM14_Init+0x94>)
 8001850:	4a1c      	ldr	r2, [pc, #112]	; (80018c4 <MX_TIM14_Init+0x9c>)
 8001852:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <MX_TIM14_Init+0x94>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800185a:	4b18      	ldr	r3, [pc, #96]	; (80018bc <MX_TIM14_Init+0x94>)
 800185c:	2200      	movs	r2, #0
 800185e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001860:	4b16      	ldr	r3, [pc, #88]	; (80018bc <MX_TIM14_Init+0x94>)
 8001862:	0018      	movs	r0, r3
 8001864:	f002 feec 	bl	8004640 <HAL_TIM_Base_Init>
 8001868:	1e03      	subs	r3, r0, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 800186c:	f7ff fcf6 	bl	800125c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <MX_TIM14_Init+0x94>)
 8001872:	0018      	movs	r0, r3
 8001874:	f002 ffe0 	bl	8004838 <HAL_TIM_PWM_Init>
 8001878:	1e03      	subs	r3, r0, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 800187c:	f7ff fcee 	bl	800125c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	2260      	movs	r2, #96	; 0x60
 8001884:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	2200      	movs	r2, #0
 800188a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001898:	1d39      	adds	r1, r7, #4
 800189a:	4b08      	ldr	r3, [pc, #32]	; (80018bc <MX_TIM14_Init+0x94>)
 800189c:	2200      	movs	r2, #0
 800189e:	0018      	movs	r0, r3
 80018a0:	f003 fc30 	bl	8005104 <HAL_TIM_PWM_ConfigChannel>
 80018a4:	1e03      	subs	r3, r0, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80018a8:	f7ff fcd8 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80018ac:	4b03      	ldr	r3, [pc, #12]	; (80018bc <MX_TIM14_Init+0x94>)
 80018ae:	0018      	movs	r0, r3
 80018b0:	f000 fad2 	bl	8001e58 <HAL_TIM_MspPostInit>

}
 80018b4:	46c0      	nop			; (mov r8, r8)
 80018b6:	46bd      	mov	sp, r7
 80018b8:	b008      	add	sp, #32
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000298 	.word	0x20000298
 80018c0:	40002000 	.word	0x40002000
 80018c4:	0000ffff 	.word	0x0000ffff

080018c8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b098      	sub	sp, #96	; 0x60
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ce:	2354      	movs	r3, #84	; 0x54
 80018d0:	18fb      	adds	r3, r7, r3
 80018d2:	0018      	movs	r0, r3
 80018d4:	230c      	movs	r3, #12
 80018d6:	001a      	movs	r2, r3
 80018d8:	2100      	movs	r1, #0
 80018da:	f004 fe8d 	bl	80065f8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018de:	2338      	movs	r3, #56	; 0x38
 80018e0:	18fb      	adds	r3, r7, r3
 80018e2:	0018      	movs	r0, r3
 80018e4:	231c      	movs	r3, #28
 80018e6:	001a      	movs	r2, r3
 80018e8:	2100      	movs	r1, #0
 80018ea:	f004 fe85 	bl	80065f8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	0018      	movs	r0, r3
 80018f2:	2334      	movs	r3, #52	; 0x34
 80018f4:	001a      	movs	r2, r3
 80018f6:	2100      	movs	r1, #0
 80018f8:	f004 fe7e 	bl	80065f8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80018fc:	4b41      	ldr	r3, [pc, #260]	; (8001a04 <MX_TIM15_Init+0x13c>)
 80018fe:	4a42      	ldr	r2, [pc, #264]	; (8001a08 <MX_TIM15_Init+0x140>)
 8001900:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 19;
 8001902:	4b40      	ldr	r3, [pc, #256]	; (8001a04 <MX_TIM15_Init+0x13c>)
 8001904:	2213      	movs	r2, #19
 8001906:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001908:	4b3e      	ldr	r3, [pc, #248]	; (8001a04 <MX_TIM15_Init+0x13c>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 800190e:	4b3d      	ldr	r3, [pc, #244]	; (8001a04 <MX_TIM15_Init+0x13c>)
 8001910:	4a3e      	ldr	r2, [pc, #248]	; (8001a0c <MX_TIM15_Init+0x144>)
 8001912:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001914:	4b3b      	ldr	r3, [pc, #236]	; (8001a04 <MX_TIM15_Init+0x13c>)
 8001916:	2200      	movs	r2, #0
 8001918:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800191a:	4b3a      	ldr	r3, [pc, #232]	; (8001a04 <MX_TIM15_Init+0x13c>)
 800191c:	2200      	movs	r2, #0
 800191e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001920:	4b38      	ldr	r3, [pc, #224]	; (8001a04 <MX_TIM15_Init+0x13c>)
 8001922:	2200      	movs	r2, #0
 8001924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001926:	4b37      	ldr	r3, [pc, #220]	; (8001a04 <MX_TIM15_Init+0x13c>)
 8001928:	0018      	movs	r0, r3
 800192a:	f002 ff85 	bl	8004838 <HAL_TIM_PWM_Init>
 800192e:	1e03      	subs	r3, r0, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001932:	f7ff fc93 	bl	800125c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001936:	2154      	movs	r1, #84	; 0x54
 8001938:	187b      	adds	r3, r7, r1
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193e:	187b      	adds	r3, r7, r1
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001944:	187a      	adds	r2, r7, r1
 8001946:	4b2f      	ldr	r3, [pc, #188]	; (8001a04 <MX_TIM15_Init+0x13c>)
 8001948:	0011      	movs	r1, r2
 800194a:	0018      	movs	r0, r3
 800194c:	f004 f850 	bl	80059f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001950:	1e03      	subs	r3, r0, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8001954:	f7ff fc82 	bl	800125c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001958:	2138      	movs	r1, #56	; 0x38
 800195a:	187b      	adds	r3, r7, r1
 800195c:	2260      	movs	r2, #96	; 0x60
 800195e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001960:	187b      	adds	r3, r7, r1
 8001962:	2200      	movs	r2, #0
 8001964:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001966:	187b      	adds	r3, r7, r1
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800196c:	187b      	adds	r3, r7, r1
 800196e:	2200      	movs	r2, #0
 8001970:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001972:	187b      	adds	r3, r7, r1
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001978:	187b      	adds	r3, r7, r1
 800197a:	2200      	movs	r2, #0
 800197c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800197e:	187b      	adds	r3, r7, r1
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001984:	1879      	adds	r1, r7, r1
 8001986:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <MX_TIM15_Init+0x13c>)
 8001988:	2200      	movs	r2, #0
 800198a:	0018      	movs	r0, r3
 800198c:	f003 fbba 	bl	8005104 <HAL_TIM_PWM_ConfigChannel>
 8001990:	1e03      	subs	r3, r0, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8001994:	f7ff fc62 	bl	800125c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001998:	2338      	movs	r3, #56	; 0x38
 800199a:	18f9      	adds	r1, r7, r3
 800199c:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <MX_TIM15_Init+0x13c>)
 800199e:	2204      	movs	r2, #4
 80019a0:	0018      	movs	r0, r3
 80019a2:	f003 fbaf 	bl	8005104 <HAL_TIM_PWM_ConfigChannel>
 80019a6:	1e03      	subs	r3, r0, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM15_Init+0xe6>
  {
    Error_Handler();
 80019aa:	f7ff fc57 	bl	800125c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	2200      	movs	r2, #0
 80019b8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019ba:	1d3b      	adds	r3, r7, #4
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	2200      	movs	r2, #0
 80019c4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	2200      	movs	r2, #0
 80019ca:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	2280      	movs	r2, #128	; 0x80
 80019d0:	0192      	lsls	r2, r2, #6
 80019d2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	2200      	movs	r2, #0
 80019d8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	2200      	movs	r2, #0
 80019de:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80019e0:	1d3a      	adds	r2, r7, #4
 80019e2:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <MX_TIM15_Init+0x13c>)
 80019e4:	0011      	movs	r1, r2
 80019e6:	0018      	movs	r0, r3
 80019e8:	f004 f86a 	bl	8005ac0 <HAL_TIMEx_ConfigBreakDeadTime>
 80019ec:	1e03      	subs	r3, r0, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 80019f0:	f7ff fc34 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80019f4:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <MX_TIM15_Init+0x13c>)
 80019f6:	0018      	movs	r0, r3
 80019f8:	f000 fa2e 	bl	8001e58 <HAL_TIM_MspPostInit>

}
 80019fc:	46c0      	nop			; (mov r8, r8)
 80019fe:	46bd      	mov	sp, r7
 8001a00:	b018      	add	sp, #96	; 0x60
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	200002e4 	.word	0x200002e4
 8001a08:	40014000 	.word	0x40014000
 8001a0c:	000003e7 	.word	0x000003e7

08001a10 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b094      	sub	sp, #80	; 0x50
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a16:	2334      	movs	r3, #52	; 0x34
 8001a18:	18fb      	adds	r3, r7, r3
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	231c      	movs	r3, #28
 8001a1e:	001a      	movs	r2, r3
 8001a20:	2100      	movs	r1, #0
 8001a22:	f004 fde9 	bl	80065f8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a26:	003b      	movs	r3, r7
 8001a28:	0018      	movs	r0, r3
 8001a2a:	2334      	movs	r3, #52	; 0x34
 8001a2c:	001a      	movs	r2, r3
 8001a2e:	2100      	movs	r1, #0
 8001a30:	f004 fde2 	bl	80065f8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001a34:	4b37      	ldr	r3, [pc, #220]	; (8001b14 <MX_TIM16_Init+0x104>)
 8001a36:	4a38      	ldr	r2, [pc, #224]	; (8001b18 <MX_TIM16_Init+0x108>)
 8001a38:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 19;
 8001a3a:	4b36      	ldr	r3, [pc, #216]	; (8001b14 <MX_TIM16_Init+0x104>)
 8001a3c:	2213      	movs	r2, #19
 8001a3e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a40:	4b34      	ldr	r3, [pc, #208]	; (8001b14 <MX_TIM16_Init+0x104>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 8001a46:	4b33      	ldr	r3, [pc, #204]	; (8001b14 <MX_TIM16_Init+0x104>)
 8001a48:	4a34      	ldr	r2, [pc, #208]	; (8001b1c <MX_TIM16_Init+0x10c>)
 8001a4a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a4c:	4b31      	ldr	r3, [pc, #196]	; (8001b14 <MX_TIM16_Init+0x104>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001a52:	4b30      	ldr	r3, [pc, #192]	; (8001b14 <MX_TIM16_Init+0x104>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a58:	4b2e      	ldr	r3, [pc, #184]	; (8001b14 <MX_TIM16_Init+0x104>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001a5e:	4b2d      	ldr	r3, [pc, #180]	; (8001b14 <MX_TIM16_Init+0x104>)
 8001a60:	0018      	movs	r0, r3
 8001a62:	f002 fded 	bl	8004640 <HAL_TIM_Base_Init>
 8001a66:	1e03      	subs	r3, r0, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8001a6a:	f7ff fbf7 	bl	800125c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001a6e:	4b29      	ldr	r3, [pc, #164]	; (8001b14 <MX_TIM16_Init+0x104>)
 8001a70:	0018      	movs	r0, r3
 8001a72:	f002 fee1 	bl	8004838 <HAL_TIM_PWM_Init>
 8001a76:	1e03      	subs	r3, r0, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8001a7a:	f7ff fbef 	bl	800125c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a7e:	2134      	movs	r1, #52	; 0x34
 8001a80:	187b      	adds	r3, r7, r1
 8001a82:	2260      	movs	r2, #96	; 0x60
 8001a84:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001a86:	187b      	adds	r3, r7, r1
 8001a88:	2200      	movs	r2, #0
 8001a8a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a8c:	187b      	adds	r3, r7, r1
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a92:	187b      	adds	r3, r7, r1
 8001a94:	2200      	movs	r2, #0
 8001a96:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a98:	187b      	adds	r3, r7, r1
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a9e:	187b      	adds	r3, r7, r1
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001aa4:	187b      	adds	r3, r7, r1
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aaa:	1879      	adds	r1, r7, r1
 8001aac:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <MX_TIM16_Init+0x104>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f003 fb27 	bl	8005104 <HAL_TIM_PWM_ConfigChannel>
 8001ab6:	1e03      	subs	r3, r0, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8001aba:	f7ff fbcf 	bl	800125c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001abe:	003b      	movs	r3, r7
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ac4:	003b      	movs	r3, r7
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001aca:	003b      	movs	r3, r7
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ad0:	003b      	movs	r3, r7
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ad6:	003b      	movs	r3, r7
 8001ad8:	2200      	movs	r2, #0
 8001ada:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001adc:	003b      	movs	r3, r7
 8001ade:	2280      	movs	r2, #128	; 0x80
 8001ae0:	0192      	lsls	r2, r2, #6
 8001ae2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ae4:	003b      	movs	r3, r7
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001aea:	003b      	movs	r3, r7
 8001aec:	2200      	movs	r2, #0
 8001aee:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001af0:	003a      	movs	r2, r7
 8001af2:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <MX_TIM16_Init+0x104>)
 8001af4:	0011      	movs	r1, r2
 8001af6:	0018      	movs	r0, r3
 8001af8:	f003 ffe2 	bl	8005ac0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001afc:	1e03      	subs	r3, r0, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8001b00:	f7ff fbac 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001b04:	4b03      	ldr	r3, [pc, #12]	; (8001b14 <MX_TIM16_Init+0x104>)
 8001b06:	0018      	movs	r0, r3
 8001b08:	f000 f9a6 	bl	8001e58 <HAL_TIM_MspPostInit>

}
 8001b0c:	46c0      	nop			; (mov r8, r8)
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b014      	add	sp, #80	; 0x50
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000330 	.word	0x20000330
 8001b18:	40014400 	.word	0x40014400
 8001b1c:	000003e7 	.word	0x000003e7

08001b20 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b094      	sub	sp, #80	; 0x50
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b26:	2334      	movs	r3, #52	; 0x34
 8001b28:	18fb      	adds	r3, r7, r3
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	231c      	movs	r3, #28
 8001b2e:	001a      	movs	r2, r3
 8001b30:	2100      	movs	r1, #0
 8001b32:	f004 fd61 	bl	80065f8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b36:	003b      	movs	r3, r7
 8001b38:	0018      	movs	r0, r3
 8001b3a:	2334      	movs	r3, #52	; 0x34
 8001b3c:	001a      	movs	r2, r3
 8001b3e:	2100      	movs	r1, #0
 8001b40:	f004 fd5a 	bl	80065f8 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001b44:	4b37      	ldr	r3, [pc, #220]	; (8001c24 <MX_TIM17_Init+0x104>)
 8001b46:	4a38      	ldr	r2, [pc, #224]	; (8001c28 <MX_TIM17_Init+0x108>)
 8001b48:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 19;
 8001b4a:	4b36      	ldr	r3, [pc, #216]	; (8001c24 <MX_TIM17_Init+0x104>)
 8001b4c:	2213      	movs	r2, #19
 8001b4e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b50:	4b34      	ldr	r3, [pc, #208]	; (8001c24 <MX_TIM17_Init+0x104>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 8001b56:	4b33      	ldr	r3, [pc, #204]	; (8001c24 <MX_TIM17_Init+0x104>)
 8001b58:	4a34      	ldr	r2, [pc, #208]	; (8001c2c <MX_TIM17_Init+0x10c>)
 8001b5a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5c:	4b31      	ldr	r3, [pc, #196]	; (8001c24 <MX_TIM17_Init+0x104>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001b62:	4b30      	ldr	r3, [pc, #192]	; (8001c24 <MX_TIM17_Init+0x104>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b68:	4b2e      	ldr	r3, [pc, #184]	; (8001c24 <MX_TIM17_Init+0x104>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001b6e:	4b2d      	ldr	r3, [pc, #180]	; (8001c24 <MX_TIM17_Init+0x104>)
 8001b70:	0018      	movs	r0, r3
 8001b72:	f002 fd65 	bl	8004640 <HAL_TIM_Base_Init>
 8001b76:	1e03      	subs	r3, r0, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8001b7a:	f7ff fb6f 	bl	800125c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001b7e:	4b29      	ldr	r3, [pc, #164]	; (8001c24 <MX_TIM17_Init+0x104>)
 8001b80:	0018      	movs	r0, r3
 8001b82:	f002 fe59 	bl	8004838 <HAL_TIM_PWM_Init>
 8001b86:	1e03      	subs	r3, r0, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8001b8a:	f7ff fb67 	bl	800125c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b8e:	2134      	movs	r1, #52	; 0x34
 8001b90:	187b      	adds	r3, r7, r1
 8001b92:	2260      	movs	r2, #96	; 0x60
 8001b94:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001b96:	187b      	adds	r3, r7, r1
 8001b98:	2200      	movs	r2, #0
 8001b9a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b9c:	187b      	adds	r3, r7, r1
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ba2:	187b      	adds	r3, r7, r1
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ba8:	187b      	adds	r3, r7, r1
 8001baa:	2200      	movs	r2, #0
 8001bac:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bae:	187b      	adds	r3, r7, r1
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bb4:	187b      	adds	r3, r7, r1
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bba:	1879      	adds	r1, r7, r1
 8001bbc:	4b19      	ldr	r3, [pc, #100]	; (8001c24 <MX_TIM17_Init+0x104>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f003 fa9f 	bl	8005104 <HAL_TIM_PWM_ConfigChannel>
 8001bc6:	1e03      	subs	r3, r0, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8001bca:	f7ff fb47 	bl	800125c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bce:	003b      	movs	r3, r7
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bd4:	003b      	movs	r3, r7
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bda:	003b      	movs	r3, r7
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001be0:	003b      	movs	r3, r7
 8001be2:	2200      	movs	r2, #0
 8001be4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001be6:	003b      	movs	r3, r7
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bec:	003b      	movs	r3, r7
 8001bee:	2280      	movs	r2, #128	; 0x80
 8001bf0:	0192      	lsls	r2, r2, #6
 8001bf2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001bf4:	003b      	movs	r3, r7
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bfa:	003b      	movs	r3, r7
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001c00:	003a      	movs	r2, r7
 8001c02:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <MX_TIM17_Init+0x104>)
 8001c04:	0011      	movs	r1, r2
 8001c06:	0018      	movs	r0, r3
 8001c08:	f003 ff5a 	bl	8005ac0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c0c:	1e03      	subs	r3, r0, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8001c10:	f7ff fb24 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001c14:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <MX_TIM17_Init+0x104>)
 8001c16:	0018      	movs	r0, r3
 8001c18:	f000 f91e 	bl	8001e58 <HAL_TIM_MspPostInit>

}
 8001c1c:	46c0      	nop			; (mov r8, r8)
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	b014      	add	sp, #80	; 0x50
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	2000037c 	.word	0x2000037c
 8001c28:	40014800 	.word	0x40014800
 8001c2c:	000003e7 	.word	0x000003e7

08001c30 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001c30:	b590      	push	{r4, r7, lr}
 8001c32:	b08d      	sub	sp, #52	; 0x34
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	241c      	movs	r4, #28
 8001c3a:	193b      	adds	r3, r7, r4
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	2314      	movs	r3, #20
 8001c40:	001a      	movs	r2, r3
 8001c42:	2100      	movs	r1, #0
 8001c44:	f004 fcd8 	bl	80065f8 <memset>
  if(tim_encoderHandle->Instance==TIM1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a3e      	ldr	r2, [pc, #248]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x118>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d13a      	bne.n	8001cc8 <HAL_TIM_Encoder_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c52:	4b3e      	ldr	r3, [pc, #248]	; (8001d4c <HAL_TIM_Encoder_MspInit+0x11c>)
 8001c54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c56:	4b3d      	ldr	r3, [pc, #244]	; (8001d4c <HAL_TIM_Encoder_MspInit+0x11c>)
 8001c58:	2180      	movs	r1, #128	; 0x80
 8001c5a:	0109      	lsls	r1, r1, #4
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	641a      	str	r2, [r3, #64]	; 0x40
 8001c60:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <HAL_TIM_Encoder_MspInit+0x11c>)
 8001c62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c64:	2380      	movs	r3, #128	; 0x80
 8001c66:	011b      	lsls	r3, r3, #4
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
 8001c6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6e:	4b37      	ldr	r3, [pc, #220]	; (8001d4c <HAL_TIM_Encoder_MspInit+0x11c>)
 8001c70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c72:	4b36      	ldr	r3, [pc, #216]	; (8001d4c <HAL_TIM_Encoder_MspInit+0x11c>)
 8001c74:	2101      	movs	r1, #1
 8001c76:	430a      	orrs	r2, r1
 8001c78:	635a      	str	r2, [r3, #52]	; 0x34
 8001c7a:	4b34      	ldr	r3, [pc, #208]	; (8001d4c <HAL_TIM_Encoder_MspInit+0x11c>)
 8001c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c7e:	2201      	movs	r2, #1
 8001c80:	4013      	ands	r3, r2
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = CODEUR1_PH1_Pin|CODEUR1_PH2_Pin;
 8001c86:	193b      	adds	r3, r7, r4
 8001c88:	22c0      	movs	r2, #192	; 0xc0
 8001c8a:	0092      	lsls	r2, r2, #2
 8001c8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8e:	0021      	movs	r1, r4
 8001c90:	187b      	adds	r3, r7, r1
 8001c92:	2202      	movs	r2, #2
 8001c94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	187b      	adds	r3, r7, r1
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9c:	187b      	adds	r3, r7, r1
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001ca2:	187b      	adds	r3, r7, r1
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca8:	187a      	adds	r2, r7, r1
 8001caa:	23a0      	movs	r3, #160	; 0xa0
 8001cac:	05db      	lsls	r3, r3, #23
 8001cae:	0011      	movs	r1, r2
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f001 fbdb 	bl	800346c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2100      	movs	r1, #0
 8001cba:	200e      	movs	r0, #14
 8001cbc:	f001 fa24 	bl	8003108 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001cc0:	200e      	movs	r0, #14
 8001cc2:	f001 fa36 	bl	8003132 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001cc6:	e03a      	b.n	8001d3e <HAL_TIM_Encoder_MspInit+0x10e>
  else if(tim_encoderHandle->Instance==TIM3)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a20      	ldr	r2, [pc, #128]	; (8001d50 <HAL_TIM_Encoder_MspInit+0x120>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d135      	bne.n	8001d3e <HAL_TIM_Encoder_MspInit+0x10e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cd2:	4b1e      	ldr	r3, [pc, #120]	; (8001d4c <HAL_TIM_Encoder_MspInit+0x11c>)
 8001cd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cd6:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <HAL_TIM_Encoder_MspInit+0x11c>)
 8001cd8:	2102      	movs	r1, #2
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	63da      	str	r2, [r3, #60]	; 0x3c
 8001cde:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <HAL_TIM_Encoder_MspInit+0x11c>)
 8001ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cea:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <HAL_TIM_Encoder_MspInit+0x11c>)
 8001cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cee:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <HAL_TIM_Encoder_MspInit+0x11c>)
 8001cf0:	2104      	movs	r1, #4
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	635a      	str	r2, [r3, #52]	; 0x34
 8001cf6:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <HAL_TIM_Encoder_MspInit+0x11c>)
 8001cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cfa:	2204      	movs	r2, #4
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CODEUR2_PH1_Pin|CODEUR2_PH2_Pin;
 8001d02:	211c      	movs	r1, #28
 8001d04:	187b      	adds	r3, r7, r1
 8001d06:	22c0      	movs	r2, #192	; 0xc0
 8001d08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0a:	187b      	adds	r3, r7, r1
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	187b      	adds	r3, r7, r1
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d16:	187b      	adds	r3, r7, r1
 8001d18:	2200      	movs	r2, #0
 8001d1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001d1c:	187b      	adds	r3, r7, r1
 8001d1e:	2201      	movs	r2, #1
 8001d20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d22:	187b      	adds	r3, r7, r1
 8001d24:	4a0b      	ldr	r2, [pc, #44]	; (8001d54 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d26:	0019      	movs	r1, r3
 8001d28:	0010      	movs	r0, r2
 8001d2a:	f001 fb9f 	bl	800346c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2100      	movs	r1, #0
 8001d32:	2010      	movs	r0, #16
 8001d34:	f001 f9e8 	bl	8003108 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d38:	2010      	movs	r0, #16
 8001d3a:	f001 f9fa 	bl	8003132 <HAL_NVIC_EnableIRQ>
}
 8001d3e:	46c0      	nop			; (mov r8, r8)
 8001d40:	46bd      	mov	sp, r7
 8001d42:	b00d      	add	sp, #52	; 0x34
 8001d44:	bd90      	pop	{r4, r7, pc}
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	40012c00 	.word	0x40012c00
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40000400 	.word	0x40000400
 8001d54:	50000800 	.word	0x50000800

08001d58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a27      	ldr	r2, [pc, #156]	; (8001e04 <HAL_TIM_Base_MspInit+0xac>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d10c      	bne.n	8001d84 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d6a:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <HAL_TIM_Base_MspInit+0xb0>)
 8001d6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d6e:	4b26      	ldr	r3, [pc, #152]	; (8001e08 <HAL_TIM_Base_MspInit+0xb0>)
 8001d70:	2110      	movs	r1, #16
 8001d72:	430a      	orrs	r2, r1
 8001d74:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d76:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <HAL_TIM_Base_MspInit+0xb0>)
 8001d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d7a:	2210      	movs	r2, #16
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001d82:	e03a      	b.n	8001dfa <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM14)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a20      	ldr	r2, [pc, #128]	; (8001e0c <HAL_TIM_Base_MspInit+0xb4>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d10e      	bne.n	8001dac <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001d8e:	4b1e      	ldr	r3, [pc, #120]	; (8001e08 <HAL_TIM_Base_MspInit+0xb0>)
 8001d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d92:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <HAL_TIM_Base_MspInit+0xb0>)
 8001d94:	2180      	movs	r1, #128	; 0x80
 8001d96:	0209      	lsls	r1, r1, #8
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	641a      	str	r2, [r3, #64]	; 0x40
 8001d9c:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <HAL_TIM_Base_MspInit+0xb0>)
 8001d9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001da0:	2380      	movs	r3, #128	; 0x80
 8001da2:	021b      	lsls	r3, r3, #8
 8001da4:	4013      	ands	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]
}
 8001daa:	e026      	b.n	8001dfa <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM16)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a17      	ldr	r2, [pc, #92]	; (8001e10 <HAL_TIM_Base_MspInit+0xb8>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d10e      	bne.n	8001dd4 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001db6:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <HAL_TIM_Base_MspInit+0xb0>)
 8001db8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dba:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <HAL_TIM_Base_MspInit+0xb0>)
 8001dbc:	2180      	movs	r1, #128	; 0x80
 8001dbe:	0289      	lsls	r1, r1, #10
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	641a      	str	r2, [r3, #64]	; 0x40
 8001dc4:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <HAL_TIM_Base_MspInit+0xb0>)
 8001dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	029b      	lsls	r3, r3, #10
 8001dcc:	4013      	ands	r3, r2
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
}
 8001dd2:	e012      	b.n	8001dfa <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM17)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0e      	ldr	r2, [pc, #56]	; (8001e14 <HAL_TIM_Base_MspInit+0xbc>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d10d      	bne.n	8001dfa <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001dde:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <HAL_TIM_Base_MspInit+0xb0>)
 8001de0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001de2:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <HAL_TIM_Base_MspInit+0xb0>)
 8001de4:	2180      	movs	r1, #128	; 0x80
 8001de6:	02c9      	lsls	r1, r1, #11
 8001de8:	430a      	orrs	r2, r1
 8001dea:	641a      	str	r2, [r3, #64]	; 0x40
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_TIM_Base_MspInit+0xb0>)
 8001dee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	02db      	lsls	r3, r3, #11
 8001df4:	4013      	ands	r3, r2
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
}
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	b006      	add	sp, #24
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	40001000 	.word	0x40001000
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40002000 	.word	0x40002000
 8001e10:	40014400 	.word	0x40014400
 8001e14:	40014800 	.word	0x40014800

08001e18 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a0a      	ldr	r2, [pc, #40]	; (8001e50 <HAL_TIM_PWM_MspInit+0x38>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d10d      	bne.n	8001e46 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e2e:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e30:	2180      	movs	r1, #128	; 0x80
 8001e32:	0249      	lsls	r1, r1, #9
 8001e34:	430a      	orrs	r2, r1
 8001e36:	641a      	str	r2, [r3, #64]	; 0x40
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	025b      	lsls	r3, r3, #9
 8001e40:	4013      	ands	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	b004      	add	sp, #16
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	40014000 	.word	0x40014000
 8001e54:	40021000 	.word	0x40021000

08001e58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e58:	b590      	push	{r4, r7, lr}
 8001e5a:	b08d      	sub	sp, #52	; 0x34
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	241c      	movs	r4, #28
 8001e62:	193b      	adds	r3, r7, r4
 8001e64:	0018      	movs	r0, r3
 8001e66:	2314      	movs	r3, #20
 8001e68:	001a      	movs	r2, r3
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	f004 fbc4 	bl	80065f8 <memset>
  if(timHandle->Instance==TIM14)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a51      	ldr	r2, [pc, #324]	; (8001fbc <HAL_TIM_MspPostInit+0x164>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d123      	bne.n	8001ec2 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e7a:	4b51      	ldr	r3, [pc, #324]	; (8001fc0 <HAL_TIM_MspPostInit+0x168>)
 8001e7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e7e:	4b50      	ldr	r3, [pc, #320]	; (8001fc0 <HAL_TIM_MspPostInit+0x168>)
 8001e80:	2104      	movs	r1, #4
 8001e82:	430a      	orrs	r2, r1
 8001e84:	635a      	str	r2, [r3, #52]	; 0x34
 8001e86:	4b4e      	ldr	r3, [pc, #312]	; (8001fc0 <HAL_TIM_MspPostInit+0x168>)
 8001e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8a:	2204      	movs	r2, #4
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
 8001e90:	69bb      	ldr	r3, [r7, #24]
    /**TIM14 GPIO Configuration
    PC12     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = PWM_MOT_LIDAR_Pin;
 8001e92:	193b      	adds	r3, r7, r4
 8001e94:	2280      	movs	r2, #128	; 0x80
 8001e96:	0152      	lsls	r2, r2, #5
 8001e98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	0021      	movs	r1, r4
 8001e9c:	187b      	adds	r3, r7, r1
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	187b      	adds	r3, r7, r1
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea8:	187b      	adds	r3, r7, r1
 8001eaa:	2200      	movs	r2, #0
 8001eac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM14;
 8001eae:	187b      	adds	r3, r7, r1
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_MOT_LIDAR_GPIO_Port, &GPIO_InitStruct);
 8001eb4:	187b      	adds	r3, r7, r1
 8001eb6:	4a43      	ldr	r2, [pc, #268]	; (8001fc4 <HAL_TIM_MspPostInit+0x16c>)
 8001eb8:	0019      	movs	r1, r3
 8001eba:	0010      	movs	r0, r2
 8001ebc:	f001 fad6 	bl	800346c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001ec0:	e078      	b.n	8001fb4 <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM15)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a40      	ldr	r2, [pc, #256]	; (8001fc8 <HAL_TIM_MspPostInit+0x170>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d122      	bne.n	8001f12 <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ecc:	4b3c      	ldr	r3, [pc, #240]	; (8001fc0 <HAL_TIM_MspPostInit+0x168>)
 8001ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ed0:	4b3b      	ldr	r3, [pc, #236]	; (8001fc0 <HAL_TIM_MspPostInit+0x168>)
 8001ed2:	2104      	movs	r1, #4
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	635a      	str	r2, [r3, #52]	; 0x34
 8001ed8:	4b39      	ldr	r3, [pc, #228]	; (8001fc0 <HAL_TIM_MspPostInit+0x168>)
 8001eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001edc:	2204      	movs	r2, #4
 8001ede:	4013      	ands	r3, r2
 8001ee0:	617b      	str	r3, [r7, #20]
 8001ee2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_MOT2_PH1_Pin|PWM_MOT2_PH2_Pin;
 8001ee4:	211c      	movs	r1, #28
 8001ee6:	187b      	adds	r3, r7, r1
 8001ee8:	2206      	movs	r2, #6
 8001eea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eec:	187b      	adds	r3, r7, r1
 8001eee:	2202      	movs	r2, #2
 8001ef0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	187b      	adds	r3, r7, r1
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef8:	187b      	adds	r3, r7, r1
 8001efa:	2200      	movs	r2, #0
 8001efc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 8001efe:	187b      	adds	r3, r7, r1
 8001f00:	2202      	movs	r2, #2
 8001f02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f04:	187b      	adds	r3, r7, r1
 8001f06:	4a2f      	ldr	r2, [pc, #188]	; (8001fc4 <HAL_TIM_MspPostInit+0x16c>)
 8001f08:	0019      	movs	r1, r3
 8001f0a:	0010      	movs	r0, r2
 8001f0c:	f001 faae 	bl	800346c <HAL_GPIO_Init>
}
 8001f10:	e050      	b.n	8001fb4 <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM16)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a2d      	ldr	r2, [pc, #180]	; (8001fcc <HAL_TIM_MspPostInit+0x174>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d123      	bne.n	8001f64 <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1c:	4b28      	ldr	r3, [pc, #160]	; (8001fc0 <HAL_TIM_MspPostInit+0x168>)
 8001f1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f20:	4b27      	ldr	r3, [pc, #156]	; (8001fc0 <HAL_TIM_MspPostInit+0x168>)
 8001f22:	2101      	movs	r1, #1
 8001f24:	430a      	orrs	r2, r1
 8001f26:	635a      	str	r2, [r3, #52]	; 0x34
 8001f28:	4b25      	ldr	r3, [pc, #148]	; (8001fc0 <HAL_TIM_MspPostInit+0x168>)
 8001f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_MOT1_PH1_Pin;
 8001f34:	211c      	movs	r1, #28
 8001f36:	187b      	adds	r3, r7, r1
 8001f38:	2240      	movs	r2, #64	; 0x40
 8001f3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3c:	187b      	adds	r3, r7, r1
 8001f3e:	2202      	movs	r2, #2
 8001f40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	187b      	adds	r3, r7, r1
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	187b      	adds	r3, r7, r1
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 8001f4e:	187b      	adds	r3, r7, r1
 8001f50:	2205      	movs	r2, #5
 8001f52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_MOT1_PH1_GPIO_Port, &GPIO_InitStruct);
 8001f54:	187a      	adds	r2, r7, r1
 8001f56:	23a0      	movs	r3, #160	; 0xa0
 8001f58:	05db      	lsls	r3, r3, #23
 8001f5a:	0011      	movs	r1, r2
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f001 fa85 	bl	800346c <HAL_GPIO_Init>
}
 8001f62:	e027      	b.n	8001fb4 <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM17)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a19      	ldr	r2, [pc, #100]	; (8001fd0 <HAL_TIM_MspPostInit+0x178>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d122      	bne.n	8001fb4 <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6e:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <HAL_TIM_MspPostInit+0x168>)
 8001f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f72:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <HAL_TIM_MspPostInit+0x168>)
 8001f74:	2101      	movs	r1, #1
 8001f76:	430a      	orrs	r2, r1
 8001f78:	635a      	str	r2, [r3, #52]	; 0x34
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <HAL_TIM_MspPostInit+0x168>)
 8001f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f7e:	2201      	movs	r2, #1
 8001f80:	4013      	ands	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_MOT1_PH2_Pin;
 8001f86:	211c      	movs	r1, #28
 8001f88:	187b      	adds	r3, r7, r1
 8001f8a:	2280      	movs	r2, #128	; 0x80
 8001f8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	187b      	adds	r3, r7, r1
 8001f90:	2202      	movs	r2, #2
 8001f92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	187b      	adds	r3, r7, r1
 8001f96:	2200      	movs	r2, #0
 8001f98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9a:	187b      	adds	r3, r7, r1
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8001fa0:	187b      	adds	r3, r7, r1
 8001fa2:	2205      	movs	r2, #5
 8001fa4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_MOT1_PH2_GPIO_Port, &GPIO_InitStruct);
 8001fa6:	187a      	adds	r2, r7, r1
 8001fa8:	23a0      	movs	r3, #160	; 0xa0
 8001faa:	05db      	lsls	r3, r3, #23
 8001fac:	0011      	movs	r1, r2
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f001 fa5c 	bl	800346c <HAL_GPIO_Init>
}
 8001fb4:	46c0      	nop			; (mov r8, r8)
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	b00d      	add	sp, #52	; 0x34
 8001fba:	bd90      	pop	{r4, r7, pc}
 8001fbc:	40002000 	.word	0x40002000
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	50000800 	.word	0x50000800
 8001fc8:	40014000 	.word	0x40014000
 8001fcc:	40014400 	.word	0x40014400
 8001fd0:	40014800 	.word	0x40014800

08001fd4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart4;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fd8:	4b23      	ldr	r3, [pc, #140]	; (8002068 <MX_USART1_UART_Init+0x94>)
 8001fda:	4a24      	ldr	r2, [pc, #144]	; (800206c <MX_USART1_UART_Init+0x98>)
 8001fdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fde:	4b22      	ldr	r3, [pc, #136]	; (8002068 <MX_USART1_UART_Init+0x94>)
 8001fe0:	22e1      	movs	r2, #225	; 0xe1
 8001fe2:	0252      	lsls	r2, r2, #9
 8001fe4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fe6:	4b20      	ldr	r3, [pc, #128]	; (8002068 <MX_USART1_UART_Init+0x94>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fec:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <MX_USART1_UART_Init+0x94>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ff2:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <MX_USART1_UART_Init+0x94>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <MX_USART1_UART_Init+0x94>)
 8001ffa:	220c      	movs	r2, #12
 8001ffc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <MX_USART1_UART_Init+0x94>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002004:	4b18      	ldr	r3, [pc, #96]	; (8002068 <MX_USART1_UART_Init+0x94>)
 8002006:	2200      	movs	r2, #0
 8002008:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800200a:	4b17      	ldr	r3, [pc, #92]	; (8002068 <MX_USART1_UART_Init+0x94>)
 800200c:	2200      	movs	r2, #0
 800200e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002010:	4b15      	ldr	r3, [pc, #84]	; (8002068 <MX_USART1_UART_Init+0x94>)
 8002012:	2200      	movs	r2, #0
 8002014:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002016:	4b14      	ldr	r3, [pc, #80]	; (8002068 <MX_USART1_UART_Init+0x94>)
 8002018:	2200      	movs	r2, #0
 800201a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800201c:	4b12      	ldr	r3, [pc, #72]	; (8002068 <MX_USART1_UART_Init+0x94>)
 800201e:	0018      	movs	r0, r3
 8002020:	f003 fe0c 	bl	8005c3c <HAL_UART_Init>
 8002024:	1e03      	subs	r3, r0, #0
 8002026:	d001      	beq.n	800202c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002028:	f7ff f918 	bl	800125c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800202c:	4b0e      	ldr	r3, [pc, #56]	; (8002068 <MX_USART1_UART_Init+0x94>)
 800202e:	2100      	movs	r1, #0
 8002030:	0018      	movs	r0, r3
 8002032:	f004 fa01 	bl	8006438 <HAL_UARTEx_SetTxFifoThreshold>
 8002036:	1e03      	subs	r3, r0, #0
 8002038:	d001      	beq.n	800203e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800203a:	f7ff f90f 	bl	800125c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800203e:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <MX_USART1_UART_Init+0x94>)
 8002040:	2100      	movs	r1, #0
 8002042:	0018      	movs	r0, r3
 8002044:	f004 fa38 	bl	80064b8 <HAL_UARTEx_SetRxFifoThreshold>
 8002048:	1e03      	subs	r3, r0, #0
 800204a:	d001      	beq.n	8002050 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800204c:	f7ff f906 	bl	800125c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002050:	4b05      	ldr	r3, [pc, #20]	; (8002068 <MX_USART1_UART_Init+0x94>)
 8002052:	0018      	movs	r0, r3
 8002054:	f004 f9b6 	bl	80063c4 <HAL_UARTEx_DisableFifoMode>
 8002058:	1e03      	subs	r3, r0, #0
 800205a:	d001      	beq.n	8002060 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800205c:	f7ff f8fe 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002060:	46c0      	nop			; (mov r8, r8)
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	200003c8 	.word	0x200003c8
 800206c:	40013800 	.word	0x40013800

08002070 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8002074:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <MX_USART4_UART_Init+0x60>)
 8002076:	4a17      	ldr	r2, [pc, #92]	; (80020d4 <MX_USART4_UART_Init+0x64>)
 8002078:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 128000;
 800207a:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <MX_USART4_UART_Init+0x60>)
 800207c:	22fa      	movs	r2, #250	; 0xfa
 800207e:	0252      	lsls	r2, r2, #9
 8002080:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002082:	4b13      	ldr	r3, [pc, #76]	; (80020d0 <MX_USART4_UART_Init+0x60>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002088:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <MX_USART4_UART_Init+0x60>)
 800208a:	2200      	movs	r2, #0
 800208c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800208e:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <MX_USART4_UART_Init+0x60>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002094:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <MX_USART4_UART_Init+0x60>)
 8002096:	220c      	movs	r2, #12
 8002098:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800209a:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <MX_USART4_UART_Init+0x60>)
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <MX_USART4_UART_Init+0x60>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020a6:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <MX_USART4_UART_Init+0x60>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020ac:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <MX_USART4_UART_Init+0x60>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020b2:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <MX_USART4_UART_Init+0x60>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <MX_USART4_UART_Init+0x60>)
 80020ba:	0018      	movs	r0, r3
 80020bc:	f003 fdbe 	bl	8005c3c <HAL_UART_Init>
 80020c0:	1e03      	subs	r3, r0, #0
 80020c2:	d001      	beq.n	80020c8 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 80020c4:	f7ff f8ca 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80020c8:	46c0      	nop			; (mov r8, r8)
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	2000045c 	.word	0x2000045c
 80020d4:	40004c00 	.word	0x40004c00

080020d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020d8:	b590      	push	{r4, r7, lr}
 80020da:	b093      	sub	sp, #76	; 0x4c
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e0:	2334      	movs	r3, #52	; 0x34
 80020e2:	18fb      	adds	r3, r7, r3
 80020e4:	0018      	movs	r0, r3
 80020e6:	2314      	movs	r3, #20
 80020e8:	001a      	movs	r2, r3
 80020ea:	2100      	movs	r1, #0
 80020ec:	f004 fa84 	bl	80065f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020f0:	2418      	movs	r4, #24
 80020f2:	193b      	adds	r3, r7, r4
 80020f4:	0018      	movs	r0, r3
 80020f6:	231c      	movs	r3, #28
 80020f8:	001a      	movs	r2, r3
 80020fa:	2100      	movs	r1, #0
 80020fc:	f004 fa7c 	bl	80065f8 <memset>
  if(uartHandle->Instance==USART1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a3d      	ldr	r2, [pc, #244]	; (80021fc <HAL_UART_MspInit+0x124>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d13e      	bne.n	8002188 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800210a:	193b      	adds	r3, r7, r4
 800210c:	2201      	movs	r2, #1
 800210e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002110:	193b      	adds	r3, r7, r4
 8002112:	2200      	movs	r2, #0
 8002114:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002116:	193b      	adds	r3, r7, r4
 8002118:	0018      	movs	r0, r3
 800211a:	f002 f8a5 	bl	8004268 <HAL_RCCEx_PeriphCLKConfig>
 800211e:	1e03      	subs	r3, r0, #0
 8002120:	d001      	beq.n	8002126 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002122:	f7ff f89b 	bl	800125c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002126:	4b36      	ldr	r3, [pc, #216]	; (8002200 <HAL_UART_MspInit+0x128>)
 8002128:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800212a:	4b35      	ldr	r3, [pc, #212]	; (8002200 <HAL_UART_MspInit+0x128>)
 800212c:	2180      	movs	r1, #128	; 0x80
 800212e:	01c9      	lsls	r1, r1, #7
 8002130:	430a      	orrs	r2, r1
 8002132:	641a      	str	r2, [r3, #64]	; 0x40
 8002134:	4b32      	ldr	r3, [pc, #200]	; (8002200 <HAL_UART_MspInit+0x128>)
 8002136:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002138:	2380      	movs	r3, #128	; 0x80
 800213a:	01db      	lsls	r3, r3, #7
 800213c:	4013      	ands	r3, r2
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002142:	4b2f      	ldr	r3, [pc, #188]	; (8002200 <HAL_UART_MspInit+0x128>)
 8002144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002146:	4b2e      	ldr	r3, [pc, #184]	; (8002200 <HAL_UART_MspInit+0x128>)
 8002148:	2104      	movs	r1, #4
 800214a:	430a      	orrs	r2, r1
 800214c:	635a      	str	r2, [r3, #52]	; 0x34
 800214e:	4b2c      	ldr	r3, [pc, #176]	; (8002200 <HAL_UART_MspInit+0x128>)
 8002150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002152:	2204      	movs	r2, #4
 8002154:	4013      	ands	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Debug_Pin|USART1_RX_Debug_Pin;
 800215a:	2134      	movs	r1, #52	; 0x34
 800215c:	187b      	adds	r3, r7, r1
 800215e:	2230      	movs	r2, #48	; 0x30
 8002160:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	187b      	adds	r3, r7, r1
 8002164:	2202      	movs	r2, #2
 8002166:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	187b      	adds	r3, r7, r1
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216e:	187b      	adds	r3, r7, r1
 8002170:	2200      	movs	r2, #0
 8002172:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002174:	187b      	adds	r3, r7, r1
 8002176:	2201      	movs	r2, #1
 8002178:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800217a:	187b      	adds	r3, r7, r1
 800217c:	4a21      	ldr	r2, [pc, #132]	; (8002204 <HAL_UART_MspInit+0x12c>)
 800217e:	0019      	movs	r1, r3
 8002180:	0010      	movs	r0, r2
 8002182:	f001 f973 	bl	800346c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8002186:	e035      	b.n	80021f4 <HAL_UART_MspInit+0x11c>
  else if(uartHandle->Instance==USART4)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a1e      	ldr	r2, [pc, #120]	; (8002208 <HAL_UART_MspInit+0x130>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d130      	bne.n	80021f4 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART4_CLK_ENABLE();
 8002192:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <HAL_UART_MspInit+0x128>)
 8002194:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002196:	4b1a      	ldr	r3, [pc, #104]	; (8002200 <HAL_UART_MspInit+0x128>)
 8002198:	2180      	movs	r1, #128	; 0x80
 800219a:	0309      	lsls	r1, r1, #12
 800219c:	430a      	orrs	r2, r1
 800219e:	63da      	str	r2, [r3, #60]	; 0x3c
 80021a0:	4b17      	ldr	r3, [pc, #92]	; (8002200 <HAL_UART_MspInit+0x128>)
 80021a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	031b      	lsls	r3, r3, #12
 80021a8:	4013      	ands	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ae:	4b14      	ldr	r3, [pc, #80]	; (8002200 <HAL_UART_MspInit+0x128>)
 80021b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021b2:	4b13      	ldr	r3, [pc, #76]	; (8002200 <HAL_UART_MspInit+0x128>)
 80021b4:	2104      	movs	r1, #4
 80021b6:	430a      	orrs	r2, r1
 80021b8:	635a      	str	r2, [r3, #52]	; 0x34
 80021ba:	4b11      	ldr	r3, [pc, #68]	; (8002200 <HAL_UART_MspInit+0x128>)
 80021bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021be:	2204      	movs	r2, #4
 80021c0:	4013      	ands	r3, r2
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART4_RX_LIDAR_Pin|USART4_TX_LIDAR_Pin;
 80021c6:	2134      	movs	r1, #52	; 0x34
 80021c8:	187b      	adds	r3, r7, r1
 80021ca:	22c0      	movs	r2, #192	; 0xc0
 80021cc:	0112      	lsls	r2, r2, #4
 80021ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	187b      	adds	r3, r7, r1
 80021d2:	2202      	movs	r2, #2
 80021d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	187b      	adds	r3, r7, r1
 80021d8:	2200      	movs	r2, #0
 80021da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	187b      	adds	r3, r7, r1
 80021de:	2200      	movs	r2, #0
 80021e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART4;
 80021e2:	187b      	adds	r3, r7, r1
 80021e4:	2201      	movs	r2, #1
 80021e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e8:	187b      	adds	r3, r7, r1
 80021ea:	4a06      	ldr	r2, [pc, #24]	; (8002204 <HAL_UART_MspInit+0x12c>)
 80021ec:	0019      	movs	r1, r3
 80021ee:	0010      	movs	r0, r2
 80021f0:	f001 f93c 	bl	800346c <HAL_GPIO_Init>
}
 80021f4:	46c0      	nop			; (mov r8, r8)
 80021f6:	46bd      	mov	sp, r7
 80021f8:	b013      	add	sp, #76	; 0x4c
 80021fa:	bd90      	pop	{r4, r7, pc}
 80021fc:	40013800 	.word	0x40013800
 8002200:	40021000 	.word	0x40021000
 8002204:	50000800 	.word	0x50000800
 8002208:	40004c00 	.word	0x40004c00

0800220c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800220c:	480d      	ldr	r0, [pc, #52]	; (8002244 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800220e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002210:	f7ff f9fa 	bl	8001608 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002214:	480c      	ldr	r0, [pc, #48]	; (8002248 <LoopForever+0x6>)
  ldr r1, =_edata
 8002216:	490d      	ldr	r1, [pc, #52]	; (800224c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002218:	4a0d      	ldr	r2, [pc, #52]	; (8002250 <LoopForever+0xe>)
  movs r3, #0
 800221a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800221c:	e002      	b.n	8002224 <LoopCopyDataInit>

0800221e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800221e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002222:	3304      	adds	r3, #4

08002224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002228:	d3f9      	bcc.n	800221e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800222a:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <LoopForever+0x12>)
  ldr r4, =_ebss
 800222c:	4c0a      	ldr	r4, [pc, #40]	; (8002258 <LoopForever+0x16>)
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002230:	e001      	b.n	8002236 <LoopFillZerobss>

08002232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002234:	3204      	adds	r2, #4

08002236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002238:	d3fb      	bcc.n	8002232 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800223a:	f004 f9e5 	bl	8006608 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800223e:	f7fe fd7f 	bl	8000d40 <main>

08002242 <LoopForever>:

LoopForever:
  b LoopForever
 8002242:	e7fe      	b.n	8002242 <LoopForever>
  ldr   r0, =_estack
 8002244:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800224c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002250:	08006760 	.word	0x08006760
  ldr r2, =_sbss
 8002254:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002258:	200004f4 	.word	0x200004f4

0800225c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800225c:	e7fe      	b.n	800225c <ADC1_IRQHandler>
	...

08002260 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002266:	1dfb      	adds	r3, r7, #7
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <HAL_Init+0x3c>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4b0a      	ldr	r3, [pc, #40]	; (800229c <HAL_Init+0x3c>)
 8002272:	2180      	movs	r1, #128	; 0x80
 8002274:	0049      	lsls	r1, r1, #1
 8002276:	430a      	orrs	r2, r1
 8002278:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800227a:	2003      	movs	r0, #3
 800227c:	f7ff f8c6 	bl	800140c <HAL_InitTick>
 8002280:	1e03      	subs	r3, r0, #0
 8002282:	d003      	beq.n	800228c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002284:	1dfb      	adds	r3, r7, #7
 8002286:	2201      	movs	r2, #1
 8002288:	701a      	strb	r2, [r3, #0]
 800228a:	e001      	b.n	8002290 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800228c:	f7ff f896 	bl	80013bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002290:	1dfb      	adds	r3, r7, #7
 8002292:	781b      	ldrb	r3, [r3, #0]
}
 8002294:	0018      	movs	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	b002      	add	sp, #8
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40022000 	.word	0x40022000

080022a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <HAL_IncTick+0x1c>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	001a      	movs	r2, r3
 80022aa:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <HAL_IncTick+0x20>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	18d2      	adds	r2, r2, r3
 80022b0:	4b03      	ldr	r3, [pc, #12]	; (80022c0 <HAL_IncTick+0x20>)
 80022b2:	601a      	str	r2, [r3, #0]
}
 80022b4:	46c0      	nop			; (mov r8, r8)
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	2000000c 	.word	0x2000000c
 80022c0:	200004f0 	.word	0x200004f0

080022c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  return uwTick;
 80022c8:	4b02      	ldr	r3, [pc, #8]	; (80022d4 <HAL_GetTick+0x10>)
 80022ca:	681b      	ldr	r3, [r3, #0]
}
 80022cc:	0018      	movs	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	200004f0 	.word	0x200004f0

080022d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022e0:	f7ff fff0 	bl	80022c4 <HAL_GetTick>
 80022e4:	0003      	movs	r3, r0
 80022e6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	3301      	adds	r3, #1
 80022f0:	d005      	beq.n	80022fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022f2:	4b0a      	ldr	r3, [pc, #40]	; (800231c <HAL_Delay+0x44>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	001a      	movs	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	189b      	adds	r3, r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	f7ff ffe0 	bl	80022c4 <HAL_GetTick>
 8002304:	0002      	movs	r2, r0
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	429a      	cmp	r2, r3
 800230e:	d8f7      	bhi.n	8002300 <HAL_Delay+0x28>
  {
  }
}
 8002310:	46c0      	nop			; (mov r8, r8)
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	46bd      	mov	sp, r7
 8002316:	b004      	add	sp, #16
 8002318:	bd80      	pop	{r7, pc}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	2000000c 	.word	0x2000000c

08002320 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a06      	ldr	r2, [pc, #24]	; (8002348 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800232e:	4013      	ands	r3, r2
 8002330:	0019      	movs	r1, r3
 8002332:	4b04      	ldr	r3, [pc, #16]	; (8002344 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	430a      	orrs	r2, r1
 8002338:	601a      	str	r2, [r3, #0]
}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	46bd      	mov	sp, r7
 800233e:	b002      	add	sp, #8
 8002340:	bd80      	pop	{r7, pc}
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	40010000 	.word	0x40010000
 8002348:	fffff9ff 	.word	0xfffff9ff

0800234c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a05      	ldr	r2, [pc, #20]	; (8002370 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800235c:	401a      	ands	r2, r3
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	431a      	orrs	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	601a      	str	r2, [r3, #0]
}
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	46bd      	mov	sp, r7
 800236a:	b002      	add	sp, #8
 800236c:	bd80      	pop	{r7, pc}
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	fe3fffff 	.word	0xfe3fffff

08002374 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	23e0      	movs	r3, #224	; 0xe0
 8002382:	045b      	lsls	r3, r3, #17
 8002384:	4013      	ands	r3, r2
}
 8002386:	0018      	movs	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	b002      	add	sp, #8
 800238c:	bd80      	pop	{r7, pc}

0800238e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b084      	sub	sp, #16
 8002392:	af00      	add	r7, sp, #0
 8002394:	60f8      	str	r0, [r7, #12]
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	2104      	movs	r1, #4
 80023a2:	400a      	ands	r2, r1
 80023a4:	2107      	movs	r1, #7
 80023a6:	4091      	lsls	r1, r2
 80023a8:	000a      	movs	r2, r1
 80023aa:	43d2      	mvns	r2, r2
 80023ac:	401a      	ands	r2, r3
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2104      	movs	r1, #4
 80023b2:	400b      	ands	r3, r1
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4099      	lsls	r1, r3
 80023b8:	000b      	movs	r3, r1
 80023ba:	431a      	orrs	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80023c0:	46c0      	nop			; (mov r8, r8)
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b004      	add	sp, #16
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	2104      	movs	r1, #4
 80023da:	400a      	ands	r2, r1
 80023dc:	2107      	movs	r1, #7
 80023de:	4091      	lsls	r1, r2
 80023e0:	000a      	movs	r2, r1
 80023e2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	2104      	movs	r1, #4
 80023e8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80023ea:	40da      	lsrs	r2, r3
 80023ec:	0013      	movs	r3, r2
}
 80023ee:	0018      	movs	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	b002      	add	sp, #8
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	60f8      	str	r0, [r7, #12]
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	211f      	movs	r1, #31
 800240a:	400a      	ands	r2, r1
 800240c:	210f      	movs	r1, #15
 800240e:	4091      	lsls	r1, r2
 8002410:	000a      	movs	r2, r1
 8002412:	43d2      	mvns	r2, r2
 8002414:	401a      	ands	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	0e9b      	lsrs	r3, r3, #26
 800241a:	210f      	movs	r1, #15
 800241c:	4019      	ands	r1, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	201f      	movs	r0, #31
 8002422:	4003      	ands	r3, r0
 8002424:	4099      	lsls	r1, r3
 8002426:	000b      	movs	r3, r1
 8002428:	431a      	orrs	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	46bd      	mov	sp, r7
 8002432:	b004      	add	sp, #16
 8002434:	bd80      	pop	{r7, pc}

08002436 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	035b      	lsls	r3, r3, #13
 8002448:	0b5b      	lsrs	r3, r3, #13
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002450:	46c0      	nop			; (mov r8, r8)
 8002452:	46bd      	mov	sp, r7
 8002454:	b002      	add	sp, #8
 8002456:	bd80      	pop	{r7, pc}

08002458 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	0352      	lsls	r2, r2, #13
 800246a:	0b52      	lsrs	r2, r2, #13
 800246c:	43d2      	mvns	r2, r2
 800246e:	401a      	ands	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002474:	46c0      	nop			; (mov r8, r8)
 8002476:	46bd      	mov	sp, r7
 8002478:	b002      	add	sp, #8
 800247a:	bd80      	pop	{r7, pc}

0800247c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	0212      	lsls	r2, r2, #8
 8002490:	43d2      	mvns	r2, r2
 8002492:	401a      	ands	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	021b      	lsls	r3, r3, #8
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	400b      	ands	r3, r1
 800249c:	4904      	ldr	r1, [pc, #16]	; (80024b0 <LL_ADC_SetChannelSamplingTime+0x34>)
 800249e:	400b      	ands	r3, r1
 80024a0:	431a      	orrs	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	46bd      	mov	sp, r7
 80024aa:	b004      	add	sp, #16
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	07ffff00 	.word	0x07ffff00

080024b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	4a05      	ldr	r2, [pc, #20]	; (80024d8 <LL_ADC_EnableInternalRegulator+0x24>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	2280      	movs	r2, #128	; 0x80
 80024c6:	0552      	lsls	r2, r2, #21
 80024c8:	431a      	orrs	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	46bd      	mov	sp, r7
 80024d2:	b002      	add	sp, #8
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	46c0      	nop			; (mov r8, r8)
 80024d8:	6fffffe8 	.word	0x6fffffe8

080024dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	2380      	movs	r3, #128	; 0x80
 80024ea:	055b      	lsls	r3, r3, #21
 80024ec:	401a      	ands	r2, r3
 80024ee:	2380      	movs	r3, #128	; 0x80
 80024f0:	055b      	lsls	r3, r3, #21
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d101      	bne.n	80024fa <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	0018      	movs	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	b002      	add	sp, #8
 8002502:	bd80      	pop	{r7, pc}

08002504 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	4a04      	ldr	r2, [pc, #16]	; (8002524 <LL_ADC_Disable+0x20>)
 8002512:	4013      	ands	r3, r2
 8002514:	2202      	movs	r2, #2
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800251c:	46c0      	nop			; (mov r8, r8)
 800251e:	46bd      	mov	sp, r7
 8002520:	b002      	add	sp, #8
 8002522:	bd80      	pop	{r7, pc}
 8002524:	7fffffe8 	.word	0x7fffffe8

08002528 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	2201      	movs	r2, #1
 8002536:	4013      	ands	r3, r2
 8002538:	2b01      	cmp	r3, #1
 800253a:	d101      	bne.n	8002540 <LL_ADC_IsEnabled+0x18>
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <LL_ADC_IsEnabled+0x1a>
 8002540:	2300      	movs	r3, #0
}
 8002542:	0018      	movs	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	b002      	add	sp, #8
 8002548:	bd80      	pop	{r7, pc}

0800254a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2202      	movs	r2, #2
 8002558:	4013      	ands	r3, r2
 800255a:	2b02      	cmp	r3, #2
 800255c:	d101      	bne.n	8002562 <LL_ADC_IsDisableOngoing+0x18>
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <LL_ADC_IsDisableOngoing+0x1a>
 8002562:	2300      	movs	r3, #0
}
 8002564:	0018      	movs	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	b002      	add	sp, #8
 800256a:	bd80      	pop	{r7, pc}

0800256c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	2204      	movs	r2, #4
 800257a:	4013      	ands	r3, r2
 800257c:	2b04      	cmp	r3, #4
 800257e:	d101      	bne.n	8002584 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002580:	2301      	movs	r3, #1
 8002582:	e000      	b.n	8002586 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002584:	2300      	movs	r3, #0
}
 8002586:	0018      	movs	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	b002      	add	sp, #8
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002598:	231f      	movs	r3, #31
 800259a:	18fb      	adds	r3, r7, r3
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e17f      	b.n	80028b6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10a      	bne.n	80025d4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	0018      	movs	r0, r3
 80025c2:	f7fe fa2d 	bl	8000a20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2254      	movs	r2, #84	; 0x54
 80025d0:	2100      	movs	r1, #0
 80025d2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	0018      	movs	r0, r3
 80025da:	f7ff ff7f 	bl	80024dc <LL_ADC_IsInternalRegulatorEnabled>
 80025de:	1e03      	subs	r3, r0, #0
 80025e0:	d115      	bne.n	800260e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	0018      	movs	r0, r3
 80025e8:	f7ff ff64 	bl	80024b4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025ec:	4bb4      	ldr	r3, [pc, #720]	; (80028c0 <HAL_ADC_Init+0x330>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	49b4      	ldr	r1, [pc, #720]	; (80028c4 <HAL_ADC_Init+0x334>)
 80025f2:	0018      	movs	r0, r3
 80025f4:	f7fd fd84 	bl	8000100 <__udivsi3>
 80025f8:	0003      	movs	r3, r0
 80025fa:	3301      	adds	r3, #1
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002600:	e002      	b.n	8002608 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	3b01      	subs	r3, #1
 8002606:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f9      	bne.n	8002602 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	0018      	movs	r0, r3
 8002614:	f7ff ff62 	bl	80024dc <LL_ADC_IsInternalRegulatorEnabled>
 8002618:	1e03      	subs	r3, r0, #0
 800261a:	d10f      	bne.n	800263c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002620:	2210      	movs	r2, #16
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262c:	2201      	movs	r2, #1
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002634:	231f      	movs	r3, #31
 8002636:	18fb      	adds	r3, r7, r3
 8002638:	2201      	movs	r2, #1
 800263a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	0018      	movs	r0, r3
 8002642:	f7ff ff93 	bl	800256c <LL_ADC_REG_IsConversionOngoing>
 8002646:	0003      	movs	r3, r0
 8002648:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264e:	2210      	movs	r2, #16
 8002650:	4013      	ands	r3, r2
 8002652:	d000      	beq.n	8002656 <HAL_ADC_Init+0xc6>
 8002654:	e122      	b.n	800289c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d000      	beq.n	800265e <HAL_ADC_Init+0xce>
 800265c:	e11e      	b.n	800289c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	4a99      	ldr	r2, [pc, #612]	; (80028c8 <HAL_ADC_Init+0x338>)
 8002664:	4013      	ands	r3, r2
 8002666:	2202      	movs	r2, #2
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	0018      	movs	r0, r3
 8002674:	f7ff ff58 	bl	8002528 <LL_ADC_IsEnabled>
 8002678:	1e03      	subs	r3, r0, #0
 800267a:	d000      	beq.n	800267e <HAL_ADC_Init+0xee>
 800267c:	e0ad      	b.n	80027da <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	7e1b      	ldrb	r3, [r3, #24]
 8002686:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002688:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	7e5b      	ldrb	r3, [r3, #25]
 800268e:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002690:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	7e9b      	ldrb	r3, [r3, #26]
 8002696:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002698:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <HAL_ADC_Init+0x118>
 80026a2:	2380      	movs	r3, #128	; 0x80
 80026a4:	015b      	lsls	r3, r3, #5
 80026a6:	e000      	b.n	80026aa <HAL_ADC_Init+0x11a>
 80026a8:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80026aa:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80026b0:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	da04      	bge.n	80026c4 <HAL_ADC_Init+0x134>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	085b      	lsrs	r3, r3, #1
 80026c2:	e001      	b.n	80026c8 <HAL_ADC_Init+0x138>
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80026c8:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	212c      	movs	r1, #44	; 0x2c
 80026ce:	5c5b      	ldrb	r3, [r3, r1]
 80026d0:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80026d2:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2220      	movs	r2, #32
 80026de:	5c9b      	ldrb	r3, [r3, r2]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d115      	bne.n	8002710 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	7e9b      	ldrb	r3, [r3, #26]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d105      	bne.n	80026f8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	2280      	movs	r2, #128	; 0x80
 80026f0:	0252      	lsls	r2, r2, #9
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
 80026f6:	e00b      	b.n	8002710 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fc:	2220      	movs	r2, #32
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002708:	2201      	movs	r2, #1
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00a      	beq.n	800272e <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800271c:	23e0      	movs	r3, #224	; 0xe0
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002726:	4313      	orrs	r3, r2
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	4a65      	ldr	r2, [pc, #404]	; (80028cc <HAL_ADC_Init+0x33c>)
 8002736:	4013      	ands	r3, r2
 8002738:	0019      	movs	r1, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	430a      	orrs	r2, r1
 8002742:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	0f9b      	lsrs	r3, r3, #30
 800274a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002750:	4313      	orrs	r3, r2
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	4313      	orrs	r3, r2
 8002756:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	223c      	movs	r2, #60	; 0x3c
 800275c:	5c9b      	ldrb	r3, [r3, r2]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d111      	bne.n	8002786 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	0f9b      	lsrs	r3, r3, #30
 8002768:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800276e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002774:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800277a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	4313      	orrs	r3, r2
 8002780:	2201      	movs	r2, #1
 8002782:	4313      	orrs	r3, r2
 8002784:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	4a50      	ldr	r2, [pc, #320]	; (80028d0 <HAL_ADC_Init+0x340>)
 800278e:	4013      	ands	r3, r2
 8002790:	0019      	movs	r1, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	430a      	orrs	r2, r1
 800279a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	23c0      	movs	r3, #192	; 0xc0
 80027a2:	061b      	lsls	r3, r3, #24
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d018      	beq.n	80027da <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80027ac:	2380      	movs	r3, #128	; 0x80
 80027ae:	05db      	lsls	r3, r3, #23
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d012      	beq.n	80027da <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80027b8:	2380      	movs	r3, #128	; 0x80
 80027ba:	061b      	lsls	r3, r3, #24
 80027bc:	429a      	cmp	r2, r3
 80027be:	d00c      	beq.n	80027da <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80027c0:	4b44      	ldr	r3, [pc, #272]	; (80028d4 <HAL_ADC_Init+0x344>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a44      	ldr	r2, [pc, #272]	; (80028d8 <HAL_ADC_Init+0x348>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	0019      	movs	r1, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	23f0      	movs	r3, #240	; 0xf0
 80027d0:	039b      	lsls	r3, r3, #14
 80027d2:	401a      	ands	r2, r3
 80027d4:	4b3f      	ldr	r3, [pc, #252]	; (80028d4 <HAL_ADC_Init+0x344>)
 80027d6:	430a      	orrs	r2, r1
 80027d8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6818      	ldr	r0, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e2:	001a      	movs	r2, r3
 80027e4:	2100      	movs	r1, #0
 80027e6:	f7ff fdd2 	bl	800238e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6818      	ldr	r0, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f2:	493a      	ldr	r1, [pc, #232]	; (80028dc <HAL_ADC_Init+0x34c>)
 80027f4:	001a      	movs	r2, r3
 80027f6:	f7ff fdca 	bl	800238e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d109      	bne.n	8002816 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2110      	movs	r1, #16
 800280e:	4249      	negs	r1, r1
 8002810:	430a      	orrs	r2, r1
 8002812:	629a      	str	r2, [r3, #40]	; 0x28
 8002814:	e018      	b.n	8002848 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691a      	ldr	r2, [r3, #16]
 800281a:	2380      	movs	r3, #128	; 0x80
 800281c:	039b      	lsls	r3, r3, #14
 800281e:	429a      	cmp	r2, r3
 8002820:	d112      	bne.n	8002848 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	3b01      	subs	r3, #1
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	221c      	movs	r2, #28
 8002832:	4013      	ands	r3, r2
 8002834:	2210      	movs	r2, #16
 8002836:	4252      	negs	r2, r2
 8002838:	409a      	lsls	r2, r3
 800283a:	0011      	movs	r1, r2
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2100      	movs	r1, #0
 800284e:	0018      	movs	r0, r3
 8002850:	f7ff fdba 	bl	80023c8 <LL_ADC_GetSamplingTimeCommonChannels>
 8002854:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800285a:	429a      	cmp	r2, r3
 800285c:	d10b      	bne.n	8002876 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002868:	2203      	movs	r2, #3
 800286a:	4393      	bics	r3, r2
 800286c:	2201      	movs	r2, #1
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002874:	e01c      	b.n	80028b0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287a:	2212      	movs	r2, #18
 800287c:	4393      	bics	r3, r2
 800287e:	2210      	movs	r2, #16
 8002880:	431a      	orrs	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288a:	2201      	movs	r2, #1
 800288c:	431a      	orrs	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002892:	231f      	movs	r3, #31
 8002894:	18fb      	adds	r3, r7, r3
 8002896:	2201      	movs	r2, #1
 8002898:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800289a:	e009      	b.n	80028b0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a0:	2210      	movs	r2, #16
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80028a8:	231f      	movs	r3, #31
 80028aa:	18fb      	adds	r3, r7, r3
 80028ac:	2201      	movs	r2, #1
 80028ae:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80028b0:	231f      	movs	r3, #31
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	781b      	ldrb	r3, [r3, #0]
}
 80028b6:	0018      	movs	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b008      	add	sp, #32
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	20000004 	.word	0x20000004
 80028c4:	00030d40 	.word	0x00030d40
 80028c8:	fffffefd 	.word	0xfffffefd
 80028cc:	fffe0201 	.word	0xfffe0201
 80028d0:	1ffffc02 	.word	0x1ffffc02
 80028d4:	40012708 	.word	0x40012708
 80028d8:	ffc3ffff 	.word	0xffc3ffff
 80028dc:	07ffff04 	.word	0x07ffff04

080028e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ea:	2317      	movs	r3, #23
 80028ec:	18fb      	adds	r3, r7, r3
 80028ee:	2200      	movs	r2, #0
 80028f0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2254      	movs	r2, #84	; 0x54
 80028fa:	5c9b      	ldrb	r3, [r3, r2]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d101      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x24>
 8002900:	2302      	movs	r3, #2
 8002902:	e1c0      	b.n	8002c86 <HAL_ADC_ConfigChannel+0x3a6>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2254      	movs	r2, #84	; 0x54
 8002908:	2101      	movs	r1, #1
 800290a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	0018      	movs	r0, r3
 8002912:	f7ff fe2b 	bl	800256c <LL_ADC_REG_IsConversionOngoing>
 8002916:	1e03      	subs	r3, r0, #0
 8002918:	d000      	beq.n	800291c <HAL_ADC_ConfigChannel+0x3c>
 800291a:	e1a3      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d100      	bne.n	8002926 <HAL_ADC_ConfigChannel+0x46>
 8002924:	e143      	b.n	8002bae <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691a      	ldr	r2, [r3, #16]
 800292a:	2380      	movs	r3, #128	; 0x80
 800292c:	061b      	lsls	r3, r3, #24
 800292e:	429a      	cmp	r2, r3
 8002930:	d004      	beq.n	800293c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002936:	4ac1      	ldr	r2, [pc, #772]	; (8002c3c <HAL_ADC_ConfigChannel+0x35c>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d108      	bne.n	800294e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	0019      	movs	r1, r3
 8002946:	0010      	movs	r0, r2
 8002948:	f7ff fd75 	bl	8002436 <LL_ADC_REG_SetSequencerChAdd>
 800294c:	e0c9      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	211f      	movs	r1, #31
 8002958:	400b      	ands	r3, r1
 800295a:	210f      	movs	r1, #15
 800295c:	4099      	lsls	r1, r3
 800295e:	000b      	movs	r3, r1
 8002960:	43db      	mvns	r3, r3
 8002962:	4013      	ands	r3, r2
 8002964:	0019      	movs	r1, r3
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	035b      	lsls	r3, r3, #13
 800296c:	0b5b      	lsrs	r3, r3, #13
 800296e:	d105      	bne.n	800297c <HAL_ADC_ConfigChannel+0x9c>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	0e9b      	lsrs	r3, r3, #26
 8002976:	221f      	movs	r2, #31
 8002978:	4013      	ands	r3, r2
 800297a:	e098      	b.n	8002aae <HAL_ADC_ConfigChannel+0x1ce>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2201      	movs	r2, #1
 8002982:	4013      	ands	r3, r2
 8002984:	d000      	beq.n	8002988 <HAL_ADC_ConfigChannel+0xa8>
 8002986:	e091      	b.n	8002aac <HAL_ADC_ConfigChannel+0x1cc>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2202      	movs	r2, #2
 800298e:	4013      	ands	r3, r2
 8002990:	d000      	beq.n	8002994 <HAL_ADC_ConfigChannel+0xb4>
 8002992:	e089      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x1c8>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2204      	movs	r2, #4
 800299a:	4013      	ands	r3, r2
 800299c:	d000      	beq.n	80029a0 <HAL_ADC_ConfigChannel+0xc0>
 800299e:	e081      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x1c4>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2208      	movs	r2, #8
 80029a6:	4013      	ands	r3, r2
 80029a8:	d000      	beq.n	80029ac <HAL_ADC_ConfigChannel+0xcc>
 80029aa:	e079      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x1c0>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2210      	movs	r2, #16
 80029b2:	4013      	ands	r3, r2
 80029b4:	d000      	beq.n	80029b8 <HAL_ADC_ConfigChannel+0xd8>
 80029b6:	e071      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x1bc>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2220      	movs	r2, #32
 80029be:	4013      	ands	r3, r2
 80029c0:	d000      	beq.n	80029c4 <HAL_ADC_ConfigChannel+0xe4>
 80029c2:	e069      	b.n	8002a98 <HAL_ADC_ConfigChannel+0x1b8>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2240      	movs	r2, #64	; 0x40
 80029ca:	4013      	ands	r3, r2
 80029cc:	d000      	beq.n	80029d0 <HAL_ADC_ConfigChannel+0xf0>
 80029ce:	e061      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x1b4>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2280      	movs	r2, #128	; 0x80
 80029d6:	4013      	ands	r3, r2
 80029d8:	d000      	beq.n	80029dc <HAL_ADC_ConfigChannel+0xfc>
 80029da:	e059      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x1b0>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	2380      	movs	r3, #128	; 0x80
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	4013      	ands	r3, r2
 80029e6:	d151      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x1ac>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	2380      	movs	r3, #128	; 0x80
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4013      	ands	r3, r2
 80029f2:	d149      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x1a8>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	2380      	movs	r3, #128	; 0x80
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	4013      	ands	r3, r2
 80029fe:	d141      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x1a4>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	2380      	movs	r3, #128	; 0x80
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	4013      	ands	r3, r2
 8002a0a:	d139      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x1a0>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	2380      	movs	r3, #128	; 0x80
 8002a12:	015b      	lsls	r3, r3, #5
 8002a14:	4013      	ands	r3, r2
 8002a16:	d131      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x19c>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	2380      	movs	r3, #128	; 0x80
 8002a1e:	019b      	lsls	r3, r3, #6
 8002a20:	4013      	ands	r3, r2
 8002a22:	d129      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x198>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	2380      	movs	r3, #128	; 0x80
 8002a2a:	01db      	lsls	r3, r3, #7
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d121      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x194>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	2380      	movs	r3, #128	; 0x80
 8002a36:	021b      	lsls	r3, r3, #8
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d119      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x190>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	2380      	movs	r3, #128	; 0x80
 8002a42:	025b      	lsls	r3, r3, #9
 8002a44:	4013      	ands	r3, r2
 8002a46:	d111      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x18c>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	2380      	movs	r3, #128	; 0x80
 8002a4e:	029b      	lsls	r3, r3, #10
 8002a50:	4013      	ands	r3, r2
 8002a52:	d109      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x188>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	2380      	movs	r3, #128	; 0x80
 8002a5a:	02db      	lsls	r3, r3, #11
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d001      	beq.n	8002a64 <HAL_ADC_ConfigChannel+0x184>
 8002a60:	2312      	movs	r3, #18
 8002a62:	e024      	b.n	8002aae <HAL_ADC_ConfigChannel+0x1ce>
 8002a64:	2300      	movs	r3, #0
 8002a66:	e022      	b.n	8002aae <HAL_ADC_ConfigChannel+0x1ce>
 8002a68:	2311      	movs	r3, #17
 8002a6a:	e020      	b.n	8002aae <HAL_ADC_ConfigChannel+0x1ce>
 8002a6c:	2310      	movs	r3, #16
 8002a6e:	e01e      	b.n	8002aae <HAL_ADC_ConfigChannel+0x1ce>
 8002a70:	230f      	movs	r3, #15
 8002a72:	e01c      	b.n	8002aae <HAL_ADC_ConfigChannel+0x1ce>
 8002a74:	230e      	movs	r3, #14
 8002a76:	e01a      	b.n	8002aae <HAL_ADC_ConfigChannel+0x1ce>
 8002a78:	230d      	movs	r3, #13
 8002a7a:	e018      	b.n	8002aae <HAL_ADC_ConfigChannel+0x1ce>
 8002a7c:	230c      	movs	r3, #12
 8002a7e:	e016      	b.n	8002aae <HAL_ADC_ConfigChannel+0x1ce>
 8002a80:	230b      	movs	r3, #11
 8002a82:	e014      	b.n	8002aae <HAL_ADC_ConfigChannel+0x1ce>
 8002a84:	230a      	movs	r3, #10
 8002a86:	e012      	b.n	8002aae <HAL_ADC_ConfigChannel+0x1ce>
 8002a88:	2309      	movs	r3, #9
 8002a8a:	e010      	b.n	8002aae <HAL_ADC_ConfigChannel+0x1ce>
 8002a8c:	2308      	movs	r3, #8
 8002a8e:	e00e      	b.n	8002aae <HAL_ADC_ConfigChannel+0x1ce>
 8002a90:	2307      	movs	r3, #7
 8002a92:	e00c      	b.n	8002aae <HAL_ADC_ConfigChannel+0x1ce>
 8002a94:	2306      	movs	r3, #6
 8002a96:	e00a      	b.n	8002aae <HAL_ADC_ConfigChannel+0x1ce>
 8002a98:	2305      	movs	r3, #5
 8002a9a:	e008      	b.n	8002aae <HAL_ADC_ConfigChannel+0x1ce>
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	e006      	b.n	8002aae <HAL_ADC_ConfigChannel+0x1ce>
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e004      	b.n	8002aae <HAL_ADC_ConfigChannel+0x1ce>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e002      	b.n	8002aae <HAL_ADC_ConfigChannel+0x1ce>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <HAL_ADC_ConfigChannel+0x1ce>
 8002aac:	2300      	movs	r3, #0
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	6852      	ldr	r2, [r2, #4]
 8002ab2:	201f      	movs	r0, #31
 8002ab4:	4002      	ands	r2, r0
 8002ab6:	4093      	lsls	r3, r2
 8002ab8:	000a      	movs	r2, r1
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	089b      	lsrs	r3, r3, #2
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d808      	bhi.n	8002ae2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6818      	ldr	r0, [r3, #0]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	6859      	ldr	r1, [r3, #4]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	001a      	movs	r2, r3
 8002ade:	f7ff fc8a 	bl	80023f6 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6818      	ldr	r0, [r3, #0]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	6819      	ldr	r1, [r3, #0]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	001a      	movs	r2, r3
 8002af0:	f7ff fcc4 	bl	800247c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	db00      	blt.n	8002afe <HAL_ADC_ConfigChannel+0x21e>
 8002afc:	e0bc      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002afe:	4b50      	ldr	r3, [pc, #320]	; (8002c40 <HAL_ADC_ConfigChannel+0x360>)
 8002b00:	0018      	movs	r0, r3
 8002b02:	f7ff fc37 	bl	8002374 <LL_ADC_GetCommonPathInternalCh>
 8002b06:	0003      	movs	r3, r0
 8002b08:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a4d      	ldr	r2, [pc, #308]	; (8002c44 <HAL_ADC_ConfigChannel+0x364>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d122      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	2380      	movs	r3, #128	; 0x80
 8002b18:	041b      	lsls	r3, r3, #16
 8002b1a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b1c:	d11d      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	2280      	movs	r2, #128	; 0x80
 8002b22:	0412      	lsls	r2, r2, #16
 8002b24:	4313      	orrs	r3, r2
 8002b26:	4a46      	ldr	r2, [pc, #280]	; (8002c40 <HAL_ADC_ConfigChannel+0x360>)
 8002b28:	0019      	movs	r1, r3
 8002b2a:	0010      	movs	r0, r2
 8002b2c:	f7ff fc0e 	bl	800234c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b30:	4b45      	ldr	r3, [pc, #276]	; (8002c48 <HAL_ADC_ConfigChannel+0x368>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4945      	ldr	r1, [pc, #276]	; (8002c4c <HAL_ADC_ConfigChannel+0x36c>)
 8002b36:	0018      	movs	r0, r3
 8002b38:	f7fd fae2 	bl	8000100 <__udivsi3>
 8002b3c:	0003      	movs	r3, r0
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	0013      	movs	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	189b      	adds	r3, r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b4a:	e002      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1f9      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b58:	e08e      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a3c      	ldr	r2, [pc, #240]	; (8002c50 <HAL_ADC_ConfigChannel+0x370>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d10e      	bne.n	8002b82 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	2380      	movs	r3, #128	; 0x80
 8002b68:	045b      	lsls	r3, r3, #17
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d109      	bne.n	8002b82 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	2280      	movs	r2, #128	; 0x80
 8002b72:	0452      	lsls	r2, r2, #17
 8002b74:	4313      	orrs	r3, r2
 8002b76:	4a32      	ldr	r2, [pc, #200]	; (8002c40 <HAL_ADC_ConfigChannel+0x360>)
 8002b78:	0019      	movs	r1, r3
 8002b7a:	0010      	movs	r0, r2
 8002b7c:	f7ff fbe6 	bl	800234c <LL_ADC_SetCommonPathInternalCh>
 8002b80:	e07a      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a33      	ldr	r2, [pc, #204]	; (8002c54 <HAL_ADC_ConfigChannel+0x374>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d000      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x2ae>
 8002b8c:	e074      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	03db      	lsls	r3, r3, #15
 8002b94:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002b96:	d000      	beq.n	8002b9a <HAL_ADC_ConfigChannel+0x2ba>
 8002b98:	e06e      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	2280      	movs	r2, #128	; 0x80
 8002b9e:	03d2      	lsls	r2, r2, #15
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	4a27      	ldr	r2, [pc, #156]	; (8002c40 <HAL_ADC_ConfigChannel+0x360>)
 8002ba4:	0019      	movs	r1, r3
 8002ba6:	0010      	movs	r0, r2
 8002ba8:	f7ff fbd0 	bl	800234c <LL_ADC_SetCommonPathInternalCh>
 8002bac:	e064      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691a      	ldr	r2, [r3, #16]
 8002bb2:	2380      	movs	r3, #128	; 0x80
 8002bb4:	061b      	lsls	r3, r3, #24
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d004      	beq.n	8002bc4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002bbe:	4a1f      	ldr	r2, [pc, #124]	; (8002c3c <HAL_ADC_ConfigChannel+0x35c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d107      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	0019      	movs	r1, r3
 8002bce:	0010      	movs	r0, r2
 8002bd0:	f7ff fc42 	bl	8002458 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	da4d      	bge.n	8002c78 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bdc:	4b18      	ldr	r3, [pc, #96]	; (8002c40 <HAL_ADC_ConfigChannel+0x360>)
 8002bde:	0018      	movs	r0, r3
 8002be0:	f7ff fbc8 	bl	8002374 <LL_ADC_GetCommonPathInternalCh>
 8002be4:	0003      	movs	r3, r0
 8002be6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a15      	ldr	r2, [pc, #84]	; (8002c44 <HAL_ADC_ConfigChannel+0x364>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d108      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	4a18      	ldr	r2, [pc, #96]	; (8002c58 <HAL_ADC_ConfigChannel+0x378>)
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	4a11      	ldr	r2, [pc, #68]	; (8002c40 <HAL_ADC_ConfigChannel+0x360>)
 8002bfa:	0019      	movs	r1, r3
 8002bfc:	0010      	movs	r0, r2
 8002bfe:	f7ff fba5 	bl	800234c <LL_ADC_SetCommonPathInternalCh>
 8002c02:	e039      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a11      	ldr	r2, [pc, #68]	; (8002c50 <HAL_ADC_ConfigChannel+0x370>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d108      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	4a12      	ldr	r2, [pc, #72]	; (8002c5c <HAL_ADC_ConfigChannel+0x37c>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	4a0a      	ldr	r2, [pc, #40]	; (8002c40 <HAL_ADC_ConfigChannel+0x360>)
 8002c16:	0019      	movs	r1, r3
 8002c18:	0010      	movs	r0, r2
 8002c1a:	f7ff fb97 	bl	800234c <LL_ADC_SetCommonPathInternalCh>
 8002c1e:	e02b      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a0b      	ldr	r2, [pc, #44]	; (8002c54 <HAL_ADC_ConfigChannel+0x374>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d126      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4a0c      	ldr	r2, [pc, #48]	; (8002c60 <HAL_ADC_ConfigChannel+0x380>)
 8002c2e:	4013      	ands	r3, r2
 8002c30:	4a03      	ldr	r2, [pc, #12]	; (8002c40 <HAL_ADC_ConfigChannel+0x360>)
 8002c32:	0019      	movs	r1, r3
 8002c34:	0010      	movs	r0, r2
 8002c36:	f7ff fb89 	bl	800234c <LL_ADC_SetCommonPathInternalCh>
 8002c3a:	e01d      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x398>
 8002c3c:	80000004 	.word	0x80000004
 8002c40:	40012708 	.word	0x40012708
 8002c44:	b0001000 	.word	0xb0001000
 8002c48:	20000004 	.word	0x20000004
 8002c4c:	00030d40 	.word	0x00030d40
 8002c50:	b8004000 	.word	0xb8004000
 8002c54:	b4002000 	.word	0xb4002000
 8002c58:	ff7fffff 	.word	0xff7fffff
 8002c5c:	feffffff 	.word	0xfeffffff
 8002c60:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c68:	2220      	movs	r2, #32
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c70:	2317      	movs	r3, #23
 8002c72:	18fb      	adds	r3, r7, r3
 8002c74:	2201      	movs	r2, #1
 8002c76:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2254      	movs	r2, #84	; 0x54
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002c80:	2317      	movs	r3, #23
 8002c82:	18fb      	adds	r3, r7, r3
 8002c84:	781b      	ldrb	r3, [r3, #0]
}
 8002c86:	0018      	movs	r0, r3
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b006      	add	sp, #24
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	46c0      	nop			; (mov r8, r8)

08002c90 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f7ff fc54 	bl	800254a <LL_ADC_IsDisableOngoing>
 8002ca2:	0003      	movs	r3, r0
 8002ca4:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	0018      	movs	r0, r3
 8002cac:	f7ff fc3c 	bl	8002528 <LL_ADC_IsEnabled>
 8002cb0:	1e03      	subs	r3, r0, #0
 8002cb2:	d046      	beq.n	8002d42 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d143      	bne.n	8002d42 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2205      	movs	r2, #5
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d10d      	bne.n	8002ce4 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f7ff fc19 	bl	8002504 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2203      	movs	r2, #3
 8002cd8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cda:	f7ff faf3 	bl	80022c4 <HAL_GetTick>
 8002cde:	0003      	movs	r3, r0
 8002ce0:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ce2:	e028      	b.n	8002d36 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce8:	2210      	movs	r2, #16
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e021      	b.n	8002d44 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d00:	f7ff fae0 	bl	80022c4 <HAL_GetTick>
 8002d04:	0002      	movs	r2, r0
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d913      	bls.n	8002d36 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	2201      	movs	r2, #1
 8002d16:	4013      	ands	r3, r2
 8002d18:	d00d      	beq.n	8002d36 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1e:	2210      	movs	r2, #16
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e006      	b.n	8002d44 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d1de      	bne.n	8002d00 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	0018      	movs	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b004      	add	sp, #16
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <LL_ADC_SetCalibrationFactor>:
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	22b4      	movs	r2, #180	; 0xb4
 8002d5a:	589b      	ldr	r3, [r3, r2]
 8002d5c:	227f      	movs	r2, #127	; 0x7f
 8002d5e:	4393      	bics	r3, r2
 8002d60:	001a      	movs	r2, r3
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	21b4      	movs	r1, #180	; 0xb4
 8002d6a:	505a      	str	r2, [r3, r1]
}
 8002d6c:	46c0      	nop			; (mov r8, r8)
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b002      	add	sp, #8
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <LL_ADC_GetCalibrationFactor>:
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	22b4      	movs	r2, #180	; 0xb4
 8002d80:	589b      	ldr	r3, [r3, r2]
 8002d82:	227f      	movs	r2, #127	; 0x7f
 8002d84:	4013      	ands	r3, r2
}
 8002d86:	0018      	movs	r0, r3
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	b002      	add	sp, #8
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <LL_ADC_Enable>:
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4a04      	ldr	r2, [pc, #16]	; (8002db0 <LL_ADC_Enable+0x20>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2201      	movs	r2, #1
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	609a      	str	r2, [r3, #8]
}
 8002da8:	46c0      	nop			; (mov r8, r8)
 8002daa:	46bd      	mov	sp, r7
 8002dac:	b002      	add	sp, #8
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	7fffffe8 	.word	0x7fffffe8

08002db4 <LL_ADC_Disable>:
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	4a04      	ldr	r2, [pc, #16]	; (8002dd4 <LL_ADC_Disable+0x20>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	609a      	str	r2, [r3, #8]
}
 8002dcc:	46c0      	nop			; (mov r8, r8)
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b002      	add	sp, #8
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	7fffffe8 	.word	0x7fffffe8

08002dd8 <LL_ADC_IsEnabled>:
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	2201      	movs	r2, #1
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d101      	bne.n	8002df0 <LL_ADC_IsEnabled+0x18>
 8002dec:	2301      	movs	r3, #1
 8002dee:	e000      	b.n	8002df2 <LL_ADC_IsEnabled+0x1a>
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	0018      	movs	r0, r3
 8002df4:	46bd      	mov	sp, r7
 8002df6:	b002      	add	sp, #8
 8002df8:	bd80      	pop	{r7, pc}
	...

08002dfc <LL_ADC_StartCalibration>:
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	4a05      	ldr	r2, [pc, #20]	; (8002e20 <LL_ADC_StartCalibration+0x24>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2280      	movs	r2, #128	; 0x80
 8002e0e:	0612      	lsls	r2, r2, #24
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	609a      	str	r2, [r3, #8]
}
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	b002      	add	sp, #8
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	7fffffe8 	.word	0x7fffffe8

08002e24 <LL_ADC_IsCalibrationOnGoing>:
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	0fdb      	lsrs	r3, r3, #31
 8002e32:	07da      	lsls	r2, r3, #31
 8002e34:	2380      	movs	r3, #128	; 0x80
 8002e36:	061b      	lsls	r3, r3, #24
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d101      	bne.n	8002e40 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	0018      	movs	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b002      	add	sp, #8
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002e4c:	b590      	push	{r4, r7, lr}
 8002e4e:	b089      	sub	sp, #36	; 0x24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2254      	movs	r2, #84	; 0x54
 8002e60:	5c9b      	ldrb	r3, [r3, r2]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_ADCEx_Calibration_Start+0x1e>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e0ba      	b.n	8002fe0 <HAL_ADCEx_Calibration_Start+0x194>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2254      	movs	r2, #84	; 0x54
 8002e6e:	2101      	movs	r1, #1
 8002e70:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002e72:	2317      	movs	r3, #23
 8002e74:	18fc      	adds	r4, r7, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f7ff ff09 	bl	8002c90 <ADC_Disable>
 8002e7e:	0003      	movs	r3, r0
 8002e80:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	0018      	movs	r0, r3
 8002e88:	f7ff ffa6 	bl	8002dd8 <LL_ADC_IsEnabled>
 8002e8c:	1e03      	subs	r3, r0, #0
 8002e8e:	d000      	beq.n	8002e92 <HAL_ADCEx_Calibration_Start+0x46>
 8002e90:	e099      	b.n	8002fc6 <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e96:	4a54      	ldr	r2, [pc, #336]	; (8002fe8 <HAL_ADCEx_Calibration_Start+0x19c>)
 8002e98:	4013      	ands	r3, r2
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	4a50      	ldr	r2, [pc, #320]	; (8002fec <HAL_ADCEx_Calibration_Start+0x1a0>)
 8002eaa:	4013      	ands	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	494d      	ldr	r1, [pc, #308]	; (8002ff0 <HAL_ADCEx_Calibration_Start+0x1a4>)
 8002eba:	400a      	ands	r2, r1
 8002ebc:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61fb      	str	r3, [r7, #28]
 8002ec2:	e02d      	b.n	8002f20 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f7ff ff97 	bl	8002dfc <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002ece:	e014      	b.n	8002efa <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	4a46      	ldr	r2, [pc, #280]	; (8002ff4 <HAL_ADCEx_Calibration_Start+0x1a8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d90d      	bls.n	8002efa <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee2:	2212      	movs	r2, #18
 8002ee4:	4393      	bics	r3, r2
 8002ee6:	2210      	movs	r2, #16
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2254      	movs	r2, #84	; 0x54
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e072      	b.n	8002fe0 <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	0018      	movs	r0, r3
 8002f00:	f7ff ff90 	bl	8002e24 <LL_ADC_IsCalibrationOnGoing>
 8002f04:	1e03      	subs	r3, r0, #0
 8002f06:	d1e3      	bne.n	8002ed0 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f7ff ff31 	bl	8002d74 <LL_ADC_GetCalibrationFactor>
 8002f12:	0002      	movs	r2, r0
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	189b      	adds	r3, r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	61fb      	str	r3, [r7, #28]
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	2b07      	cmp	r3, #7
 8002f24:	d9ce      	bls.n	8002ec4 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8002f26:	69f9      	ldr	r1, [r7, #28]
 8002f28:	69b8      	ldr	r0, [r7, #24]
 8002f2a:	f7fd f8e9 	bl	8000100 <__udivsi3>
 8002f2e:	0003      	movs	r3, r0
 8002f30:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	0018      	movs	r0, r3
 8002f38:	f7ff ff2a 	bl	8002d90 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	0011      	movs	r1, r2
 8002f44:	0018      	movs	r0, r3
 8002f46:	f7ff ff01 	bl	8002d4c <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f7ff ff30 	bl	8002db4 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f54:	f7ff f9b6 	bl	80022c4 <HAL_GetTick>
 8002f58:	0003      	movs	r3, r0
 8002f5a:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f5c:	e01b      	b.n	8002f96 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f5e:	f7ff f9b1 	bl	80022c4 <HAL_GetTick>
 8002f62:	0002      	movs	r2, r0
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d914      	bls.n	8002f96 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	0018      	movs	r0, r3
 8002f72:	f7ff ff31 	bl	8002dd8 <LL_ADC_IsEnabled>
 8002f76:	1e03      	subs	r3, r0, #0
 8002f78:	d00d      	beq.n	8002f96 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7e:	2210      	movs	r2, #16
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e024      	b.n	8002fe0 <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f7ff ff1c 	bl	8002dd8 <LL_ADC_IsEnabled>
 8002fa0:	1e03      	subs	r3, r0, #0
 8002fa2:	d1dc      	bne.n	8002f5e <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68d9      	ldr	r1, [r3, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb8:	2203      	movs	r2, #3
 8002fba:	4393      	bics	r3, r2
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	659a      	str	r2, [r3, #88]	; 0x58
 8002fc4:	e005      	b.n	8002fd2 <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fca:	2210      	movs	r2, #16
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2254      	movs	r2, #84	; 0x54
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002fda:	2317      	movs	r3, #23
 8002fdc:	18fb      	adds	r3, r7, r3
 8002fde:	781b      	ldrb	r3, [r3, #0]
}
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b009      	add	sp, #36	; 0x24
 8002fe6:	bd90      	pop	{r4, r7, pc}
 8002fe8:	fffffefd 	.word	0xfffffefd
 8002fec:	00008003 	.word	0x00008003
 8002ff0:	ffff7ffc 	.word	0xffff7ffc
 8002ff4:	0002f1ff 	.word	0x0002f1ff

08002ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	0002      	movs	r2, r0
 8003000:	1dfb      	adds	r3, r7, #7
 8003002:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003004:	1dfb      	adds	r3, r7, #7
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b7f      	cmp	r3, #127	; 0x7f
 800300a:	d809      	bhi.n	8003020 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800300c:	1dfb      	adds	r3, r7, #7
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	001a      	movs	r2, r3
 8003012:	231f      	movs	r3, #31
 8003014:	401a      	ands	r2, r3
 8003016:	4b04      	ldr	r3, [pc, #16]	; (8003028 <__NVIC_EnableIRQ+0x30>)
 8003018:	2101      	movs	r1, #1
 800301a:	4091      	lsls	r1, r2
 800301c:	000a      	movs	r2, r1
 800301e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003020:	46c0      	nop			; (mov r8, r8)
 8003022:	46bd      	mov	sp, r7
 8003024:	b002      	add	sp, #8
 8003026:	bd80      	pop	{r7, pc}
 8003028:	e000e100 	.word	0xe000e100

0800302c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800302c:	b590      	push	{r4, r7, lr}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	0002      	movs	r2, r0
 8003034:	6039      	str	r1, [r7, #0]
 8003036:	1dfb      	adds	r3, r7, #7
 8003038:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800303a:	1dfb      	adds	r3, r7, #7
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b7f      	cmp	r3, #127	; 0x7f
 8003040:	d828      	bhi.n	8003094 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003042:	4a2f      	ldr	r2, [pc, #188]	; (8003100 <__NVIC_SetPriority+0xd4>)
 8003044:	1dfb      	adds	r3, r7, #7
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	b25b      	sxtb	r3, r3
 800304a:	089b      	lsrs	r3, r3, #2
 800304c:	33c0      	adds	r3, #192	; 0xc0
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	589b      	ldr	r3, [r3, r2]
 8003052:	1dfa      	adds	r2, r7, #7
 8003054:	7812      	ldrb	r2, [r2, #0]
 8003056:	0011      	movs	r1, r2
 8003058:	2203      	movs	r2, #3
 800305a:	400a      	ands	r2, r1
 800305c:	00d2      	lsls	r2, r2, #3
 800305e:	21ff      	movs	r1, #255	; 0xff
 8003060:	4091      	lsls	r1, r2
 8003062:	000a      	movs	r2, r1
 8003064:	43d2      	mvns	r2, r2
 8003066:	401a      	ands	r2, r3
 8003068:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	019b      	lsls	r3, r3, #6
 800306e:	22ff      	movs	r2, #255	; 0xff
 8003070:	401a      	ands	r2, r3
 8003072:	1dfb      	adds	r3, r7, #7
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	0018      	movs	r0, r3
 8003078:	2303      	movs	r3, #3
 800307a:	4003      	ands	r3, r0
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003080:	481f      	ldr	r0, [pc, #124]	; (8003100 <__NVIC_SetPriority+0xd4>)
 8003082:	1dfb      	adds	r3, r7, #7
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	b25b      	sxtb	r3, r3
 8003088:	089b      	lsrs	r3, r3, #2
 800308a:	430a      	orrs	r2, r1
 800308c:	33c0      	adds	r3, #192	; 0xc0
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003092:	e031      	b.n	80030f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003094:	4a1b      	ldr	r2, [pc, #108]	; (8003104 <__NVIC_SetPriority+0xd8>)
 8003096:	1dfb      	adds	r3, r7, #7
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	0019      	movs	r1, r3
 800309c:	230f      	movs	r3, #15
 800309e:	400b      	ands	r3, r1
 80030a0:	3b08      	subs	r3, #8
 80030a2:	089b      	lsrs	r3, r3, #2
 80030a4:	3306      	adds	r3, #6
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	18d3      	adds	r3, r2, r3
 80030aa:	3304      	adds	r3, #4
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	1dfa      	adds	r2, r7, #7
 80030b0:	7812      	ldrb	r2, [r2, #0]
 80030b2:	0011      	movs	r1, r2
 80030b4:	2203      	movs	r2, #3
 80030b6:	400a      	ands	r2, r1
 80030b8:	00d2      	lsls	r2, r2, #3
 80030ba:	21ff      	movs	r1, #255	; 0xff
 80030bc:	4091      	lsls	r1, r2
 80030be:	000a      	movs	r2, r1
 80030c0:	43d2      	mvns	r2, r2
 80030c2:	401a      	ands	r2, r3
 80030c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	019b      	lsls	r3, r3, #6
 80030ca:	22ff      	movs	r2, #255	; 0xff
 80030cc:	401a      	ands	r2, r3
 80030ce:	1dfb      	adds	r3, r7, #7
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	0018      	movs	r0, r3
 80030d4:	2303      	movs	r3, #3
 80030d6:	4003      	ands	r3, r0
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030dc:	4809      	ldr	r0, [pc, #36]	; (8003104 <__NVIC_SetPriority+0xd8>)
 80030de:	1dfb      	adds	r3, r7, #7
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	001c      	movs	r4, r3
 80030e4:	230f      	movs	r3, #15
 80030e6:	4023      	ands	r3, r4
 80030e8:	3b08      	subs	r3, #8
 80030ea:	089b      	lsrs	r3, r3, #2
 80030ec:	430a      	orrs	r2, r1
 80030ee:	3306      	adds	r3, #6
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	18c3      	adds	r3, r0, r3
 80030f4:	3304      	adds	r3, #4
 80030f6:	601a      	str	r2, [r3, #0]
}
 80030f8:	46c0      	nop			; (mov r8, r8)
 80030fa:	46bd      	mov	sp, r7
 80030fc:	b003      	add	sp, #12
 80030fe:	bd90      	pop	{r4, r7, pc}
 8003100:	e000e100 	.word	0xe000e100
 8003104:	e000ed00 	.word	0xe000ed00

08003108 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	60b9      	str	r1, [r7, #8]
 8003110:	607a      	str	r2, [r7, #4]
 8003112:	210f      	movs	r1, #15
 8003114:	187b      	adds	r3, r7, r1
 8003116:	1c02      	adds	r2, r0, #0
 8003118:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	187b      	adds	r3, r7, r1
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	b25b      	sxtb	r3, r3
 8003122:	0011      	movs	r1, r2
 8003124:	0018      	movs	r0, r3
 8003126:	f7ff ff81 	bl	800302c <__NVIC_SetPriority>
}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	46bd      	mov	sp, r7
 800312e:	b004      	add	sp, #16
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	0002      	movs	r2, r0
 800313a:	1dfb      	adds	r3, r7, #7
 800313c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800313e:	1dfb      	adds	r3, r7, #7
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	b25b      	sxtb	r3, r3
 8003144:	0018      	movs	r0, r3
 8003146:	f7ff ff57 	bl	8002ff8 <__NVIC_EnableIRQ>
}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	46bd      	mov	sp, r7
 800314e:	b002      	add	sp, #8
 8003150:	bd80      	pop	{r7, pc}
	...

08003154 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e077      	b.n	8003256 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a3d      	ldr	r2, [pc, #244]	; (8003260 <HAL_DMA_Init+0x10c>)
 800316c:	4694      	mov	ip, r2
 800316e:	4463      	add	r3, ip
 8003170:	2114      	movs	r1, #20
 8003172:	0018      	movs	r0, r3
 8003174:	f7fc ffc4 	bl	8000100 <__udivsi3>
 8003178:	0003      	movs	r3, r0
 800317a:	009a      	lsls	r2, r3, #2
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2225      	movs	r2, #37	; 0x25
 8003184:	2102      	movs	r1, #2
 8003186:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4934      	ldr	r1, [pc, #208]	; (8003264 <HAL_DMA_Init+0x110>)
 8003194:	400a      	ands	r2, r1
 8003196:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6819      	ldr	r1, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	431a      	orrs	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	431a      	orrs	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	431a      	orrs	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	431a      	orrs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	0018      	movs	r0, r3
 80031d2:	f000 f8fb 	bl	80033cc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	2380      	movs	r3, #128	; 0x80
 80031dc:	01db      	lsls	r3, r3, #7
 80031de:	429a      	cmp	r2, r3
 80031e0:	d102      	bne.n	80031e8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f0:	213f      	movs	r1, #63	; 0x3f
 80031f2:	400a      	ands	r2, r1
 80031f4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80031fe:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d011      	beq.n	800322c <HAL_DMA_Init+0xd8>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b04      	cmp	r3, #4
 800320e:	d80d      	bhi.n	800322c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	0018      	movs	r0, r3
 8003214:	f000 f906 	bl	8003424 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003228:	605a      	str	r2, [r3, #4]
 800322a:	e008      	b.n	800323e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2225      	movs	r2, #37	; 0x25
 8003248:	2101      	movs	r1, #1
 800324a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2224      	movs	r2, #36	; 0x24
 8003250:	2100      	movs	r1, #0
 8003252:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	0018      	movs	r0, r3
 8003258:	46bd      	mov	sp, r7
 800325a:	b002      	add	sp, #8
 800325c:	bd80      	pop	{r7, pc}
 800325e:	46c0      	nop			; (mov r8, r8)
 8003260:	bffdfff8 	.word	0xbffdfff8
 8003264:	ffff800f 	.word	0xffff800f

08003268 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003270:	4b55      	ldr	r3, [pc, #340]	; (80033c8 <HAL_DMA_IRQHandler+0x160>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	221c      	movs	r2, #28
 8003284:	4013      	ands	r3, r2
 8003286:	2204      	movs	r2, #4
 8003288:	409a      	lsls	r2, r3
 800328a:	0013      	movs	r3, r2
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	4013      	ands	r3, r2
 8003290:	d027      	beq.n	80032e2 <HAL_DMA_IRQHandler+0x7a>
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2204      	movs	r2, #4
 8003296:	4013      	ands	r3, r2
 8003298:	d023      	beq.n	80032e2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2220      	movs	r2, #32
 80032a2:	4013      	ands	r3, r2
 80032a4:	d107      	bne.n	80032b6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2104      	movs	r1, #4
 80032b2:	438a      	bics	r2, r1
 80032b4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80032b6:	4b44      	ldr	r3, [pc, #272]	; (80033c8 <HAL_DMA_IRQHandler+0x160>)
 80032b8:	6859      	ldr	r1, [r3, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	221c      	movs	r2, #28
 80032c0:	4013      	ands	r3, r2
 80032c2:	2204      	movs	r2, #4
 80032c4:	409a      	lsls	r2, r3
 80032c6:	4b40      	ldr	r3, [pc, #256]	; (80033c8 <HAL_DMA_IRQHandler+0x160>)
 80032c8:	430a      	orrs	r2, r1
 80032ca:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d100      	bne.n	80032d6 <HAL_DMA_IRQHandler+0x6e>
 80032d4:	e073      	b.n	80033be <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	0010      	movs	r0, r2
 80032de:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80032e0:	e06d      	b.n	80033be <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	221c      	movs	r2, #28
 80032e8:	4013      	ands	r3, r2
 80032ea:	2202      	movs	r2, #2
 80032ec:	409a      	lsls	r2, r3
 80032ee:	0013      	movs	r3, r2
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	4013      	ands	r3, r2
 80032f4:	d02e      	beq.n	8003354 <HAL_DMA_IRQHandler+0xec>
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2202      	movs	r2, #2
 80032fa:	4013      	ands	r3, r2
 80032fc:	d02a      	beq.n	8003354 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2220      	movs	r2, #32
 8003306:	4013      	ands	r3, r2
 8003308:	d10b      	bne.n	8003322 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	210a      	movs	r1, #10
 8003316:	438a      	bics	r2, r1
 8003318:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2225      	movs	r2, #37	; 0x25
 800331e:	2101      	movs	r1, #1
 8003320:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003322:	4b29      	ldr	r3, [pc, #164]	; (80033c8 <HAL_DMA_IRQHandler+0x160>)
 8003324:	6859      	ldr	r1, [r3, #4]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	221c      	movs	r2, #28
 800332c:	4013      	ands	r3, r2
 800332e:	2202      	movs	r2, #2
 8003330:	409a      	lsls	r2, r3
 8003332:	4b25      	ldr	r3, [pc, #148]	; (80033c8 <HAL_DMA_IRQHandler+0x160>)
 8003334:	430a      	orrs	r2, r1
 8003336:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2224      	movs	r2, #36	; 0x24
 800333c:	2100      	movs	r1, #0
 800333e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	2b00      	cmp	r3, #0
 8003346:	d03a      	beq.n	80033be <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	0010      	movs	r0, r2
 8003350:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003352:	e034      	b.n	80033be <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	221c      	movs	r2, #28
 800335a:	4013      	ands	r3, r2
 800335c:	2208      	movs	r2, #8
 800335e:	409a      	lsls	r2, r3
 8003360:	0013      	movs	r3, r2
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4013      	ands	r3, r2
 8003366:	d02b      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x158>
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2208      	movs	r2, #8
 800336c:	4013      	ands	r3, r2
 800336e:	d027      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	210e      	movs	r1, #14
 800337c:	438a      	bics	r2, r1
 800337e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003380:	4b11      	ldr	r3, [pc, #68]	; (80033c8 <HAL_DMA_IRQHandler+0x160>)
 8003382:	6859      	ldr	r1, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	221c      	movs	r2, #28
 800338a:	4013      	ands	r3, r2
 800338c:	2201      	movs	r2, #1
 800338e:	409a      	lsls	r2, r3
 8003390:	4b0d      	ldr	r3, [pc, #52]	; (80033c8 <HAL_DMA_IRQHandler+0x160>)
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2225      	movs	r2, #37	; 0x25
 80033a0:	2101      	movs	r1, #1
 80033a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2224      	movs	r2, #36	; 0x24
 80033a8:	2100      	movs	r1, #0
 80033aa:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	0010      	movs	r0, r2
 80033bc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	46c0      	nop			; (mov r8, r8)
}
 80033c2:	46bd      	mov	sp, r7
 80033c4:	b004      	add	sp, #16
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40020000 	.word	0x40020000

080033cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	089b      	lsrs	r3, r3, #2
 80033da:	4a10      	ldr	r2, [pc, #64]	; (800341c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80033dc:	4694      	mov	ip, r2
 80033de:	4463      	add	r3, ip
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	001a      	movs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	001a      	movs	r2, r3
 80033ee:	23ff      	movs	r3, #255	; 0xff
 80033f0:	4013      	ands	r3, r2
 80033f2:	3b08      	subs	r3, #8
 80033f4:	2114      	movs	r1, #20
 80033f6:	0018      	movs	r0, r3
 80033f8:	f7fc fe82 	bl	8000100 <__udivsi3>
 80033fc:	0003      	movs	r3, r0
 80033fe:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a07      	ldr	r2, [pc, #28]	; (8003420 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003404:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	221f      	movs	r2, #31
 800340a:	4013      	ands	r3, r2
 800340c:	2201      	movs	r2, #1
 800340e:	409a      	lsls	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003414:	46c0      	nop			; (mov r8, r8)
 8003416:	46bd      	mov	sp, r7
 8003418:	b004      	add	sp, #16
 800341a:	bd80      	pop	{r7, pc}
 800341c:	10008200 	.word	0x10008200
 8003420:	40020880 	.word	0x40020880

08003424 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	223f      	movs	r2, #63	; 0x3f
 8003432:	4013      	ands	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4a0a      	ldr	r2, [pc, #40]	; (8003464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800343a:	4694      	mov	ip, r2
 800343c:	4463      	add	r3, ip
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	001a      	movs	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a07      	ldr	r2, [pc, #28]	; (8003468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800344a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	3b01      	subs	r3, #1
 8003450:	2203      	movs	r2, #3
 8003452:	4013      	ands	r3, r2
 8003454:	2201      	movs	r2, #1
 8003456:	409a      	lsls	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800345c:	46c0      	nop			; (mov r8, r8)
 800345e:	46bd      	mov	sp, r7
 8003460:	b004      	add	sp, #16
 8003462:	bd80      	pop	{r7, pc}
 8003464:	1000823f 	.word	0x1000823f
 8003468:	40020940 	.word	0x40020940

0800346c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003476:	2300      	movs	r3, #0
 8003478:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800347a:	e147      	b.n	800370c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2101      	movs	r1, #1
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	4091      	lsls	r1, r2
 8003486:	000a      	movs	r2, r1
 8003488:	4013      	ands	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d100      	bne.n	8003494 <HAL_GPIO_Init+0x28>
 8003492:	e138      	b.n	8003706 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2203      	movs	r2, #3
 800349a:	4013      	ands	r3, r2
 800349c:	2b01      	cmp	r3, #1
 800349e:	d005      	beq.n	80034ac <HAL_GPIO_Init+0x40>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2203      	movs	r2, #3
 80034a6:	4013      	ands	r3, r2
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d130      	bne.n	800350e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	2203      	movs	r2, #3
 80034b8:	409a      	lsls	r2, r3
 80034ba:	0013      	movs	r3, r2
 80034bc:	43da      	mvns	r2, r3
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	4013      	ands	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	409a      	lsls	r2, r3
 80034ce:	0013      	movs	r3, r2
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034e2:	2201      	movs	r2, #1
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	409a      	lsls	r2, r3
 80034e8:	0013      	movs	r3, r2
 80034ea:	43da      	mvns	r2, r3
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	4013      	ands	r3, r2
 80034f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	091b      	lsrs	r3, r3, #4
 80034f8:	2201      	movs	r2, #1
 80034fa:	401a      	ands	r2, r3
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	409a      	lsls	r2, r3
 8003500:	0013      	movs	r3, r2
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	4313      	orrs	r3, r2
 8003506:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2203      	movs	r2, #3
 8003514:	4013      	ands	r3, r2
 8003516:	2b03      	cmp	r3, #3
 8003518:	d017      	beq.n	800354a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	2203      	movs	r2, #3
 8003526:	409a      	lsls	r2, r3
 8003528:	0013      	movs	r3, r2
 800352a:	43da      	mvns	r2, r3
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	4013      	ands	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	409a      	lsls	r2, r3
 800353c:	0013      	movs	r3, r2
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4313      	orrs	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2203      	movs	r2, #3
 8003550:	4013      	ands	r3, r2
 8003552:	2b02      	cmp	r3, #2
 8003554:	d123      	bne.n	800359e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	08da      	lsrs	r2, r3, #3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3208      	adds	r2, #8
 800355e:	0092      	lsls	r2, r2, #2
 8003560:	58d3      	ldr	r3, [r2, r3]
 8003562:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	2207      	movs	r2, #7
 8003568:	4013      	ands	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	220f      	movs	r2, #15
 800356e:	409a      	lsls	r2, r3
 8003570:	0013      	movs	r3, r2
 8003572:	43da      	mvns	r2, r3
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	4013      	ands	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	691a      	ldr	r2, [r3, #16]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2107      	movs	r1, #7
 8003582:	400b      	ands	r3, r1
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	409a      	lsls	r2, r3
 8003588:	0013      	movs	r3, r2
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	08da      	lsrs	r2, r3, #3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3208      	adds	r2, #8
 8003598:	0092      	lsls	r2, r2, #2
 800359a:	6939      	ldr	r1, [r7, #16]
 800359c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	2203      	movs	r2, #3
 80035aa:	409a      	lsls	r2, r3
 80035ac:	0013      	movs	r3, r2
 80035ae:	43da      	mvns	r2, r3
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	4013      	ands	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2203      	movs	r2, #3
 80035bc:	401a      	ands	r2, r3
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	409a      	lsls	r2, r3
 80035c4:	0013      	movs	r3, r2
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	23c0      	movs	r3, #192	; 0xc0
 80035d8:	029b      	lsls	r3, r3, #10
 80035da:	4013      	ands	r3, r2
 80035dc:	d100      	bne.n	80035e0 <HAL_GPIO_Init+0x174>
 80035de:	e092      	b.n	8003706 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80035e0:	4a50      	ldr	r2, [pc, #320]	; (8003724 <HAL_GPIO_Init+0x2b8>)
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	089b      	lsrs	r3, r3, #2
 80035e6:	3318      	adds	r3, #24
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	589b      	ldr	r3, [r3, r2]
 80035ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2203      	movs	r2, #3
 80035f2:	4013      	ands	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	220f      	movs	r2, #15
 80035f8:	409a      	lsls	r2, r3
 80035fa:	0013      	movs	r3, r2
 80035fc:	43da      	mvns	r2, r3
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	4013      	ands	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	23a0      	movs	r3, #160	; 0xa0
 8003608:	05db      	lsls	r3, r3, #23
 800360a:	429a      	cmp	r2, r3
 800360c:	d013      	beq.n	8003636 <HAL_GPIO_Init+0x1ca>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a45      	ldr	r2, [pc, #276]	; (8003728 <HAL_GPIO_Init+0x2bc>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d00d      	beq.n	8003632 <HAL_GPIO_Init+0x1c6>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a44      	ldr	r2, [pc, #272]	; (800372c <HAL_GPIO_Init+0x2c0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d007      	beq.n	800362e <HAL_GPIO_Init+0x1c2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a43      	ldr	r2, [pc, #268]	; (8003730 <HAL_GPIO_Init+0x2c4>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d101      	bne.n	800362a <HAL_GPIO_Init+0x1be>
 8003626:	2303      	movs	r3, #3
 8003628:	e006      	b.n	8003638 <HAL_GPIO_Init+0x1cc>
 800362a:	2305      	movs	r3, #5
 800362c:	e004      	b.n	8003638 <HAL_GPIO_Init+0x1cc>
 800362e:	2302      	movs	r3, #2
 8003630:	e002      	b.n	8003638 <HAL_GPIO_Init+0x1cc>
 8003632:	2301      	movs	r3, #1
 8003634:	e000      	b.n	8003638 <HAL_GPIO_Init+0x1cc>
 8003636:	2300      	movs	r3, #0
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	2103      	movs	r1, #3
 800363c:	400a      	ands	r2, r1
 800363e:	00d2      	lsls	r2, r2, #3
 8003640:	4093      	lsls	r3, r2
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003648:	4936      	ldr	r1, [pc, #216]	; (8003724 <HAL_GPIO_Init+0x2b8>)
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	089b      	lsrs	r3, r3, #2
 800364e:	3318      	adds	r3, #24
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003656:	4b33      	ldr	r3, [pc, #204]	; (8003724 <HAL_GPIO_Init+0x2b8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	43da      	mvns	r2, r3
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	4013      	ands	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	2380      	movs	r3, #128	; 0x80
 800366c:	035b      	lsls	r3, r3, #13
 800366e:	4013      	ands	r3, r2
 8003670:	d003      	beq.n	800367a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4313      	orrs	r3, r2
 8003678:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800367a:	4b2a      	ldr	r3, [pc, #168]	; (8003724 <HAL_GPIO_Init+0x2b8>)
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003680:	4b28      	ldr	r3, [pc, #160]	; (8003724 <HAL_GPIO_Init+0x2b8>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	43da      	mvns	r2, r3
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	4013      	ands	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	2380      	movs	r3, #128	; 0x80
 8003696:	039b      	lsls	r3, r3, #14
 8003698:	4013      	ands	r3, r2
 800369a:	d003      	beq.n	80036a4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036a4:	4b1f      	ldr	r3, [pc, #124]	; (8003724 <HAL_GPIO_Init+0x2b8>)
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80036aa:	4a1e      	ldr	r2, [pc, #120]	; (8003724 <HAL_GPIO_Init+0x2b8>)
 80036ac:	2384      	movs	r3, #132	; 0x84
 80036ae:	58d3      	ldr	r3, [r2, r3]
 80036b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	43da      	mvns	r2, r3
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	4013      	ands	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	2380      	movs	r3, #128	; 0x80
 80036c2:	029b      	lsls	r3, r3, #10
 80036c4:	4013      	ands	r3, r2
 80036c6:	d003      	beq.n	80036d0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036d0:	4914      	ldr	r1, [pc, #80]	; (8003724 <HAL_GPIO_Init+0x2b8>)
 80036d2:	2284      	movs	r2, #132	; 0x84
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80036d8:	4a12      	ldr	r2, [pc, #72]	; (8003724 <HAL_GPIO_Init+0x2b8>)
 80036da:	2380      	movs	r3, #128	; 0x80
 80036dc:	58d3      	ldr	r3, [r2, r3]
 80036de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	43da      	mvns	r2, r3
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4013      	ands	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	2380      	movs	r3, #128	; 0x80
 80036f0:	025b      	lsls	r3, r3, #9
 80036f2:	4013      	ands	r3, r2
 80036f4:	d003      	beq.n	80036fe <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036fe:	4909      	ldr	r1, [pc, #36]	; (8003724 <HAL_GPIO_Init+0x2b8>)
 8003700:	2280      	movs	r2, #128	; 0x80
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	3301      	adds	r3, #1
 800370a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	40da      	lsrs	r2, r3
 8003714:	1e13      	subs	r3, r2, #0
 8003716:	d000      	beq.n	800371a <HAL_GPIO_Init+0x2ae>
 8003718:	e6b0      	b.n	800347c <HAL_GPIO_Init+0x10>
  }
}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	46c0      	nop			; (mov r8, r8)
 800371e:	46bd      	mov	sp, r7
 8003720:	b006      	add	sp, #24
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40021800 	.word	0x40021800
 8003728:	50000400 	.word	0x50000400
 800372c:	50000800 	.word	0x50000800
 8003730:	50000c00 	.word	0x50000c00

08003734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	0008      	movs	r0, r1
 800373e:	0011      	movs	r1, r2
 8003740:	1cbb      	adds	r3, r7, #2
 8003742:	1c02      	adds	r2, r0, #0
 8003744:	801a      	strh	r2, [r3, #0]
 8003746:	1c7b      	adds	r3, r7, #1
 8003748:	1c0a      	adds	r2, r1, #0
 800374a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800374c:	1c7b      	adds	r3, r7, #1
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d004      	beq.n	800375e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003754:	1cbb      	adds	r3, r7, #2
 8003756:	881a      	ldrh	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800375c:	e003      	b.n	8003766 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800375e:	1cbb      	adds	r3, r7, #2
 8003760:	881a      	ldrh	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003766:	46c0      	nop			; (mov r8, r8)
 8003768:	46bd      	mov	sp, r7
 800376a:	b002      	add	sp, #8
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b084      	sub	sp, #16
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	000a      	movs	r2, r1
 8003778:	1cbb      	adds	r3, r7, #2
 800377a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003782:	1cbb      	adds	r3, r7, #2
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4013      	ands	r3, r2
 800378a:	041a      	lsls	r2, r3, #16
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	43db      	mvns	r3, r3
 8003790:	1cb9      	adds	r1, r7, #2
 8003792:	8809      	ldrh	r1, [r1, #0]
 8003794:	400b      	ands	r3, r1
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	619a      	str	r2, [r3, #24]
}
 800379c:	46c0      	nop			; (mov r8, r8)
 800379e:	46bd      	mov	sp, r7
 80037a0:	b004      	add	sp, #16
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	0002      	movs	r2, r0
 80037ac:	1dbb      	adds	r3, r7, #6
 80037ae:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80037b0:	4b10      	ldr	r3, [pc, #64]	; (80037f4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	1dba      	adds	r2, r7, #6
 80037b6:	8812      	ldrh	r2, [r2, #0]
 80037b8:	4013      	ands	r3, r2
 80037ba:	d008      	beq.n	80037ce <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80037bc:	4b0d      	ldr	r3, [pc, #52]	; (80037f4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80037be:	1dba      	adds	r2, r7, #6
 80037c0:	8812      	ldrh	r2, [r2, #0]
 80037c2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80037c4:	1dbb      	adds	r3, r7, #6
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	0018      	movs	r0, r3
 80037ca:	f7fc fe0f 	bl	80003ec <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80037ce:	4b09      	ldr	r3, [pc, #36]	; (80037f4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	1dba      	adds	r2, r7, #6
 80037d4:	8812      	ldrh	r2, [r2, #0]
 80037d6:	4013      	ands	r3, r2
 80037d8:	d008      	beq.n	80037ec <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80037da:	4b06      	ldr	r3, [pc, #24]	; (80037f4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80037dc:	1dba      	adds	r2, r7, #6
 80037de:	8812      	ldrh	r2, [r2, #0]
 80037e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80037e2:	1dbb      	adds	r3, r7, #6
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	0018      	movs	r0, r3
 80037e8:	f000 f806 	bl	80037f8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80037ec:	46c0      	nop			; (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b002      	add	sp, #8
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40021800 	.word	0x40021800

080037f8 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	0002      	movs	r2, r0
 8003800:	1dbb      	adds	r3, r7, #6
 8003802:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	46bd      	mov	sp, r7
 8003808:	b002      	add	sp, #8
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003814:	4b19      	ldr	r3, [pc, #100]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a19      	ldr	r2, [pc, #100]	; (8003880 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800381a:	4013      	ands	r3, r2
 800381c:	0019      	movs	r1, r3
 800381e:	4b17      	ldr	r3, [pc, #92]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	430a      	orrs	r2, r1
 8003824:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	2380      	movs	r3, #128	; 0x80
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	429a      	cmp	r2, r3
 800382e:	d11f      	bne.n	8003870 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003830:	4b14      	ldr	r3, [pc, #80]	; (8003884 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	0013      	movs	r3, r2
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	189b      	adds	r3, r3, r2
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	4912      	ldr	r1, [pc, #72]	; (8003888 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800383e:	0018      	movs	r0, r3
 8003840:	f7fc fc5e 	bl	8000100 <__udivsi3>
 8003844:	0003      	movs	r3, r0
 8003846:	3301      	adds	r3, #1
 8003848:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800384a:	e008      	b.n	800385e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	3b01      	subs	r3, #1
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	e001      	b.n	800385e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e009      	b.n	8003872 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800385e:	4b07      	ldr	r3, [pc, #28]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003860:	695a      	ldr	r2, [r3, #20]
 8003862:	2380      	movs	r3, #128	; 0x80
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	401a      	ands	r2, r3
 8003868:	2380      	movs	r3, #128	; 0x80
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	429a      	cmp	r2, r3
 800386e:	d0ed      	beq.n	800384c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	0018      	movs	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	b004      	add	sp, #16
 8003878:	bd80      	pop	{r7, pc}
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	40007000 	.word	0x40007000
 8003880:	fffff9ff 	.word	0xfffff9ff
 8003884:	20000004 	.word	0x20000004
 8003888:	000f4240 	.word	0x000f4240

0800388c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003890:	4b03      	ldr	r3, [pc, #12]	; (80038a0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	23e0      	movs	r3, #224	; 0xe0
 8003896:	01db      	lsls	r3, r3, #7
 8003898:	4013      	ands	r3, r2
}
 800389a:	0018      	movs	r0, r3
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40021000 	.word	0x40021000

080038a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b088      	sub	sp, #32
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e2f3      	b.n	8003e9e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2201      	movs	r2, #1
 80038bc:	4013      	ands	r3, r2
 80038be:	d100      	bne.n	80038c2 <HAL_RCC_OscConfig+0x1e>
 80038c0:	e07c      	b.n	80039bc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038c2:	4bc3      	ldr	r3, [pc, #780]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	2238      	movs	r2, #56	; 0x38
 80038c8:	4013      	ands	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038cc:	4bc0      	ldr	r3, [pc, #768]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	2203      	movs	r2, #3
 80038d2:	4013      	ands	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	2b10      	cmp	r3, #16
 80038da:	d102      	bne.n	80038e2 <HAL_RCC_OscConfig+0x3e>
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	2b03      	cmp	r3, #3
 80038e0:	d002      	beq.n	80038e8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d10b      	bne.n	8003900 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e8:	4bb9      	ldr	r3, [pc, #740]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	2380      	movs	r3, #128	; 0x80
 80038ee:	029b      	lsls	r3, r3, #10
 80038f0:	4013      	ands	r3, r2
 80038f2:	d062      	beq.n	80039ba <HAL_RCC_OscConfig+0x116>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d15e      	bne.n	80039ba <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e2ce      	b.n	8003e9e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	2380      	movs	r3, #128	; 0x80
 8003906:	025b      	lsls	r3, r3, #9
 8003908:	429a      	cmp	r2, r3
 800390a:	d107      	bne.n	800391c <HAL_RCC_OscConfig+0x78>
 800390c:	4bb0      	ldr	r3, [pc, #704]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	4baf      	ldr	r3, [pc, #700]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 8003912:	2180      	movs	r1, #128	; 0x80
 8003914:	0249      	lsls	r1, r1, #9
 8003916:	430a      	orrs	r2, r1
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	e020      	b.n	800395e <HAL_RCC_OscConfig+0xba>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	23a0      	movs	r3, #160	; 0xa0
 8003922:	02db      	lsls	r3, r3, #11
 8003924:	429a      	cmp	r2, r3
 8003926:	d10e      	bne.n	8003946 <HAL_RCC_OscConfig+0xa2>
 8003928:	4ba9      	ldr	r3, [pc, #676]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	4ba8      	ldr	r3, [pc, #672]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 800392e:	2180      	movs	r1, #128	; 0x80
 8003930:	02c9      	lsls	r1, r1, #11
 8003932:	430a      	orrs	r2, r1
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	4ba6      	ldr	r3, [pc, #664]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	4ba5      	ldr	r3, [pc, #660]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 800393c:	2180      	movs	r1, #128	; 0x80
 800393e:	0249      	lsls	r1, r1, #9
 8003940:	430a      	orrs	r2, r1
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	e00b      	b.n	800395e <HAL_RCC_OscConfig+0xba>
 8003946:	4ba2      	ldr	r3, [pc, #648]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	4ba1      	ldr	r3, [pc, #644]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 800394c:	49a1      	ldr	r1, [pc, #644]	; (8003bd4 <HAL_RCC_OscConfig+0x330>)
 800394e:	400a      	ands	r2, r1
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	4b9f      	ldr	r3, [pc, #636]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	4b9e      	ldr	r3, [pc, #632]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 8003958:	499f      	ldr	r1, [pc, #636]	; (8003bd8 <HAL_RCC_OscConfig+0x334>)
 800395a:	400a      	ands	r2, r1
 800395c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d014      	beq.n	8003990 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003966:	f7fe fcad 	bl	80022c4 <HAL_GetTick>
 800396a:	0003      	movs	r3, r0
 800396c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003970:	f7fe fca8 	bl	80022c4 <HAL_GetTick>
 8003974:	0002      	movs	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b64      	cmp	r3, #100	; 0x64
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e28d      	b.n	8003e9e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003982:	4b93      	ldr	r3, [pc, #588]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	2380      	movs	r3, #128	; 0x80
 8003988:	029b      	lsls	r3, r3, #10
 800398a:	4013      	ands	r3, r2
 800398c:	d0f0      	beq.n	8003970 <HAL_RCC_OscConfig+0xcc>
 800398e:	e015      	b.n	80039bc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003990:	f7fe fc98 	bl	80022c4 <HAL_GetTick>
 8003994:	0003      	movs	r3, r0
 8003996:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800399a:	f7fe fc93 	bl	80022c4 <HAL_GetTick>
 800399e:	0002      	movs	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b64      	cmp	r3, #100	; 0x64
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e278      	b.n	8003e9e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039ac:	4b88      	ldr	r3, [pc, #544]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	2380      	movs	r3, #128	; 0x80
 80039b2:	029b      	lsls	r3, r3, #10
 80039b4:	4013      	ands	r3, r2
 80039b6:	d1f0      	bne.n	800399a <HAL_RCC_OscConfig+0xf6>
 80039b8:	e000      	b.n	80039bc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ba:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2202      	movs	r2, #2
 80039c2:	4013      	ands	r3, r2
 80039c4:	d100      	bne.n	80039c8 <HAL_RCC_OscConfig+0x124>
 80039c6:	e099      	b.n	8003afc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039c8:	4b81      	ldr	r3, [pc, #516]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2238      	movs	r2, #56	; 0x38
 80039ce:	4013      	ands	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039d2:	4b7f      	ldr	r3, [pc, #508]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	2203      	movs	r2, #3
 80039d8:	4013      	ands	r3, r2
 80039da:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	2b10      	cmp	r3, #16
 80039e0:	d102      	bne.n	80039e8 <HAL_RCC_OscConfig+0x144>
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d002      	beq.n	80039ee <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d135      	bne.n	8003a5a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039ee:	4b78      	ldr	r3, [pc, #480]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	2380      	movs	r3, #128	; 0x80
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	4013      	ands	r3, r2
 80039f8:	d005      	beq.n	8003a06 <HAL_RCC_OscConfig+0x162>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e24b      	b.n	8003e9e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a06:	4b72      	ldr	r3, [pc, #456]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	4a74      	ldr	r2, [pc, #464]	; (8003bdc <HAL_RCC_OscConfig+0x338>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	0019      	movs	r1, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	021a      	lsls	r2, r3, #8
 8003a16:	4b6e      	ldr	r3, [pc, #440]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d112      	bne.n	8003a48 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003a22:	4b6b      	ldr	r3, [pc, #428]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a6e      	ldr	r2, [pc, #440]	; (8003be0 <HAL_RCC_OscConfig+0x33c>)
 8003a28:	4013      	ands	r3, r2
 8003a2a:	0019      	movs	r1, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	4b67      	ldr	r3, [pc, #412]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 8003a32:	430a      	orrs	r2, r1
 8003a34:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003a36:	4b66      	ldr	r3, [pc, #408]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	0adb      	lsrs	r3, r3, #11
 8003a3c:	2207      	movs	r2, #7
 8003a3e:	4013      	ands	r3, r2
 8003a40:	4a68      	ldr	r2, [pc, #416]	; (8003be4 <HAL_RCC_OscConfig+0x340>)
 8003a42:	40da      	lsrs	r2, r3
 8003a44:	4b68      	ldr	r3, [pc, #416]	; (8003be8 <HAL_RCC_OscConfig+0x344>)
 8003a46:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a48:	4b68      	ldr	r3, [pc, #416]	; (8003bec <HAL_RCC_OscConfig+0x348>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f7fd fcdd 	bl	800140c <HAL_InitTick>
 8003a52:	1e03      	subs	r3, r0, #0
 8003a54:	d051      	beq.n	8003afa <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e221      	b.n	8003e9e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d030      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003a62:	4b5b      	ldr	r3, [pc, #364]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a5e      	ldr	r2, [pc, #376]	; (8003be0 <HAL_RCC_OscConfig+0x33c>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	0019      	movs	r1, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	4b57      	ldr	r3, [pc, #348]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 8003a72:	430a      	orrs	r2, r1
 8003a74:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003a76:	4b56      	ldr	r3, [pc, #344]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	4b55      	ldr	r3, [pc, #340]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 8003a7c:	2180      	movs	r1, #128	; 0x80
 8003a7e:	0049      	lsls	r1, r1, #1
 8003a80:	430a      	orrs	r2, r1
 8003a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a84:	f7fe fc1e 	bl	80022c4 <HAL_GetTick>
 8003a88:	0003      	movs	r3, r0
 8003a8a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a8e:	f7fe fc19 	bl	80022c4 <HAL_GetTick>
 8003a92:	0002      	movs	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e1fe      	b.n	8003e9e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aa0:	4b4b      	ldr	r3, [pc, #300]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	2380      	movs	r3, #128	; 0x80
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	d0f0      	beq.n	8003a8e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aac:	4b48      	ldr	r3, [pc, #288]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	4a4a      	ldr	r2, [pc, #296]	; (8003bdc <HAL_RCC_OscConfig+0x338>)
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	0019      	movs	r1, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	021a      	lsls	r2, r3, #8
 8003abc:	4b44      	ldr	r3, [pc, #272]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	605a      	str	r2, [r3, #4]
 8003ac2:	e01b      	b.n	8003afc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003ac4:	4b42      	ldr	r3, [pc, #264]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	4b41      	ldr	r3, [pc, #260]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 8003aca:	4949      	ldr	r1, [pc, #292]	; (8003bf0 <HAL_RCC_OscConfig+0x34c>)
 8003acc:	400a      	ands	r2, r1
 8003ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad0:	f7fe fbf8 	bl	80022c4 <HAL_GetTick>
 8003ad4:	0003      	movs	r3, r0
 8003ad6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ad8:	e008      	b.n	8003aec <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ada:	f7fe fbf3 	bl	80022c4 <HAL_GetTick>
 8003ade:	0002      	movs	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e1d8      	b.n	8003e9e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003aec:	4b38      	ldr	r3, [pc, #224]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	2380      	movs	r3, #128	; 0x80
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	4013      	ands	r3, r2
 8003af6:	d1f0      	bne.n	8003ada <HAL_RCC_OscConfig+0x236>
 8003af8:	e000      	b.n	8003afc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003afa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2208      	movs	r2, #8
 8003b02:	4013      	ands	r3, r2
 8003b04:	d047      	beq.n	8003b96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003b06:	4b32      	ldr	r3, [pc, #200]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	2238      	movs	r2, #56	; 0x38
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2b18      	cmp	r3, #24
 8003b10:	d10a      	bne.n	8003b28 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003b12:	4b2f      	ldr	r3, [pc, #188]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 8003b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b16:	2202      	movs	r2, #2
 8003b18:	4013      	ands	r3, r2
 8003b1a:	d03c      	beq.n	8003b96 <HAL_RCC_OscConfig+0x2f2>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d138      	bne.n	8003b96 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e1ba      	b.n	8003e9e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d019      	beq.n	8003b64 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003b30:	4b27      	ldr	r3, [pc, #156]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 8003b32:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b34:	4b26      	ldr	r3, [pc, #152]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 8003b36:	2101      	movs	r1, #1
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3c:	f7fe fbc2 	bl	80022c4 <HAL_GetTick>
 8003b40:	0003      	movs	r3, r0
 8003b42:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b46:	f7fe fbbd 	bl	80022c4 <HAL_GetTick>
 8003b4a:	0002      	movs	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e1a2      	b.n	8003e9e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b58:	4b1d      	ldr	r3, [pc, #116]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 8003b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b5c:	2202      	movs	r2, #2
 8003b5e:	4013      	ands	r3, r2
 8003b60:	d0f1      	beq.n	8003b46 <HAL_RCC_OscConfig+0x2a2>
 8003b62:	e018      	b.n	8003b96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003b64:	4b1a      	ldr	r3, [pc, #104]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 8003b66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b68:	4b19      	ldr	r3, [pc, #100]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	438a      	bics	r2, r1
 8003b6e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b70:	f7fe fba8 	bl	80022c4 <HAL_GetTick>
 8003b74:	0003      	movs	r3, r0
 8003b76:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b7a:	f7fe fba3 	bl	80022c4 <HAL_GetTick>
 8003b7e:	0002      	movs	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e188      	b.n	8003e9e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b8c:	4b10      	ldr	r3, [pc, #64]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 8003b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b90:	2202      	movs	r2, #2
 8003b92:	4013      	ands	r3, r2
 8003b94:	d1f1      	bne.n	8003b7a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2204      	movs	r2, #4
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	d100      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x2fe>
 8003ba0:	e0c6      	b.n	8003d30 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ba2:	231f      	movs	r3, #31
 8003ba4:	18fb      	adds	r3, r7, r3
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003baa:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	2238      	movs	r2, #56	; 0x38
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	2b20      	cmp	r3, #32
 8003bb4:	d11e      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003bb6:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <HAL_RCC_OscConfig+0x32c>)
 8003bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bba:	2202      	movs	r2, #2
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	d100      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x31e>
 8003bc0:	e0b6      	b.n	8003d30 <HAL_RCC_OscConfig+0x48c>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d000      	beq.n	8003bcc <HAL_RCC_OscConfig+0x328>
 8003bca:	e0b1      	b.n	8003d30 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e166      	b.n	8003e9e <HAL_RCC_OscConfig+0x5fa>
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	fffeffff 	.word	0xfffeffff
 8003bd8:	fffbffff 	.word	0xfffbffff
 8003bdc:	ffff80ff 	.word	0xffff80ff
 8003be0:	ffffc7ff 	.word	0xffffc7ff
 8003be4:	00f42400 	.word	0x00f42400
 8003be8:	20000004 	.word	0x20000004
 8003bec:	20000008 	.word	0x20000008
 8003bf0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bf4:	4bac      	ldr	r3, [pc, #688]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003bf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bf8:	2380      	movs	r3, #128	; 0x80
 8003bfa:	055b      	lsls	r3, r3, #21
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	d101      	bne.n	8003c04 <HAL_RCC_OscConfig+0x360>
 8003c00:	2301      	movs	r3, #1
 8003c02:	e000      	b.n	8003c06 <HAL_RCC_OscConfig+0x362>
 8003c04:	2300      	movs	r3, #0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d011      	beq.n	8003c2e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003c0a:	4ba7      	ldr	r3, [pc, #668]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003c0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c0e:	4ba6      	ldr	r3, [pc, #664]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003c10:	2180      	movs	r1, #128	; 0x80
 8003c12:	0549      	lsls	r1, r1, #21
 8003c14:	430a      	orrs	r2, r1
 8003c16:	63da      	str	r2, [r3, #60]	; 0x3c
 8003c18:	4ba3      	ldr	r3, [pc, #652]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003c1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c1c:	2380      	movs	r3, #128	; 0x80
 8003c1e:	055b      	lsls	r3, r3, #21
 8003c20:	4013      	ands	r3, r2
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003c26:	231f      	movs	r3, #31
 8003c28:	18fb      	adds	r3, r7, r3
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c2e:	4b9f      	ldr	r3, [pc, #636]	; (8003eac <HAL_RCC_OscConfig+0x608>)
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	2380      	movs	r3, #128	; 0x80
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	4013      	ands	r3, r2
 8003c38:	d11a      	bne.n	8003c70 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c3a:	4b9c      	ldr	r3, [pc, #624]	; (8003eac <HAL_RCC_OscConfig+0x608>)
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	4b9b      	ldr	r3, [pc, #620]	; (8003eac <HAL_RCC_OscConfig+0x608>)
 8003c40:	2180      	movs	r1, #128	; 0x80
 8003c42:	0049      	lsls	r1, r1, #1
 8003c44:	430a      	orrs	r2, r1
 8003c46:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003c48:	f7fe fb3c 	bl	80022c4 <HAL_GetTick>
 8003c4c:	0003      	movs	r3, r0
 8003c4e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c52:	f7fe fb37 	bl	80022c4 <HAL_GetTick>
 8003c56:	0002      	movs	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e11c      	b.n	8003e9e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c64:	4b91      	ldr	r3, [pc, #580]	; (8003eac <HAL_RCC_OscConfig+0x608>)
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	2380      	movs	r3, #128	; 0x80
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	d0f0      	beq.n	8003c52 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d106      	bne.n	8003c86 <HAL_RCC_OscConfig+0x3e2>
 8003c78:	4b8b      	ldr	r3, [pc, #556]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003c7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c7c:	4b8a      	ldr	r3, [pc, #552]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003c7e:	2101      	movs	r1, #1
 8003c80:	430a      	orrs	r2, r1
 8003c82:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c84:	e01c      	b.n	8003cc0 <HAL_RCC_OscConfig+0x41c>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	2b05      	cmp	r3, #5
 8003c8c:	d10c      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x404>
 8003c8e:	4b86      	ldr	r3, [pc, #536]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003c90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c92:	4b85      	ldr	r3, [pc, #532]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003c94:	2104      	movs	r1, #4
 8003c96:	430a      	orrs	r2, r1
 8003c98:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c9a:	4b83      	ldr	r3, [pc, #524]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003c9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c9e:	4b82      	ldr	r3, [pc, #520]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ca6:	e00b      	b.n	8003cc0 <HAL_RCC_OscConfig+0x41c>
 8003ca8:	4b7f      	ldr	r3, [pc, #508]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003caa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003cac:	4b7e      	ldr	r3, [pc, #504]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003cae:	2101      	movs	r1, #1
 8003cb0:	438a      	bics	r2, r1
 8003cb2:	65da      	str	r2, [r3, #92]	; 0x5c
 8003cb4:	4b7c      	ldr	r3, [pc, #496]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003cb6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003cb8:	4b7b      	ldr	r3, [pc, #492]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003cba:	2104      	movs	r1, #4
 8003cbc:	438a      	bics	r2, r1
 8003cbe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d014      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc8:	f7fe fafc 	bl	80022c4 <HAL_GetTick>
 8003ccc:	0003      	movs	r3, r0
 8003cce:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cd0:	e009      	b.n	8003ce6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd2:	f7fe faf7 	bl	80022c4 <HAL_GetTick>
 8003cd6:	0002      	movs	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	4a74      	ldr	r2, [pc, #464]	; (8003eb0 <HAL_RCC_OscConfig+0x60c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e0db      	b.n	8003e9e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ce6:	4b70      	ldr	r3, [pc, #448]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cea:	2202      	movs	r2, #2
 8003cec:	4013      	ands	r3, r2
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x42e>
 8003cf0:	e013      	b.n	8003d1a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf2:	f7fe fae7 	bl	80022c4 <HAL_GetTick>
 8003cf6:	0003      	movs	r3, r0
 8003cf8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cfa:	e009      	b.n	8003d10 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cfc:	f7fe fae2 	bl	80022c4 <HAL_GetTick>
 8003d00:	0002      	movs	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	4a6a      	ldr	r2, [pc, #424]	; (8003eb0 <HAL_RCC_OscConfig+0x60c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e0c6      	b.n	8003e9e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d10:	4b65      	ldr	r3, [pc, #404]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d14:	2202      	movs	r2, #2
 8003d16:	4013      	ands	r3, r2
 8003d18:	d1f0      	bne.n	8003cfc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003d1a:	231f      	movs	r3, #31
 8003d1c:	18fb      	adds	r3, r7, r3
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d105      	bne.n	8003d30 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003d24:	4b60      	ldr	r3, [pc, #384]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003d26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d28:	4b5f      	ldr	r3, [pc, #380]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003d2a:	4962      	ldr	r1, [pc, #392]	; (8003eb4 <HAL_RCC_OscConfig+0x610>)
 8003d2c:	400a      	ands	r2, r1
 8003d2e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d100      	bne.n	8003d3a <HAL_RCC_OscConfig+0x496>
 8003d38:	e0b0      	b.n	8003e9c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d3a:	4b5b      	ldr	r3, [pc, #364]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	2238      	movs	r2, #56	; 0x38
 8003d40:	4013      	ands	r3, r2
 8003d42:	2b10      	cmp	r3, #16
 8003d44:	d100      	bne.n	8003d48 <HAL_RCC_OscConfig+0x4a4>
 8003d46:	e078      	b.n	8003e3a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d153      	bne.n	8003df8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d50:	4b55      	ldr	r3, [pc, #340]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	4b54      	ldr	r3, [pc, #336]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003d56:	4958      	ldr	r1, [pc, #352]	; (8003eb8 <HAL_RCC_OscConfig+0x614>)
 8003d58:	400a      	ands	r2, r1
 8003d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7fe fab2 	bl	80022c4 <HAL_GetTick>
 8003d60:	0003      	movs	r3, r0
 8003d62:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d64:	e008      	b.n	8003d78 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d66:	f7fe faad 	bl	80022c4 <HAL_GetTick>
 8003d6a:	0002      	movs	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e092      	b.n	8003e9e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d78:	4b4b      	ldr	r3, [pc, #300]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	2380      	movs	r3, #128	; 0x80
 8003d7e:	049b      	lsls	r3, r3, #18
 8003d80:	4013      	ands	r3, r2
 8003d82:	d1f0      	bne.n	8003d66 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d84:	4b48      	ldr	r3, [pc, #288]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	4a4c      	ldr	r2, [pc, #304]	; (8003ebc <HAL_RCC_OscConfig+0x618>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	0019      	movs	r1, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1a      	ldr	r2, [r3, #32]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9c:	021b      	lsls	r3, r3, #8
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	431a      	orrs	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	431a      	orrs	r2, r3
 8003dac:	4b3e      	ldr	r3, [pc, #248]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003dae:	430a      	orrs	r2, r1
 8003db0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003db2:	4b3d      	ldr	r3, [pc, #244]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	4b3c      	ldr	r3, [pc, #240]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003db8:	2180      	movs	r1, #128	; 0x80
 8003dba:	0449      	lsls	r1, r1, #17
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003dc0:	4b39      	ldr	r3, [pc, #228]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003dc2:	68da      	ldr	r2, [r3, #12]
 8003dc4:	4b38      	ldr	r3, [pc, #224]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003dc6:	2180      	movs	r1, #128	; 0x80
 8003dc8:	0549      	lsls	r1, r1, #21
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dce:	f7fe fa79 	bl	80022c4 <HAL_GetTick>
 8003dd2:	0003      	movs	r3, r0
 8003dd4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd8:	f7fe fa74 	bl	80022c4 <HAL_GetTick>
 8003ddc:	0002      	movs	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e059      	b.n	8003e9e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dea:	4b2f      	ldr	r3, [pc, #188]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	2380      	movs	r3, #128	; 0x80
 8003df0:	049b      	lsls	r3, r3, #18
 8003df2:	4013      	ands	r3, r2
 8003df4:	d0f0      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x534>
 8003df6:	e051      	b.n	8003e9c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df8:	4b2b      	ldr	r3, [pc, #172]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	4b2a      	ldr	r3, [pc, #168]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003dfe:	492e      	ldr	r1, [pc, #184]	; (8003eb8 <HAL_RCC_OscConfig+0x614>)
 8003e00:	400a      	ands	r2, r1
 8003e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fe fa5e 	bl	80022c4 <HAL_GetTick>
 8003e08:	0003      	movs	r3, r0
 8003e0a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e0c:	e008      	b.n	8003e20 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e0e:	f7fe fa59 	bl	80022c4 <HAL_GetTick>
 8003e12:	0002      	movs	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e03e      	b.n	8003e9e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e20:	4b21      	ldr	r3, [pc, #132]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	2380      	movs	r3, #128	; 0x80
 8003e26:	049b      	lsls	r3, r3, #18
 8003e28:	4013      	ands	r3, r2
 8003e2a:	d1f0      	bne.n	8003e0e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003e2c:	4b1e      	ldr	r3, [pc, #120]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	4b1d      	ldr	r3, [pc, #116]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003e32:	4923      	ldr	r1, [pc, #140]	; (8003ec0 <HAL_RCC_OscConfig+0x61c>)
 8003e34:	400a      	ands	r2, r1
 8003e36:	60da      	str	r2, [r3, #12]
 8003e38:	e030      	b.n	8003e9c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d101      	bne.n	8003e46 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e02b      	b.n	8003e9e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003e46:	4b18      	ldr	r3, [pc, #96]	; (8003ea8 <HAL_RCC_OscConfig+0x604>)
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2203      	movs	r2, #3
 8003e50:	401a      	ands	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d11e      	bne.n	8003e98 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2270      	movs	r2, #112	; 0x70
 8003e5e:	401a      	ands	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d117      	bne.n	8003e98 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	23fe      	movs	r3, #254	; 0xfe
 8003e6c:	01db      	lsls	r3, r3, #7
 8003e6e:	401a      	ands	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e74:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d10e      	bne.n	8003e98 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	23f8      	movs	r3, #248	; 0xf8
 8003e7e:	039b      	lsls	r3, r3, #14
 8003e80:	401a      	ands	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d106      	bne.n	8003e98 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	0f5b      	lsrs	r3, r3, #29
 8003e8e:	075a      	lsls	r2, r3, #29
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d001      	beq.n	8003e9c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e000      	b.n	8003e9e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	b008      	add	sp, #32
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	46c0      	nop			; (mov r8, r8)
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	40007000 	.word	0x40007000
 8003eb0:	00001388 	.word	0x00001388
 8003eb4:	efffffff 	.word	0xefffffff
 8003eb8:	feffffff 	.word	0xfeffffff
 8003ebc:	1fc1808c 	.word	0x1fc1808c
 8003ec0:	effefffc 	.word	0xeffefffc

08003ec4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e0e9      	b.n	80040ac <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ed8:	4b76      	ldr	r3, [pc, #472]	; (80040b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2207      	movs	r2, #7
 8003ede:	4013      	ands	r3, r2
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d91e      	bls.n	8003f24 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee6:	4b73      	ldr	r3, [pc, #460]	; (80040b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2207      	movs	r2, #7
 8003eec:	4393      	bics	r3, r2
 8003eee:	0019      	movs	r1, r3
 8003ef0:	4b70      	ldr	r3, [pc, #448]	; (80040b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ef8:	f7fe f9e4 	bl	80022c4 <HAL_GetTick>
 8003efc:	0003      	movs	r3, r0
 8003efe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f00:	e009      	b.n	8003f16 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f02:	f7fe f9df 	bl	80022c4 <HAL_GetTick>
 8003f06:	0002      	movs	r2, r0
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	4a6a      	ldr	r2, [pc, #424]	; (80040b8 <HAL_RCC_ClockConfig+0x1f4>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e0ca      	b.n	80040ac <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f16:	4b67      	ldr	r3, [pc, #412]	; (80040b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2207      	movs	r2, #7
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d1ee      	bne.n	8003f02 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2202      	movs	r2, #2
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d015      	beq.n	8003f5a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2204      	movs	r2, #4
 8003f34:	4013      	ands	r3, r2
 8003f36:	d006      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003f38:	4b60      	ldr	r3, [pc, #384]	; (80040bc <HAL_RCC_ClockConfig+0x1f8>)
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	4b5f      	ldr	r3, [pc, #380]	; (80040bc <HAL_RCC_ClockConfig+0x1f8>)
 8003f3e:	21e0      	movs	r1, #224	; 0xe0
 8003f40:	01c9      	lsls	r1, r1, #7
 8003f42:	430a      	orrs	r2, r1
 8003f44:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f46:	4b5d      	ldr	r3, [pc, #372]	; (80040bc <HAL_RCC_ClockConfig+0x1f8>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	4a5d      	ldr	r2, [pc, #372]	; (80040c0 <HAL_RCC_ClockConfig+0x1fc>)
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	0019      	movs	r1, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	4b59      	ldr	r3, [pc, #356]	; (80040bc <HAL_RCC_ClockConfig+0x1f8>)
 8003f56:	430a      	orrs	r2, r1
 8003f58:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	4013      	ands	r3, r2
 8003f62:	d057      	beq.n	8004014 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d107      	bne.n	8003f7c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f6c:	4b53      	ldr	r3, [pc, #332]	; (80040bc <HAL_RCC_ClockConfig+0x1f8>)
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	2380      	movs	r3, #128	; 0x80
 8003f72:	029b      	lsls	r3, r3, #10
 8003f74:	4013      	ands	r3, r2
 8003f76:	d12b      	bne.n	8003fd0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e097      	b.n	80040ac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d107      	bne.n	8003f94 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f84:	4b4d      	ldr	r3, [pc, #308]	; (80040bc <HAL_RCC_ClockConfig+0x1f8>)
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	2380      	movs	r3, #128	; 0x80
 8003f8a:	049b      	lsls	r3, r3, #18
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	d11f      	bne.n	8003fd0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e08b      	b.n	80040ac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d107      	bne.n	8003fac <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f9c:	4b47      	ldr	r3, [pc, #284]	; (80040bc <HAL_RCC_ClockConfig+0x1f8>)
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	2380      	movs	r3, #128	; 0x80
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	d113      	bne.n	8003fd0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e07f      	b.n	80040ac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2b03      	cmp	r3, #3
 8003fb2:	d106      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fb4:	4b41      	ldr	r3, [pc, #260]	; (80040bc <HAL_RCC_ClockConfig+0x1f8>)
 8003fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb8:	2202      	movs	r2, #2
 8003fba:	4013      	ands	r3, r2
 8003fbc:	d108      	bne.n	8003fd0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e074      	b.n	80040ac <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fc2:	4b3e      	ldr	r3, [pc, #248]	; (80040bc <HAL_RCC_ClockConfig+0x1f8>)
 8003fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	4013      	ands	r3, r2
 8003fca:	d101      	bne.n	8003fd0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e06d      	b.n	80040ac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fd0:	4b3a      	ldr	r3, [pc, #232]	; (80040bc <HAL_RCC_ClockConfig+0x1f8>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	2207      	movs	r2, #7
 8003fd6:	4393      	bics	r3, r2
 8003fd8:	0019      	movs	r1, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	4b37      	ldr	r3, [pc, #220]	; (80040bc <HAL_RCC_ClockConfig+0x1f8>)
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fe4:	f7fe f96e 	bl	80022c4 <HAL_GetTick>
 8003fe8:	0003      	movs	r3, r0
 8003fea:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fec:	e009      	b.n	8004002 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fee:	f7fe f969 	bl	80022c4 <HAL_GetTick>
 8003ff2:	0002      	movs	r2, r0
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	4a2f      	ldr	r2, [pc, #188]	; (80040b8 <HAL_RCC_ClockConfig+0x1f4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e054      	b.n	80040ac <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004002:	4b2e      	ldr	r3, [pc, #184]	; (80040bc <HAL_RCC_ClockConfig+0x1f8>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	2238      	movs	r2, #56	; 0x38
 8004008:	401a      	ands	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	429a      	cmp	r2, r3
 8004012:	d1ec      	bne.n	8003fee <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004014:	4b27      	ldr	r3, [pc, #156]	; (80040b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2207      	movs	r2, #7
 800401a:	4013      	ands	r3, r2
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d21e      	bcs.n	8004060 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004022:	4b24      	ldr	r3, [pc, #144]	; (80040b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2207      	movs	r2, #7
 8004028:	4393      	bics	r3, r2
 800402a:	0019      	movs	r1, r3
 800402c:	4b21      	ldr	r3, [pc, #132]	; (80040b4 <HAL_RCC_ClockConfig+0x1f0>)
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004034:	f7fe f946 	bl	80022c4 <HAL_GetTick>
 8004038:	0003      	movs	r3, r0
 800403a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800403c:	e009      	b.n	8004052 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800403e:	f7fe f941 	bl	80022c4 <HAL_GetTick>
 8004042:	0002      	movs	r2, r0
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	4a1b      	ldr	r2, [pc, #108]	; (80040b8 <HAL_RCC_ClockConfig+0x1f4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e02c      	b.n	80040ac <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004052:	4b18      	ldr	r3, [pc, #96]	; (80040b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2207      	movs	r2, #7
 8004058:	4013      	ands	r3, r2
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d1ee      	bne.n	800403e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2204      	movs	r2, #4
 8004066:	4013      	ands	r3, r2
 8004068:	d009      	beq.n	800407e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800406a:	4b14      	ldr	r3, [pc, #80]	; (80040bc <HAL_RCC_ClockConfig+0x1f8>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	4a15      	ldr	r2, [pc, #84]	; (80040c4 <HAL_RCC_ClockConfig+0x200>)
 8004070:	4013      	ands	r3, r2
 8004072:	0019      	movs	r1, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	4b10      	ldr	r3, [pc, #64]	; (80040bc <HAL_RCC_ClockConfig+0x1f8>)
 800407a:	430a      	orrs	r2, r1
 800407c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800407e:	f000 f829 	bl	80040d4 <HAL_RCC_GetSysClockFreq>
 8004082:	0001      	movs	r1, r0
 8004084:	4b0d      	ldr	r3, [pc, #52]	; (80040bc <HAL_RCC_ClockConfig+0x1f8>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	0a1b      	lsrs	r3, r3, #8
 800408a:	220f      	movs	r2, #15
 800408c:	401a      	ands	r2, r3
 800408e:	4b0e      	ldr	r3, [pc, #56]	; (80040c8 <HAL_RCC_ClockConfig+0x204>)
 8004090:	0092      	lsls	r2, r2, #2
 8004092:	58d3      	ldr	r3, [r2, r3]
 8004094:	221f      	movs	r2, #31
 8004096:	4013      	ands	r3, r2
 8004098:	000a      	movs	r2, r1
 800409a:	40da      	lsrs	r2, r3
 800409c:	4b0b      	ldr	r3, [pc, #44]	; (80040cc <HAL_RCC_ClockConfig+0x208>)
 800409e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80040a0:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <HAL_RCC_ClockConfig+0x20c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	0018      	movs	r0, r3
 80040a6:	f7fd f9b1 	bl	800140c <HAL_InitTick>
 80040aa:	0003      	movs	r3, r0
}
 80040ac:	0018      	movs	r0, r3
 80040ae:	46bd      	mov	sp, r7
 80040b0:	b004      	add	sp, #16
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	40022000 	.word	0x40022000
 80040b8:	00001388 	.word	0x00001388
 80040bc:	40021000 	.word	0x40021000
 80040c0:	fffff0ff 	.word	0xfffff0ff
 80040c4:	ffff8fff 	.word	0xffff8fff
 80040c8:	0800667c 	.word	0x0800667c
 80040cc:	20000004 	.word	0x20000004
 80040d0:	20000008 	.word	0x20000008

080040d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040da:	4b3c      	ldr	r3, [pc, #240]	; (80041cc <HAL_RCC_GetSysClockFreq+0xf8>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	2238      	movs	r2, #56	; 0x38
 80040e0:	4013      	ands	r3, r2
 80040e2:	d10f      	bne.n	8004104 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80040e4:	4b39      	ldr	r3, [pc, #228]	; (80041cc <HAL_RCC_GetSysClockFreq+0xf8>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	0adb      	lsrs	r3, r3, #11
 80040ea:	2207      	movs	r2, #7
 80040ec:	4013      	ands	r3, r2
 80040ee:	2201      	movs	r2, #1
 80040f0:	409a      	lsls	r2, r3
 80040f2:	0013      	movs	r3, r2
 80040f4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80040f6:	6839      	ldr	r1, [r7, #0]
 80040f8:	4835      	ldr	r0, [pc, #212]	; (80041d0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80040fa:	f7fc f801 	bl	8000100 <__udivsi3>
 80040fe:	0003      	movs	r3, r0
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	e05d      	b.n	80041c0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004104:	4b31      	ldr	r3, [pc, #196]	; (80041cc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	2238      	movs	r2, #56	; 0x38
 800410a:	4013      	ands	r3, r2
 800410c:	2b08      	cmp	r3, #8
 800410e:	d102      	bne.n	8004116 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004110:	4b2f      	ldr	r3, [pc, #188]	; (80041d0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004112:	613b      	str	r3, [r7, #16]
 8004114:	e054      	b.n	80041c0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004116:	4b2d      	ldr	r3, [pc, #180]	; (80041cc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	2238      	movs	r2, #56	; 0x38
 800411c:	4013      	ands	r3, r2
 800411e:	2b10      	cmp	r3, #16
 8004120:	d138      	bne.n	8004194 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004122:	4b2a      	ldr	r3, [pc, #168]	; (80041cc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	2203      	movs	r2, #3
 8004128:	4013      	ands	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800412c:	4b27      	ldr	r3, [pc, #156]	; (80041cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	091b      	lsrs	r3, r3, #4
 8004132:	2207      	movs	r2, #7
 8004134:	4013      	ands	r3, r2
 8004136:	3301      	adds	r3, #1
 8004138:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2b03      	cmp	r3, #3
 800413e:	d10d      	bne.n	800415c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004140:	68b9      	ldr	r1, [r7, #8]
 8004142:	4823      	ldr	r0, [pc, #140]	; (80041d0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004144:	f7fb ffdc 	bl	8000100 <__udivsi3>
 8004148:	0003      	movs	r3, r0
 800414a:	0019      	movs	r1, r3
 800414c:	4b1f      	ldr	r3, [pc, #124]	; (80041cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	0a1b      	lsrs	r3, r3, #8
 8004152:	227f      	movs	r2, #127	; 0x7f
 8004154:	4013      	ands	r3, r2
 8004156:	434b      	muls	r3, r1
 8004158:	617b      	str	r3, [r7, #20]
        break;
 800415a:	e00d      	b.n	8004178 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800415c:	68b9      	ldr	r1, [r7, #8]
 800415e:	481c      	ldr	r0, [pc, #112]	; (80041d0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004160:	f7fb ffce 	bl	8000100 <__udivsi3>
 8004164:	0003      	movs	r3, r0
 8004166:	0019      	movs	r1, r3
 8004168:	4b18      	ldr	r3, [pc, #96]	; (80041cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	0a1b      	lsrs	r3, r3, #8
 800416e:	227f      	movs	r2, #127	; 0x7f
 8004170:	4013      	ands	r3, r2
 8004172:	434b      	muls	r3, r1
 8004174:	617b      	str	r3, [r7, #20]
        break;
 8004176:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004178:	4b14      	ldr	r3, [pc, #80]	; (80041cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	0f5b      	lsrs	r3, r3, #29
 800417e:	2207      	movs	r2, #7
 8004180:	4013      	ands	r3, r2
 8004182:	3301      	adds	r3, #1
 8004184:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	6978      	ldr	r0, [r7, #20]
 800418a:	f7fb ffb9 	bl	8000100 <__udivsi3>
 800418e:	0003      	movs	r3, r0
 8004190:	613b      	str	r3, [r7, #16]
 8004192:	e015      	b.n	80041c0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004194:	4b0d      	ldr	r3, [pc, #52]	; (80041cc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	2238      	movs	r2, #56	; 0x38
 800419a:	4013      	ands	r3, r2
 800419c:	2b20      	cmp	r3, #32
 800419e:	d103      	bne.n	80041a8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80041a0:	2380      	movs	r3, #128	; 0x80
 80041a2:	021b      	lsls	r3, r3, #8
 80041a4:	613b      	str	r3, [r7, #16]
 80041a6:	e00b      	b.n	80041c0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80041a8:	4b08      	ldr	r3, [pc, #32]	; (80041cc <HAL_RCC_GetSysClockFreq+0xf8>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2238      	movs	r2, #56	; 0x38
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b18      	cmp	r3, #24
 80041b2:	d103      	bne.n	80041bc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80041b4:	23fa      	movs	r3, #250	; 0xfa
 80041b6:	01db      	lsls	r3, r3, #7
 80041b8:	613b      	str	r3, [r7, #16]
 80041ba:	e001      	b.n	80041c0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80041c0:	693b      	ldr	r3, [r7, #16]
}
 80041c2:	0018      	movs	r0, r3
 80041c4:	46bd      	mov	sp, r7
 80041c6:	b006      	add	sp, #24
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	46c0      	nop			; (mov r8, r8)
 80041cc:	40021000 	.word	0x40021000
 80041d0:	00f42400 	.word	0x00f42400

080041d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041d8:	4b02      	ldr	r3, [pc, #8]	; (80041e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80041da:	681b      	ldr	r3, [r3, #0]
}
 80041dc:	0018      	movs	r0, r3
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	20000004 	.word	0x20000004

080041e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041e8:	b5b0      	push	{r4, r5, r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80041ec:	f7ff fff2 	bl	80041d4 <HAL_RCC_GetHCLKFreq>
 80041f0:	0004      	movs	r4, r0
 80041f2:	f7ff fb4b 	bl	800388c <LL_RCC_GetAPB1Prescaler>
 80041f6:	0003      	movs	r3, r0
 80041f8:	0b1a      	lsrs	r2, r3, #12
 80041fa:	4b05      	ldr	r3, [pc, #20]	; (8004210 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041fc:	0092      	lsls	r2, r2, #2
 80041fe:	58d3      	ldr	r3, [r2, r3]
 8004200:	221f      	movs	r2, #31
 8004202:	4013      	ands	r3, r2
 8004204:	40dc      	lsrs	r4, r3
 8004206:	0023      	movs	r3, r4
}
 8004208:	0018      	movs	r0, r3
 800420a:	46bd      	mov	sp, r7
 800420c:	bdb0      	pop	{r4, r5, r7, pc}
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	080066bc 	.word	0x080066bc

08004214 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2207      	movs	r2, #7
 8004222:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004224:	4b0e      	ldr	r3, [pc, #56]	; (8004260 <HAL_RCC_GetClockConfig+0x4c>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	2207      	movs	r2, #7
 800422a:	401a      	ands	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004230:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <HAL_RCC_GetClockConfig+0x4c>)
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	23f0      	movs	r3, #240	; 0xf0
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	401a      	ands	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800423e:	4b08      	ldr	r3, [pc, #32]	; (8004260 <HAL_RCC_GetClockConfig+0x4c>)
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	23e0      	movs	r3, #224	; 0xe0
 8004244:	01db      	lsls	r3, r3, #7
 8004246:	401a      	ands	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <HAL_RCC_GetClockConfig+0x50>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2207      	movs	r2, #7
 8004252:	401a      	ands	r2, r3
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	601a      	str	r2, [r3, #0]
}
 8004258:	46c0      	nop			; (mov r8, r8)
 800425a:	46bd      	mov	sp, r7
 800425c:	b002      	add	sp, #8
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40021000 	.word	0x40021000
 8004264:	40022000 	.word	0x40022000

08004268 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004270:	2313      	movs	r3, #19
 8004272:	18fb      	adds	r3, r7, r3
 8004274:	2200      	movs	r2, #0
 8004276:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004278:	2312      	movs	r3, #18
 800427a:	18fb      	adds	r3, r7, r3
 800427c:	2200      	movs	r2, #0
 800427e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	2380      	movs	r3, #128	; 0x80
 8004286:	029b      	lsls	r3, r3, #10
 8004288:	4013      	ands	r3, r2
 800428a:	d100      	bne.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800428c:	e0a3      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800428e:	2011      	movs	r0, #17
 8004290:	183b      	adds	r3, r7, r0
 8004292:	2200      	movs	r2, #0
 8004294:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004296:	4b86      	ldr	r3, [pc, #536]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004298:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800429a:	2380      	movs	r3, #128	; 0x80
 800429c:	055b      	lsls	r3, r3, #21
 800429e:	4013      	ands	r3, r2
 80042a0:	d110      	bne.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042a2:	4b83      	ldr	r3, [pc, #524]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80042a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042a6:	4b82      	ldr	r3, [pc, #520]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80042a8:	2180      	movs	r1, #128	; 0x80
 80042aa:	0549      	lsls	r1, r1, #21
 80042ac:	430a      	orrs	r2, r1
 80042ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80042b0:	4b7f      	ldr	r3, [pc, #508]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80042b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042b4:	2380      	movs	r3, #128	; 0x80
 80042b6:	055b      	lsls	r3, r3, #21
 80042b8:	4013      	ands	r3, r2
 80042ba:	60bb      	str	r3, [r7, #8]
 80042bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042be:	183b      	adds	r3, r7, r0
 80042c0:	2201      	movs	r2, #1
 80042c2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042c4:	4b7b      	ldr	r3, [pc, #492]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	4b7a      	ldr	r3, [pc, #488]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80042ca:	2180      	movs	r1, #128	; 0x80
 80042cc:	0049      	lsls	r1, r1, #1
 80042ce:	430a      	orrs	r2, r1
 80042d0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042d2:	f7fd fff7 	bl	80022c4 <HAL_GetTick>
 80042d6:	0003      	movs	r3, r0
 80042d8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042da:	e00b      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042dc:	f7fd fff2 	bl	80022c4 <HAL_GetTick>
 80042e0:	0002      	movs	r2, r0
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d904      	bls.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80042ea:	2313      	movs	r3, #19
 80042ec:	18fb      	adds	r3, r7, r3
 80042ee:	2203      	movs	r2, #3
 80042f0:	701a      	strb	r2, [r3, #0]
        break;
 80042f2:	e005      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042f4:	4b6f      	ldr	r3, [pc, #444]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	2380      	movs	r3, #128	; 0x80
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	4013      	ands	r3, r2
 80042fe:	d0ed      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004300:	2313      	movs	r3, #19
 8004302:	18fb      	adds	r3, r7, r3
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d154      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800430a:	4b69      	ldr	r3, [pc, #420]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800430c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800430e:	23c0      	movs	r3, #192	; 0xc0
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4013      	ands	r3, r2
 8004314:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d019      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	429a      	cmp	r2, r3
 8004324:	d014      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004326:	4b62      	ldr	r3, [pc, #392]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432a:	4a63      	ldr	r2, [pc, #396]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800432c:	4013      	ands	r3, r2
 800432e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004330:	4b5f      	ldr	r3, [pc, #380]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004332:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004334:	4b5e      	ldr	r3, [pc, #376]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004336:	2180      	movs	r1, #128	; 0x80
 8004338:	0249      	lsls	r1, r1, #9
 800433a:	430a      	orrs	r2, r1
 800433c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800433e:	4b5c      	ldr	r3, [pc, #368]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004340:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004342:	4b5b      	ldr	r3, [pc, #364]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004344:	495d      	ldr	r1, [pc, #372]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004346:	400a      	ands	r2, r1
 8004348:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800434a:	4b59      	ldr	r3, [pc, #356]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	2201      	movs	r2, #1
 8004354:	4013      	ands	r3, r2
 8004356:	d016      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004358:	f7fd ffb4 	bl	80022c4 <HAL_GetTick>
 800435c:	0003      	movs	r3, r0
 800435e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004360:	e00c      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004362:	f7fd ffaf 	bl	80022c4 <HAL_GetTick>
 8004366:	0002      	movs	r2, r0
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	4a54      	ldr	r2, [pc, #336]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d904      	bls.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004372:	2313      	movs	r3, #19
 8004374:	18fb      	adds	r3, r7, r3
 8004376:	2203      	movs	r2, #3
 8004378:	701a      	strb	r2, [r3, #0]
            break;
 800437a:	e004      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800437c:	4b4c      	ldr	r3, [pc, #304]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800437e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004380:	2202      	movs	r2, #2
 8004382:	4013      	ands	r3, r2
 8004384:	d0ed      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004386:	2313      	movs	r3, #19
 8004388:	18fb      	adds	r3, r7, r3
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10a      	bne.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004390:	4b47      	ldr	r3, [pc, #284]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004394:	4a48      	ldr	r2, [pc, #288]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004396:	4013      	ands	r3, r2
 8004398:	0019      	movs	r1, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	699a      	ldr	r2, [r3, #24]
 800439e:	4b44      	ldr	r3, [pc, #272]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043a0:	430a      	orrs	r2, r1
 80043a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80043a4:	e00c      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043a6:	2312      	movs	r3, #18
 80043a8:	18fb      	adds	r3, r7, r3
 80043aa:	2213      	movs	r2, #19
 80043ac:	18ba      	adds	r2, r7, r2
 80043ae:	7812      	ldrb	r2, [r2, #0]
 80043b0:	701a      	strb	r2, [r3, #0]
 80043b2:	e005      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b4:	2312      	movs	r3, #18
 80043b6:	18fb      	adds	r3, r7, r3
 80043b8:	2213      	movs	r2, #19
 80043ba:	18ba      	adds	r2, r7, r2
 80043bc:	7812      	ldrb	r2, [r2, #0]
 80043be:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043c0:	2311      	movs	r3, #17
 80043c2:	18fb      	adds	r3, r7, r3
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d105      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ca:	4b39      	ldr	r3, [pc, #228]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043ce:	4b38      	ldr	r3, [pc, #224]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043d0:	493c      	ldr	r1, [pc, #240]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80043d2:	400a      	ands	r2, r1
 80043d4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2201      	movs	r2, #1
 80043dc:	4013      	ands	r3, r2
 80043de:	d009      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043e0:	4b33      	ldr	r3, [pc, #204]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e4:	2203      	movs	r2, #3
 80043e6:	4393      	bics	r3, r2
 80043e8:	0019      	movs	r1, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	4b30      	ldr	r3, [pc, #192]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043f0:	430a      	orrs	r2, r1
 80043f2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2202      	movs	r2, #2
 80043fa:	4013      	ands	r3, r2
 80043fc:	d009      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043fe:	4b2c      	ldr	r3, [pc, #176]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004402:	220c      	movs	r2, #12
 8004404:	4393      	bics	r3, r2
 8004406:	0019      	movs	r1, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	4b28      	ldr	r3, [pc, #160]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800440e:	430a      	orrs	r2, r1
 8004410:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2220      	movs	r2, #32
 8004418:	4013      	ands	r3, r2
 800441a:	d009      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800441c:	4b24      	ldr	r3, [pc, #144]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800441e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004420:	4a29      	ldr	r2, [pc, #164]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004422:	4013      	ands	r3, r2
 8004424:	0019      	movs	r1, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68da      	ldr	r2, [r3, #12]
 800442a:	4b21      	ldr	r3, [pc, #132]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800442c:	430a      	orrs	r2, r1
 800442e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	2380      	movs	r3, #128	; 0x80
 8004436:	01db      	lsls	r3, r3, #7
 8004438:	4013      	ands	r3, r2
 800443a:	d015      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800443c:	4b1c      	ldr	r3, [pc, #112]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800443e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	0899      	lsrs	r1, r3, #2
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	695a      	ldr	r2, [r3, #20]
 8004448:	4b19      	ldr	r3, [pc, #100]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800444a:	430a      	orrs	r2, r1
 800444c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	695a      	ldr	r2, [r3, #20]
 8004452:	2380      	movs	r3, #128	; 0x80
 8004454:	05db      	lsls	r3, r3, #23
 8004456:	429a      	cmp	r2, r3
 8004458:	d106      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800445a:	4b15      	ldr	r3, [pc, #84]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	4b14      	ldr	r3, [pc, #80]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004460:	2180      	movs	r1, #128	; 0x80
 8004462:	0249      	lsls	r1, r1, #9
 8004464:	430a      	orrs	r2, r1
 8004466:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	2380      	movs	r3, #128	; 0x80
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	4013      	ands	r3, r2
 8004472:	d016      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004474:	4b0e      	ldr	r3, [pc, #56]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004478:	4a14      	ldr	r2, [pc, #80]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800447a:	4013      	ands	r3, r2
 800447c:	0019      	movs	r1, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691a      	ldr	r2, [r3, #16]
 8004482:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004484:	430a      	orrs	r2, r1
 8004486:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691a      	ldr	r2, [r3, #16]
 800448c:	2380      	movs	r3, #128	; 0x80
 800448e:	01db      	lsls	r3, r3, #7
 8004490:	429a      	cmp	r2, r3
 8004492:	d106      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004494:	4b06      	ldr	r3, [pc, #24]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800449a:	2180      	movs	r1, #128	; 0x80
 800449c:	0249      	lsls	r1, r1, #9
 800449e:	430a      	orrs	r2, r1
 80044a0:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80044a2:	2312      	movs	r3, #18
 80044a4:	18fb      	adds	r3, r7, r3
 80044a6:	781b      	ldrb	r3, [r3, #0]
}
 80044a8:	0018      	movs	r0, r3
 80044aa:	46bd      	mov	sp, r7
 80044ac:	b006      	add	sp, #24
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40021000 	.word	0x40021000
 80044b4:	40007000 	.word	0x40007000
 80044b8:	fffffcff 	.word	0xfffffcff
 80044bc:	fffeffff 	.word	0xfffeffff
 80044c0:	00001388 	.word	0x00001388
 80044c4:	efffffff 	.word	0xefffffff
 80044c8:	ffffcfff 	.word	0xffffcfff
 80044cc:	ffff3fff 	.word	0xffff3fff

080044d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e0a8      	b.n	8004634 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d109      	bne.n	80044fe <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	2382      	movs	r3, #130	; 0x82
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d009      	beq.n	800450a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	61da      	str	r2, [r3, #28]
 80044fc:	e005      	b.n	800450a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	225d      	movs	r2, #93	; 0x5d
 8004514:	5c9b      	ldrb	r3, [r3, r2]
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d107      	bne.n	800452c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	225c      	movs	r2, #92	; 0x5c
 8004520:	2100      	movs	r1, #0
 8004522:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	0018      	movs	r0, r3
 8004528:	f7fc fefc 	bl	8001324 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	225d      	movs	r2, #93	; 0x5d
 8004530:	2102      	movs	r1, #2
 8004532:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2140      	movs	r1, #64	; 0x40
 8004540:	438a      	bics	r2, r1
 8004542:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	23e0      	movs	r3, #224	; 0xe0
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	429a      	cmp	r2, r3
 800454e:	d902      	bls.n	8004556 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004550:	2300      	movs	r3, #0
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	e002      	b.n	800455c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004556:	2380      	movs	r3, #128	; 0x80
 8004558:	015b      	lsls	r3, r3, #5
 800455a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68da      	ldr	r2, [r3, #12]
 8004560:	23f0      	movs	r3, #240	; 0xf0
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	429a      	cmp	r2, r3
 8004566:	d008      	beq.n	800457a <HAL_SPI_Init+0xaa>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68da      	ldr	r2, [r3, #12]
 800456c:	23e0      	movs	r3, #224	; 0xe0
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	429a      	cmp	r2, r3
 8004572:	d002      	beq.n	800457a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	2382      	movs	r3, #130	; 0x82
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	401a      	ands	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6899      	ldr	r1, [r3, #8]
 8004588:	2384      	movs	r3, #132	; 0x84
 800458a:	021b      	lsls	r3, r3, #8
 800458c:	400b      	ands	r3, r1
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	2102      	movs	r1, #2
 8004596:	400b      	ands	r3, r1
 8004598:	431a      	orrs	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	2101      	movs	r1, #1
 80045a0:	400b      	ands	r3, r1
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6999      	ldr	r1, [r3, #24]
 80045a8:	2380      	movs	r3, #128	; 0x80
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	400b      	ands	r3, r1
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	2138      	movs	r1, #56	; 0x38
 80045b6:	400b      	ands	r3, r1
 80045b8:	431a      	orrs	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	2180      	movs	r1, #128	; 0x80
 80045c0:	400b      	ands	r3, r1
 80045c2:	431a      	orrs	r2, r3
 80045c4:	0011      	movs	r1, r2
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045ca:	2380      	movs	r3, #128	; 0x80
 80045cc:	019b      	lsls	r3, r3, #6
 80045ce:	401a      	ands	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	0c1b      	lsrs	r3, r3, #16
 80045de:	2204      	movs	r2, #4
 80045e0:	401a      	ands	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	2110      	movs	r1, #16
 80045e8:	400b      	ands	r3, r1
 80045ea:	431a      	orrs	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f0:	2108      	movs	r1, #8
 80045f2:	400b      	ands	r3, r1
 80045f4:	431a      	orrs	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68d9      	ldr	r1, [r3, #12]
 80045fa:	23f0      	movs	r3, #240	; 0xf0
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	400b      	ands	r3, r1
 8004600:	431a      	orrs	r2, r3
 8004602:	0011      	movs	r1, r2
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	2380      	movs	r3, #128	; 0x80
 8004608:	015b      	lsls	r3, r3, #5
 800460a:	401a      	ands	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	69da      	ldr	r2, [r3, #28]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4907      	ldr	r1, [pc, #28]	; (800463c <HAL_SPI_Init+0x16c>)
 8004620:	400a      	ands	r2, r1
 8004622:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	225d      	movs	r2, #93	; 0x5d
 800462e:	2101      	movs	r1, #1
 8004630:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	0018      	movs	r0, r3
 8004636:	46bd      	mov	sp, r7
 8004638:	b004      	add	sp, #16
 800463a:	bd80      	pop	{r7, pc}
 800463c:	fffff7ff 	.word	0xfffff7ff

08004640 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e04a      	b.n	80046e8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	223d      	movs	r2, #61	; 0x3d
 8004656:	5c9b      	ldrb	r3, [r3, r2]
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d107      	bne.n	800466e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	223c      	movs	r2, #60	; 0x3c
 8004662:	2100      	movs	r1, #0
 8004664:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	0018      	movs	r0, r3
 800466a:	f7fd fb75 	bl	8001d58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	223d      	movs	r2, #61	; 0x3d
 8004672:	2102      	movs	r1, #2
 8004674:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	3304      	adds	r3, #4
 800467e:	0019      	movs	r1, r3
 8004680:	0010      	movs	r0, r2
 8004682:	f000 fe57 	bl	8005334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2248      	movs	r2, #72	; 0x48
 800468a:	2101      	movs	r1, #1
 800468c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	223e      	movs	r2, #62	; 0x3e
 8004692:	2101      	movs	r1, #1
 8004694:	5499      	strb	r1, [r3, r2]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	223f      	movs	r2, #63	; 0x3f
 800469a:	2101      	movs	r1, #1
 800469c:	5499      	strb	r1, [r3, r2]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2240      	movs	r2, #64	; 0x40
 80046a2:	2101      	movs	r1, #1
 80046a4:	5499      	strb	r1, [r3, r2]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2241      	movs	r2, #65	; 0x41
 80046aa:	2101      	movs	r1, #1
 80046ac:	5499      	strb	r1, [r3, r2]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2242      	movs	r2, #66	; 0x42
 80046b2:	2101      	movs	r1, #1
 80046b4:	5499      	strb	r1, [r3, r2]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2243      	movs	r2, #67	; 0x43
 80046ba:	2101      	movs	r1, #1
 80046bc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2244      	movs	r2, #68	; 0x44
 80046c2:	2101      	movs	r1, #1
 80046c4:	5499      	strb	r1, [r3, r2]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2245      	movs	r2, #69	; 0x45
 80046ca:	2101      	movs	r1, #1
 80046cc:	5499      	strb	r1, [r3, r2]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2246      	movs	r2, #70	; 0x46
 80046d2:	2101      	movs	r1, #1
 80046d4:	5499      	strb	r1, [r3, r2]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2247      	movs	r2, #71	; 0x47
 80046da:	2101      	movs	r1, #1
 80046dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	223d      	movs	r2, #61	; 0x3d
 80046e2:	2101      	movs	r1, #1
 80046e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	0018      	movs	r0, r3
 80046ea:	46bd      	mov	sp, r7
 80046ec:	b002      	add	sp, #8
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	223d      	movs	r2, #61	; 0x3d
 80046fc:	5c9b      	ldrb	r3, [r3, r2]
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b01      	cmp	r3, #1
 8004702:	d001      	beq.n	8004708 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e034      	b.n	8004772 <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	223d      	movs	r2, #61	; 0x3d
 800470c:	2102      	movs	r1, #2
 800470e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a19      	ldr	r2, [pc, #100]	; (800477c <HAL_TIM_Base_Start+0x8c>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d009      	beq.n	800472e <HAL_TIM_Base_Start+0x3e>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a18      	ldr	r2, [pc, #96]	; (8004780 <HAL_TIM_Base_Start+0x90>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d004      	beq.n	800472e <HAL_TIM_Base_Start+0x3e>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a16      	ldr	r2, [pc, #88]	; (8004784 <HAL_TIM_Base_Start+0x94>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d116      	bne.n	800475c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	4a14      	ldr	r2, [pc, #80]	; (8004788 <HAL_TIM_Base_Start+0x98>)
 8004736:	4013      	ands	r3, r2
 8004738:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2b06      	cmp	r3, #6
 800473e:	d016      	beq.n	800476e <HAL_TIM_Base_Start+0x7e>
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	2380      	movs	r3, #128	; 0x80
 8004744:	025b      	lsls	r3, r3, #9
 8004746:	429a      	cmp	r2, r3
 8004748:	d011      	beq.n	800476e <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2101      	movs	r1, #1
 8004756:	430a      	orrs	r2, r1
 8004758:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800475a:	e008      	b.n	800476e <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2101      	movs	r1, #1
 8004768:	430a      	orrs	r2, r1
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	e000      	b.n	8004770 <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800476e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	0018      	movs	r0, r3
 8004774:	46bd      	mov	sp, r7
 8004776:	b004      	add	sp, #16
 8004778:	bd80      	pop	{r7, pc}
 800477a:	46c0      	nop			; (mov r8, r8)
 800477c:	40012c00 	.word	0x40012c00
 8004780:	40000400 	.word	0x40000400
 8004784:	40014000 	.word	0x40014000
 8004788:	00010007 	.word	0x00010007

0800478c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	223d      	movs	r2, #61	; 0x3d
 8004798:	5c9b      	ldrb	r3, [r3, r2]
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b01      	cmp	r3, #1
 800479e:	d001      	beq.n	80047a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e03c      	b.n	800481e <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	223d      	movs	r2, #61	; 0x3d
 80047a8:	2102      	movs	r1, #2
 80047aa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2101      	movs	r1, #1
 80047b8:	430a      	orrs	r2, r1
 80047ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a19      	ldr	r2, [pc, #100]	; (8004828 <HAL_TIM_Base_Start_IT+0x9c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d009      	beq.n	80047da <HAL_TIM_Base_Start_IT+0x4e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a18      	ldr	r2, [pc, #96]	; (800482c <HAL_TIM_Base_Start_IT+0xa0>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d004      	beq.n	80047da <HAL_TIM_Base_Start_IT+0x4e>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a16      	ldr	r2, [pc, #88]	; (8004830 <HAL_TIM_Base_Start_IT+0xa4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d116      	bne.n	8004808 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	4a14      	ldr	r2, [pc, #80]	; (8004834 <HAL_TIM_Base_Start_IT+0xa8>)
 80047e2:	4013      	ands	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b06      	cmp	r3, #6
 80047ea:	d016      	beq.n	800481a <HAL_TIM_Base_Start_IT+0x8e>
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	2380      	movs	r3, #128	; 0x80
 80047f0:	025b      	lsls	r3, r3, #9
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d011      	beq.n	800481a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2101      	movs	r1, #1
 8004802:	430a      	orrs	r2, r1
 8004804:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004806:	e008      	b.n	800481a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2101      	movs	r1, #1
 8004814:	430a      	orrs	r2, r1
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	e000      	b.n	800481c <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800481a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	0018      	movs	r0, r3
 8004820:	46bd      	mov	sp, r7
 8004822:	b004      	add	sp, #16
 8004824:	bd80      	pop	{r7, pc}
 8004826:	46c0      	nop			; (mov r8, r8)
 8004828:	40012c00 	.word	0x40012c00
 800482c:	40000400 	.word	0x40000400
 8004830:	40014000 	.word	0x40014000
 8004834:	00010007 	.word	0x00010007

08004838 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e04a      	b.n	80048e0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	223d      	movs	r2, #61	; 0x3d
 800484e:	5c9b      	ldrb	r3, [r3, r2]
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d107      	bne.n	8004866 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	223c      	movs	r2, #60	; 0x3c
 800485a:	2100      	movs	r1, #0
 800485c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	0018      	movs	r0, r3
 8004862:	f7fd fad9 	bl	8001e18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	223d      	movs	r2, #61	; 0x3d
 800486a:	2102      	movs	r1, #2
 800486c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	3304      	adds	r3, #4
 8004876:	0019      	movs	r1, r3
 8004878:	0010      	movs	r0, r2
 800487a:	f000 fd5b 	bl	8005334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2248      	movs	r2, #72	; 0x48
 8004882:	2101      	movs	r1, #1
 8004884:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	223e      	movs	r2, #62	; 0x3e
 800488a:	2101      	movs	r1, #1
 800488c:	5499      	strb	r1, [r3, r2]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	223f      	movs	r2, #63	; 0x3f
 8004892:	2101      	movs	r1, #1
 8004894:	5499      	strb	r1, [r3, r2]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2240      	movs	r2, #64	; 0x40
 800489a:	2101      	movs	r1, #1
 800489c:	5499      	strb	r1, [r3, r2]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2241      	movs	r2, #65	; 0x41
 80048a2:	2101      	movs	r1, #1
 80048a4:	5499      	strb	r1, [r3, r2]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2242      	movs	r2, #66	; 0x42
 80048aa:	2101      	movs	r1, #1
 80048ac:	5499      	strb	r1, [r3, r2]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2243      	movs	r2, #67	; 0x43
 80048b2:	2101      	movs	r1, #1
 80048b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2244      	movs	r2, #68	; 0x44
 80048ba:	2101      	movs	r1, #1
 80048bc:	5499      	strb	r1, [r3, r2]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2245      	movs	r2, #69	; 0x45
 80048c2:	2101      	movs	r1, #1
 80048c4:	5499      	strb	r1, [r3, r2]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2246      	movs	r2, #70	; 0x46
 80048ca:	2101      	movs	r1, #1
 80048cc:	5499      	strb	r1, [r3, r2]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2247      	movs	r2, #71	; 0x47
 80048d2:	2101      	movs	r1, #1
 80048d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	223d      	movs	r2, #61	; 0x3d
 80048da:	2101      	movs	r1, #1
 80048dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	0018      	movs	r0, r3
 80048e2:	46bd      	mov	sp, r7
 80048e4:	b002      	add	sp, #8
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d108      	bne.n	800490a <HAL_TIM_PWM_Start+0x22>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	223e      	movs	r2, #62	; 0x3e
 80048fc:	5c9b      	ldrb	r3, [r3, r2]
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	3b01      	subs	r3, #1
 8004902:	1e5a      	subs	r2, r3, #1
 8004904:	4193      	sbcs	r3, r2
 8004906:	b2db      	uxtb	r3, r3
 8004908:	e037      	b.n	800497a <HAL_TIM_PWM_Start+0x92>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b04      	cmp	r3, #4
 800490e:	d108      	bne.n	8004922 <HAL_TIM_PWM_Start+0x3a>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	223f      	movs	r2, #63	; 0x3f
 8004914:	5c9b      	ldrb	r3, [r3, r2]
 8004916:	b2db      	uxtb	r3, r3
 8004918:	3b01      	subs	r3, #1
 800491a:	1e5a      	subs	r2, r3, #1
 800491c:	4193      	sbcs	r3, r2
 800491e:	b2db      	uxtb	r3, r3
 8004920:	e02b      	b.n	800497a <HAL_TIM_PWM_Start+0x92>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b08      	cmp	r3, #8
 8004926:	d108      	bne.n	800493a <HAL_TIM_PWM_Start+0x52>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2240      	movs	r2, #64	; 0x40
 800492c:	5c9b      	ldrb	r3, [r3, r2]
 800492e:	b2db      	uxtb	r3, r3
 8004930:	3b01      	subs	r3, #1
 8004932:	1e5a      	subs	r2, r3, #1
 8004934:	4193      	sbcs	r3, r2
 8004936:	b2db      	uxtb	r3, r3
 8004938:	e01f      	b.n	800497a <HAL_TIM_PWM_Start+0x92>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b0c      	cmp	r3, #12
 800493e:	d108      	bne.n	8004952 <HAL_TIM_PWM_Start+0x6a>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2241      	movs	r2, #65	; 0x41
 8004944:	5c9b      	ldrb	r3, [r3, r2]
 8004946:	b2db      	uxtb	r3, r3
 8004948:	3b01      	subs	r3, #1
 800494a:	1e5a      	subs	r2, r3, #1
 800494c:	4193      	sbcs	r3, r2
 800494e:	b2db      	uxtb	r3, r3
 8004950:	e013      	b.n	800497a <HAL_TIM_PWM_Start+0x92>
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b10      	cmp	r3, #16
 8004956:	d108      	bne.n	800496a <HAL_TIM_PWM_Start+0x82>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2242      	movs	r2, #66	; 0x42
 800495c:	5c9b      	ldrb	r3, [r3, r2]
 800495e:	b2db      	uxtb	r3, r3
 8004960:	3b01      	subs	r3, #1
 8004962:	1e5a      	subs	r2, r3, #1
 8004964:	4193      	sbcs	r3, r2
 8004966:	b2db      	uxtb	r3, r3
 8004968:	e007      	b.n	800497a <HAL_TIM_PWM_Start+0x92>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2243      	movs	r2, #67	; 0x43
 800496e:	5c9b      	ldrb	r3, [r3, r2]
 8004970:	b2db      	uxtb	r3, r3
 8004972:	3b01      	subs	r3, #1
 8004974:	1e5a      	subs	r2, r3, #1
 8004976:	4193      	sbcs	r3, r2
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e085      	b.n	8004a8e <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d104      	bne.n	8004992 <HAL_TIM_PWM_Start+0xaa>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	223e      	movs	r2, #62	; 0x3e
 800498c:	2102      	movs	r1, #2
 800498e:	5499      	strb	r1, [r3, r2]
 8004990:	e023      	b.n	80049da <HAL_TIM_PWM_Start+0xf2>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b04      	cmp	r3, #4
 8004996:	d104      	bne.n	80049a2 <HAL_TIM_PWM_Start+0xba>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	223f      	movs	r2, #63	; 0x3f
 800499c:	2102      	movs	r1, #2
 800499e:	5499      	strb	r1, [r3, r2]
 80049a0:	e01b      	b.n	80049da <HAL_TIM_PWM_Start+0xf2>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	d104      	bne.n	80049b2 <HAL_TIM_PWM_Start+0xca>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2240      	movs	r2, #64	; 0x40
 80049ac:	2102      	movs	r1, #2
 80049ae:	5499      	strb	r1, [r3, r2]
 80049b0:	e013      	b.n	80049da <HAL_TIM_PWM_Start+0xf2>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b0c      	cmp	r3, #12
 80049b6:	d104      	bne.n	80049c2 <HAL_TIM_PWM_Start+0xda>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2241      	movs	r2, #65	; 0x41
 80049bc:	2102      	movs	r1, #2
 80049be:	5499      	strb	r1, [r3, r2]
 80049c0:	e00b      	b.n	80049da <HAL_TIM_PWM_Start+0xf2>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b10      	cmp	r3, #16
 80049c6:	d104      	bne.n	80049d2 <HAL_TIM_PWM_Start+0xea>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2242      	movs	r2, #66	; 0x42
 80049cc:	2102      	movs	r1, #2
 80049ce:	5499      	strb	r1, [r3, r2]
 80049d0:	e003      	b.n	80049da <HAL_TIM_PWM_Start+0xf2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2243      	movs	r2, #67	; 0x43
 80049d6:	2102      	movs	r1, #2
 80049d8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6839      	ldr	r1, [r7, #0]
 80049e0:	2201      	movs	r2, #1
 80049e2:	0018      	movs	r0, r3
 80049e4:	f000 ffe0 	bl	80059a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a2a      	ldr	r2, [pc, #168]	; (8004a98 <HAL_TIM_PWM_Start+0x1b0>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d00e      	beq.n	8004a10 <HAL_TIM_PWM_Start+0x128>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a29      	ldr	r2, [pc, #164]	; (8004a9c <HAL_TIM_PWM_Start+0x1b4>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d009      	beq.n	8004a10 <HAL_TIM_PWM_Start+0x128>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a27      	ldr	r2, [pc, #156]	; (8004aa0 <HAL_TIM_PWM_Start+0x1b8>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d004      	beq.n	8004a10 <HAL_TIM_PWM_Start+0x128>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a26      	ldr	r2, [pc, #152]	; (8004aa4 <HAL_TIM_PWM_Start+0x1bc>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d101      	bne.n	8004a14 <HAL_TIM_PWM_Start+0x12c>
 8004a10:	2301      	movs	r3, #1
 8004a12:	e000      	b.n	8004a16 <HAL_TIM_PWM_Start+0x12e>
 8004a14:	2300      	movs	r3, #0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d008      	beq.n	8004a2c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2180      	movs	r1, #128	; 0x80
 8004a26:	0209      	lsls	r1, r1, #8
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a19      	ldr	r2, [pc, #100]	; (8004a98 <HAL_TIM_PWM_Start+0x1b0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d009      	beq.n	8004a4a <HAL_TIM_PWM_Start+0x162>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a1b      	ldr	r2, [pc, #108]	; (8004aa8 <HAL_TIM_PWM_Start+0x1c0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d004      	beq.n	8004a4a <HAL_TIM_PWM_Start+0x162>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a15      	ldr	r2, [pc, #84]	; (8004a9c <HAL_TIM_PWM_Start+0x1b4>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d116      	bne.n	8004a78 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	4a16      	ldr	r2, [pc, #88]	; (8004aac <HAL_TIM_PWM_Start+0x1c4>)
 8004a52:	4013      	ands	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2b06      	cmp	r3, #6
 8004a5a:	d016      	beq.n	8004a8a <HAL_TIM_PWM_Start+0x1a2>
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	2380      	movs	r3, #128	; 0x80
 8004a60:	025b      	lsls	r3, r3, #9
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d011      	beq.n	8004a8a <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2101      	movs	r1, #1
 8004a72:	430a      	orrs	r2, r1
 8004a74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a76:	e008      	b.n	8004a8a <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2101      	movs	r1, #1
 8004a84:	430a      	orrs	r2, r1
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	e000      	b.n	8004a8c <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a8a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	0018      	movs	r0, r3
 8004a90:	46bd      	mov	sp, r7
 8004a92:	b004      	add	sp, #16
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	46c0      	nop			; (mov r8, r8)
 8004a98:	40012c00 	.word	0x40012c00
 8004a9c:	40014000 	.word	0x40014000
 8004aa0:	40014400 	.word	0x40014400
 8004aa4:	40014800 	.word	0x40014800
 8004aa8:	40000400 	.word	0x40000400
 8004aac:	00010007 	.word	0x00010007

08004ab0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6839      	ldr	r1, [r7, #0]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	f000 ff70 	bl	80059a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a37      	ldr	r2, [pc, #220]	; (8004bac <HAL_TIM_PWM_Stop+0xfc>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d00e      	beq.n	8004af0 <HAL_TIM_PWM_Stop+0x40>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a36      	ldr	r2, [pc, #216]	; (8004bb0 <HAL_TIM_PWM_Stop+0x100>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d009      	beq.n	8004af0 <HAL_TIM_PWM_Stop+0x40>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a34      	ldr	r2, [pc, #208]	; (8004bb4 <HAL_TIM_PWM_Stop+0x104>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d004      	beq.n	8004af0 <HAL_TIM_PWM_Stop+0x40>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a33      	ldr	r2, [pc, #204]	; (8004bb8 <HAL_TIM_PWM_Stop+0x108>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d101      	bne.n	8004af4 <HAL_TIM_PWM_Stop+0x44>
 8004af0:	2301      	movs	r3, #1
 8004af2:	e000      	b.n	8004af6 <HAL_TIM_PWM_Stop+0x46>
 8004af4:	2300      	movs	r3, #0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d013      	beq.n	8004b22 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	4a2e      	ldr	r2, [pc, #184]	; (8004bbc <HAL_TIM_PWM_Stop+0x10c>)
 8004b02:	4013      	ands	r3, r2
 8004b04:	d10d      	bne.n	8004b22 <HAL_TIM_PWM_Stop+0x72>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	4a2c      	ldr	r2, [pc, #176]	; (8004bc0 <HAL_TIM_PWM_Stop+0x110>)
 8004b0e:	4013      	ands	r3, r2
 8004b10:	d107      	bne.n	8004b22 <HAL_TIM_PWM_Stop+0x72>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4929      	ldr	r1, [pc, #164]	; (8004bc4 <HAL_TIM_PWM_Stop+0x114>)
 8004b1e:	400a      	ands	r2, r1
 8004b20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	4a24      	ldr	r2, [pc, #144]	; (8004bbc <HAL_TIM_PWM_Stop+0x10c>)
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	d10d      	bne.n	8004b4a <HAL_TIM_PWM_Stop+0x9a>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	4a22      	ldr	r2, [pc, #136]	; (8004bc0 <HAL_TIM_PWM_Stop+0x110>)
 8004b36:	4013      	ands	r3, r2
 8004b38:	d107      	bne.n	8004b4a <HAL_TIM_PWM_Stop+0x9a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2101      	movs	r1, #1
 8004b46:	438a      	bics	r2, r1
 8004b48:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d104      	bne.n	8004b5a <HAL_TIM_PWM_Stop+0xaa>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	223e      	movs	r2, #62	; 0x3e
 8004b54:	2101      	movs	r1, #1
 8004b56:	5499      	strb	r1, [r3, r2]
 8004b58:	e023      	b.n	8004ba2 <HAL_TIM_PWM_Stop+0xf2>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d104      	bne.n	8004b6a <HAL_TIM_PWM_Stop+0xba>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	223f      	movs	r2, #63	; 0x3f
 8004b64:	2101      	movs	r1, #1
 8004b66:	5499      	strb	r1, [r3, r2]
 8004b68:	e01b      	b.n	8004ba2 <HAL_TIM_PWM_Stop+0xf2>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b08      	cmp	r3, #8
 8004b6e:	d104      	bne.n	8004b7a <HAL_TIM_PWM_Stop+0xca>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2240      	movs	r2, #64	; 0x40
 8004b74:	2101      	movs	r1, #1
 8004b76:	5499      	strb	r1, [r3, r2]
 8004b78:	e013      	b.n	8004ba2 <HAL_TIM_PWM_Stop+0xf2>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b0c      	cmp	r3, #12
 8004b7e:	d104      	bne.n	8004b8a <HAL_TIM_PWM_Stop+0xda>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2241      	movs	r2, #65	; 0x41
 8004b84:	2101      	movs	r1, #1
 8004b86:	5499      	strb	r1, [r3, r2]
 8004b88:	e00b      	b.n	8004ba2 <HAL_TIM_PWM_Stop+0xf2>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b10      	cmp	r3, #16
 8004b8e:	d104      	bne.n	8004b9a <HAL_TIM_PWM_Stop+0xea>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2242      	movs	r2, #66	; 0x42
 8004b94:	2101      	movs	r1, #1
 8004b96:	5499      	strb	r1, [r3, r2]
 8004b98:	e003      	b.n	8004ba2 <HAL_TIM_PWM_Stop+0xf2>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2243      	movs	r2, #67	; 0x43
 8004b9e:	2101      	movs	r1, #1
 8004ba0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	b002      	add	sp, #8
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	40012c00 	.word	0x40012c00
 8004bb0:	40014000 	.word	0x40014000
 8004bb4:	40014400 	.word	0x40014400
 8004bb8:	40014800 	.word	0x40014800
 8004bbc:	00001111 	.word	0x00001111
 8004bc0:	00000444 	.word	0x00000444
 8004bc4:	ffff7fff 	.word	0xffff7fff

08004bc8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e090      	b.n	8004cfe <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	223d      	movs	r2, #61	; 0x3d
 8004be0:	5c9b      	ldrb	r3, [r3, r2]
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d107      	bne.n	8004bf8 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	223c      	movs	r2, #60	; 0x3c
 8004bec:	2100      	movs	r1, #0
 8004bee:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	0018      	movs	r0, r3
 8004bf4:	f7fd f81c 	bl	8001c30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	223d      	movs	r2, #61	; 0x3d
 8004bfc:	2102      	movs	r1, #2
 8004bfe:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689a      	ldr	r2, [r3, #8]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	493f      	ldr	r1, [pc, #252]	; (8004d08 <HAL_TIM_Encoder_Init+0x140>)
 8004c0c:	400a      	ands	r2, r1
 8004c0e:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3304      	adds	r3, #4
 8004c18:	0019      	movs	r1, r3
 8004c1a:	0010      	movs	r0, r2
 8004c1c:	f000 fb8a 	bl	8005334 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	4a31      	ldr	r2, [pc, #196]	; (8004d0c <HAL_TIM_Encoder_Init+0x144>)
 8004c46:	4013      	ands	r3, r2
 8004c48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	689a      	ldr	r2, [r3, #8]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	021b      	lsls	r3, r3, #8
 8004c54:	4313      	orrs	r3, r2
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	4a2c      	ldr	r2, [pc, #176]	; (8004d10 <HAL_TIM_Encoder_Init+0x148>)
 8004c60:	4013      	ands	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	4a2b      	ldr	r2, [pc, #172]	; (8004d14 <HAL_TIM_Encoder_Init+0x14c>)
 8004c68:	4013      	ands	r3, r2
 8004c6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	68da      	ldr	r2, [r3, #12]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	021b      	lsls	r3, r3, #8
 8004c76:	4313      	orrs	r3, r2
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	011a      	lsls	r2, r3, #4
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	031b      	lsls	r3, r3, #12
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2222      	movs	r2, #34	; 0x22
 8004c96:	4393      	bics	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2288      	movs	r2, #136	; 0x88
 8004c9e:	4393      	bics	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	011b      	lsls	r3, r3, #4
 8004cac:	4313      	orrs	r3, r2
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2248      	movs	r2, #72	; 0x48
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	223e      	movs	r2, #62	; 0x3e
 8004cd8:	2101      	movs	r1, #1
 8004cda:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	223f      	movs	r2, #63	; 0x3f
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2244      	movs	r2, #68	; 0x44
 8004ce8:	2101      	movs	r1, #1
 8004cea:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2245      	movs	r2, #69	; 0x45
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	223d      	movs	r2, #61	; 0x3d
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	0018      	movs	r0, r3
 8004d00:	46bd      	mov	sp, r7
 8004d02:	b006      	add	sp, #24
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	46c0      	nop			; (mov r8, r8)
 8004d08:	fffebff8 	.word	0xfffebff8
 8004d0c:	fffffcfc 	.word	0xfffffcfc
 8004d10:	fffff3f3 	.word	0xfffff3f3
 8004d14:	ffff0f0f 	.word	0xffff0f0f

08004d18 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d18:	b590      	push	{r4, r7, lr}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004d22:	200f      	movs	r0, #15
 8004d24:	183b      	adds	r3, r7, r0
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	213e      	movs	r1, #62	; 0x3e
 8004d2a:	5c52      	ldrb	r2, [r2, r1]
 8004d2c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004d2e:	230e      	movs	r3, #14
 8004d30:	18fb      	adds	r3, r7, r3
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	213f      	movs	r1, #63	; 0x3f
 8004d36:	5c52      	ldrb	r2, [r2, r1]
 8004d38:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004d3a:	240d      	movs	r4, #13
 8004d3c:	193b      	adds	r3, r7, r4
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	2144      	movs	r1, #68	; 0x44
 8004d42:	5c52      	ldrb	r2, [r2, r1]
 8004d44:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004d46:	230c      	movs	r3, #12
 8004d48:	18fb      	adds	r3, r7, r3
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	2145      	movs	r1, #69	; 0x45
 8004d4e:	5c52      	ldrb	r2, [r2, r1]
 8004d50:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d112      	bne.n	8004d7e <HAL_TIM_Encoder_Start_IT+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d58:	183b      	adds	r3, r7, r0
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d103      	bne.n	8004d68 <HAL_TIM_Encoder_Start_IT+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d60:	193b      	adds	r3, r7, r4
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d001      	beq.n	8004d6c <HAL_TIM_Encoder_Start_IT+0x54>
    {
      return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e095      	b.n	8004e98 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	223e      	movs	r2, #62	; 0x3e
 8004d70:	2102      	movs	r1, #2
 8004d72:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2244      	movs	r2, #68	; 0x44
 8004d78:	2102      	movs	r1, #2
 8004d7a:	5499      	strb	r1, [r3, r2]
 8004d7c:	e03d      	b.n	8004dfa <HAL_TIM_Encoder_Start_IT+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d114      	bne.n	8004dae <HAL_TIM_Encoder_Start_IT+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d84:	230e      	movs	r3, #14
 8004d86:	18fb      	adds	r3, r7, r3
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d104      	bne.n	8004d98 <HAL_TIM_Encoder_Start_IT+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d8e:	230c      	movs	r3, #12
 8004d90:	18fb      	adds	r3, r7, r3
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d001      	beq.n	8004d9c <HAL_TIM_Encoder_Start_IT+0x84>
    {
      return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e07d      	b.n	8004e98 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	223f      	movs	r2, #63	; 0x3f
 8004da0:	2102      	movs	r1, #2
 8004da2:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2245      	movs	r2, #69	; 0x45
 8004da8:	2102      	movs	r1, #2
 8004daa:	5499      	strb	r1, [r3, r2]
 8004dac:	e025      	b.n	8004dfa <HAL_TIM_Encoder_Start_IT+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dae:	230f      	movs	r3, #15
 8004db0:	18fb      	adds	r3, r7, r3
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d10e      	bne.n	8004dd6 <HAL_TIM_Encoder_Start_IT+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004db8:	230e      	movs	r3, #14
 8004dba:	18fb      	adds	r3, r7, r3
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d109      	bne.n	8004dd6 <HAL_TIM_Encoder_Start_IT+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dc2:	230d      	movs	r3, #13
 8004dc4:	18fb      	adds	r3, r7, r3
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d104      	bne.n	8004dd6 <HAL_TIM_Encoder_Start_IT+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004dcc:	230c      	movs	r3, #12
 8004dce:	18fb      	adds	r3, r7, r3
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d001      	beq.n	8004dda <HAL_TIM_Encoder_Start_IT+0xc2>
    {
      return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e05e      	b.n	8004e98 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	223e      	movs	r2, #62	; 0x3e
 8004dde:	2102      	movs	r1, #2
 8004de0:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	223f      	movs	r2, #63	; 0x3f
 8004de6:	2102      	movs	r1, #2
 8004de8:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2244      	movs	r2, #68	; 0x44
 8004dee:	2102      	movs	r1, #2
 8004df0:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2245      	movs	r2, #69	; 0x45
 8004df6:	2102      	movs	r1, #2
 8004df8:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <HAL_TIM_Encoder_Start_IT+0xf0>
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	2b04      	cmp	r3, #4
 8004e04:	d010      	beq.n	8004e28 <HAL_TIM_Encoder_Start_IT+0x110>
 8004e06:	e01f      	b.n	8004e48 <HAL_TIM_Encoder_Start_IT+0x130>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	2100      	movs	r1, #0
 8004e10:	0018      	movs	r0, r3
 8004e12:	f000 fdc9 	bl	80059a8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68da      	ldr	r2, [r3, #12]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2102      	movs	r1, #2
 8004e22:	430a      	orrs	r2, r1
 8004e24:	60da      	str	r2, [r3, #12]
      break;
 8004e26:	e02e      	b.n	8004e86 <HAL_TIM_Encoder_Start_IT+0x16e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	2104      	movs	r1, #4
 8004e30:	0018      	movs	r0, r3
 8004e32:	f000 fdb9 	bl	80059a8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68da      	ldr	r2, [r3, #12]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2104      	movs	r1, #4
 8004e42:	430a      	orrs	r2, r1
 8004e44:	60da      	str	r2, [r3, #12]
      break;
 8004e46:	e01e      	b.n	8004e86 <HAL_TIM_Encoder_Start_IT+0x16e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	2100      	movs	r1, #0
 8004e50:	0018      	movs	r0, r3
 8004e52:	f000 fda9 	bl	80059a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	2104      	movs	r1, #4
 8004e5e:	0018      	movs	r0, r3
 8004e60:	f000 fda2 	bl	80059a8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2102      	movs	r1, #2
 8004e70:	430a      	orrs	r2, r1
 8004e72:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2104      	movs	r1, #4
 8004e80:	430a      	orrs	r2, r1
 8004e82:	60da      	str	r2, [r3, #12]
      break;
 8004e84:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2101      	movs	r1, #1
 8004e92:	430a      	orrs	r2, r1
 8004e94:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	0018      	movs	r0, r3
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	b005      	add	sp, #20
 8004e9e:	bd90      	pop	{r4, r7, pc}

08004ea0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d124      	bne.n	8004f00 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	2202      	movs	r2, #2
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d11d      	bne.n	8004f00 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2203      	movs	r2, #3
 8004eca:	4252      	negs	r2, r2
 8004ecc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	2203      	movs	r2, #3
 8004edc:	4013      	ands	r3, r2
 8004ede:	d004      	beq.n	8004eea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	f7fb fb22 	bl	800052c <HAL_TIM_IC_CaptureCallback>
 8004ee8:	e007      	b.n	8004efa <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	0018      	movs	r0, r3
 8004eee:	f000 fa09 	bl	8005304 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	f000 fa0d 	bl	8005314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	2204      	movs	r2, #4
 8004f08:	4013      	ands	r3, r2
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	d125      	bne.n	8004f5a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	2204      	movs	r2, #4
 8004f16:	4013      	ands	r3, r2
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d11e      	bne.n	8004f5a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2205      	movs	r2, #5
 8004f22:	4252      	negs	r2, r2
 8004f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2202      	movs	r2, #2
 8004f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699a      	ldr	r2, [r3, #24]
 8004f32:	23c0      	movs	r3, #192	; 0xc0
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4013      	ands	r3, r2
 8004f38:	d004      	beq.n	8004f44 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	f7fb faf5 	bl	800052c <HAL_TIM_IC_CaptureCallback>
 8004f42:	e007      	b.n	8004f54 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	0018      	movs	r0, r3
 8004f48:	f000 f9dc 	bl	8005304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	0018      	movs	r0, r3
 8004f50:	f000 f9e0 	bl	8005314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	2208      	movs	r2, #8
 8004f62:	4013      	ands	r3, r2
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d124      	bne.n	8004fb2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	2208      	movs	r2, #8
 8004f70:	4013      	ands	r3, r2
 8004f72:	2b08      	cmp	r3, #8
 8004f74:	d11d      	bne.n	8004fb2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2209      	movs	r2, #9
 8004f7c:	4252      	negs	r2, r2
 8004f7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2204      	movs	r2, #4
 8004f84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	2203      	movs	r2, #3
 8004f8e:	4013      	ands	r3, r2
 8004f90:	d004      	beq.n	8004f9c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	0018      	movs	r0, r3
 8004f96:	f7fb fac9 	bl	800052c <HAL_TIM_IC_CaptureCallback>
 8004f9a:	e007      	b.n	8004fac <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	f000 f9b0 	bl	8005304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	f000 f9b4 	bl	8005314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	2210      	movs	r2, #16
 8004fba:	4013      	ands	r3, r2
 8004fbc:	2b10      	cmp	r3, #16
 8004fbe:	d125      	bne.n	800500c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	2210      	movs	r2, #16
 8004fc8:	4013      	ands	r3, r2
 8004fca:	2b10      	cmp	r3, #16
 8004fcc:	d11e      	bne.n	800500c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2211      	movs	r2, #17
 8004fd4:	4252      	negs	r2, r2
 8004fd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2208      	movs	r2, #8
 8004fdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	69da      	ldr	r2, [r3, #28]
 8004fe4:	23c0      	movs	r3, #192	; 0xc0
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4013      	ands	r3, r2
 8004fea:	d004      	beq.n	8004ff6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	0018      	movs	r0, r3
 8004ff0:	f7fb fa9c 	bl	800052c <HAL_TIM_IC_CaptureCallback>
 8004ff4:	e007      	b.n	8005006 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	f000 f983 	bl	8005304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	0018      	movs	r0, r3
 8005002:	f000 f987 	bl	8005314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	2201      	movs	r2, #1
 8005014:	4013      	ands	r3, r2
 8005016:	2b01      	cmp	r3, #1
 8005018:	d10f      	bne.n	800503a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	2201      	movs	r2, #1
 8005022:	4013      	ands	r3, r2
 8005024:	2b01      	cmp	r3, #1
 8005026:	d108      	bne.n	800503a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2202      	movs	r2, #2
 800502e:	4252      	negs	r2, r2
 8005030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	0018      	movs	r0, r3
 8005036:	f7fc f8ff 	bl	8001238 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	2280      	movs	r2, #128	; 0x80
 8005042:	4013      	ands	r3, r2
 8005044:	2b80      	cmp	r3, #128	; 0x80
 8005046:	d10f      	bne.n	8005068 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	2280      	movs	r2, #128	; 0x80
 8005050:	4013      	ands	r3, r2
 8005052:	2b80      	cmp	r3, #128	; 0x80
 8005054:	d108      	bne.n	8005068 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2281      	movs	r2, #129	; 0x81
 800505c:	4252      	negs	r2, r2
 800505e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	0018      	movs	r0, r3
 8005064:	f000 fdda 	bl	8005c1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	691a      	ldr	r2, [r3, #16]
 800506e:	2380      	movs	r3, #128	; 0x80
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	401a      	ands	r2, r3
 8005074:	2380      	movs	r3, #128	; 0x80
 8005076:	005b      	lsls	r3, r3, #1
 8005078:	429a      	cmp	r2, r3
 800507a:	d10e      	bne.n	800509a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	2280      	movs	r2, #128	; 0x80
 8005084:	4013      	ands	r3, r2
 8005086:	2b80      	cmp	r3, #128	; 0x80
 8005088:	d107      	bne.n	800509a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a1c      	ldr	r2, [pc, #112]	; (8005100 <HAL_TIM_IRQHandler+0x260>)
 8005090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	0018      	movs	r0, r3
 8005096:	f000 fdc9 	bl	8005c2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	2240      	movs	r2, #64	; 0x40
 80050a2:	4013      	ands	r3, r2
 80050a4:	2b40      	cmp	r3, #64	; 0x40
 80050a6:	d10f      	bne.n	80050c8 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	2240      	movs	r2, #64	; 0x40
 80050b0:	4013      	ands	r3, r2
 80050b2:	2b40      	cmp	r3, #64	; 0x40
 80050b4:	d108      	bne.n	80050c8 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2241      	movs	r2, #65	; 0x41
 80050bc:	4252      	negs	r2, r2
 80050be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	0018      	movs	r0, r3
 80050c4:	f000 f92e 	bl	8005324 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	2220      	movs	r2, #32
 80050d0:	4013      	ands	r3, r2
 80050d2:	2b20      	cmp	r3, #32
 80050d4:	d10f      	bne.n	80050f6 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	2220      	movs	r2, #32
 80050de:	4013      	ands	r3, r2
 80050e0:	2b20      	cmp	r3, #32
 80050e2:	d108      	bne.n	80050f6 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2221      	movs	r2, #33	; 0x21
 80050ea:	4252      	negs	r2, r2
 80050ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	0018      	movs	r0, r3
 80050f2:	f000 fd8b 	bl	8005c0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050f6:	46c0      	nop			; (mov r8, r8)
 80050f8:	46bd      	mov	sp, r7
 80050fa:	b002      	add	sp, #8
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	46c0      	nop			; (mov r8, r8)
 8005100:	fffffeff 	.word	0xfffffeff

08005104 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005110:	2317      	movs	r3, #23
 8005112:	18fb      	adds	r3, r7, r3
 8005114:	2200      	movs	r2, #0
 8005116:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	223c      	movs	r2, #60	; 0x3c
 800511c:	5c9b      	ldrb	r3, [r3, r2]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d101      	bne.n	8005126 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005122:	2302      	movs	r3, #2
 8005124:	e0e5      	b.n	80052f2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	223c      	movs	r2, #60	; 0x3c
 800512a:	2101      	movs	r1, #1
 800512c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b14      	cmp	r3, #20
 8005132:	d900      	bls.n	8005136 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005134:	e0d1      	b.n	80052da <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	009a      	lsls	r2, r3, #2
 800513a:	4b70      	ldr	r3, [pc, #448]	; (80052fc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800513c:	18d3      	adds	r3, r2, r3
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	0011      	movs	r1, r2
 800514a:	0018      	movs	r0, r3
 800514c:	f000 f968 	bl	8005420 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699a      	ldr	r2, [r3, #24]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2108      	movs	r1, #8
 800515c:	430a      	orrs	r2, r1
 800515e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	699a      	ldr	r2, [r3, #24]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2104      	movs	r1, #4
 800516c:	438a      	bics	r2, r1
 800516e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6999      	ldr	r1, [r3, #24]
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	691a      	ldr	r2, [r3, #16]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	619a      	str	r2, [r3, #24]
      break;
 8005182:	e0af      	b.n	80052e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	0011      	movs	r1, r2
 800518c:	0018      	movs	r0, r3
 800518e:	f000 f9d1 	bl	8005534 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	699a      	ldr	r2, [r3, #24]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2180      	movs	r1, #128	; 0x80
 800519e:	0109      	lsls	r1, r1, #4
 80051a0:	430a      	orrs	r2, r1
 80051a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699a      	ldr	r2, [r3, #24]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4954      	ldr	r1, [pc, #336]	; (8005300 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80051b0:	400a      	ands	r2, r1
 80051b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6999      	ldr	r1, [r3, #24]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	021a      	lsls	r2, r3, #8
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	619a      	str	r2, [r3, #24]
      break;
 80051c8:	e08c      	b.n	80052e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	0011      	movs	r1, r2
 80051d2:	0018      	movs	r0, r3
 80051d4:	f000 fa32 	bl	800563c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	69da      	ldr	r2, [r3, #28]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2108      	movs	r1, #8
 80051e4:	430a      	orrs	r2, r1
 80051e6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	69da      	ldr	r2, [r3, #28]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2104      	movs	r1, #4
 80051f4:	438a      	bics	r2, r1
 80051f6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	69d9      	ldr	r1, [r3, #28]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	691a      	ldr	r2, [r3, #16]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	61da      	str	r2, [r3, #28]
      break;
 800520a:	e06b      	b.n	80052e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	0011      	movs	r1, r2
 8005214:	0018      	movs	r0, r3
 8005216:	f000 fa99 	bl	800574c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69da      	ldr	r2, [r3, #28]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2180      	movs	r1, #128	; 0x80
 8005226:	0109      	lsls	r1, r1, #4
 8005228:	430a      	orrs	r2, r1
 800522a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	69da      	ldr	r2, [r3, #28]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4932      	ldr	r1, [pc, #200]	; (8005300 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005238:	400a      	ands	r2, r1
 800523a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	69d9      	ldr	r1, [r3, #28]
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	021a      	lsls	r2, r3, #8
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	61da      	str	r2, [r3, #28]
      break;
 8005250:	e048      	b.n	80052e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	0011      	movs	r1, r2
 800525a:	0018      	movs	r0, r3
 800525c:	f000 fae0 	bl	8005820 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2108      	movs	r1, #8
 800526c:	430a      	orrs	r2, r1
 800526e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2104      	movs	r1, #4
 800527c:	438a      	bics	r2, r1
 800527e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	691a      	ldr	r2, [r3, #16]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005292:	e027      	b.n	80052e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	0011      	movs	r1, r2
 800529c:	0018      	movs	r0, r3
 800529e:	f000 fb1f 	bl	80058e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2180      	movs	r1, #128	; 0x80
 80052ae:	0109      	lsls	r1, r1, #4
 80052b0:	430a      	orrs	r2, r1
 80052b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4910      	ldr	r1, [pc, #64]	; (8005300 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80052c0:	400a      	ands	r2, r1
 80052c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	021a      	lsls	r2, r3, #8
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052d8:	e004      	b.n	80052e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80052da:	2317      	movs	r3, #23
 80052dc:	18fb      	adds	r3, r7, r3
 80052de:	2201      	movs	r2, #1
 80052e0:	701a      	strb	r2, [r3, #0]
      break;
 80052e2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	223c      	movs	r2, #60	; 0x3c
 80052e8:	2100      	movs	r1, #0
 80052ea:	5499      	strb	r1, [r3, r2]

  return status;
 80052ec:	2317      	movs	r3, #23
 80052ee:	18fb      	adds	r3, r7, r3
 80052f0:	781b      	ldrb	r3, [r3, #0]
}
 80052f2:	0018      	movs	r0, r3
 80052f4:	46bd      	mov	sp, r7
 80052f6:	b006      	add	sp, #24
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	46c0      	nop			; (mov r8, r8)
 80052fc:	080066dc 	.word	0x080066dc
 8005300:	fffffbff 	.word	0xfffffbff

08005304 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800530c:	46c0      	nop			; (mov r8, r8)
 800530e:	46bd      	mov	sp, r7
 8005310:	b002      	add	sp, #8
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800531c:	46c0      	nop			; (mov r8, r8)
 800531e:	46bd      	mov	sp, r7
 8005320:	b002      	add	sp, #8
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800532c:	46c0      	nop			; (mov r8, r8)
 800532e:	46bd      	mov	sp, r7
 8005330:	b002      	add	sp, #8
 8005332:	bd80      	pop	{r7, pc}

08005334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a2f      	ldr	r2, [pc, #188]	; (8005404 <TIM_Base_SetConfig+0xd0>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d003      	beq.n	8005354 <TIM_Base_SetConfig+0x20>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a2e      	ldr	r2, [pc, #184]	; (8005408 <TIM_Base_SetConfig+0xd4>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d108      	bne.n	8005366 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2270      	movs	r2, #112	; 0x70
 8005358:	4393      	bics	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a26      	ldr	r2, [pc, #152]	; (8005404 <TIM_Base_SetConfig+0xd0>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d013      	beq.n	8005396 <TIM_Base_SetConfig+0x62>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a25      	ldr	r2, [pc, #148]	; (8005408 <TIM_Base_SetConfig+0xd4>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d00f      	beq.n	8005396 <TIM_Base_SetConfig+0x62>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a24      	ldr	r2, [pc, #144]	; (800540c <TIM_Base_SetConfig+0xd8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d00b      	beq.n	8005396 <TIM_Base_SetConfig+0x62>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a23      	ldr	r2, [pc, #140]	; (8005410 <TIM_Base_SetConfig+0xdc>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d007      	beq.n	8005396 <TIM_Base_SetConfig+0x62>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a22      	ldr	r2, [pc, #136]	; (8005414 <TIM_Base_SetConfig+0xe0>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d003      	beq.n	8005396 <TIM_Base_SetConfig+0x62>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a21      	ldr	r2, [pc, #132]	; (8005418 <TIM_Base_SetConfig+0xe4>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d108      	bne.n	80053a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	4a20      	ldr	r2, [pc, #128]	; (800541c <TIM_Base_SetConfig+0xe8>)
 800539a:	4013      	ands	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2280      	movs	r2, #128	; 0x80
 80053ac:	4393      	bics	r3, r2
 80053ae:	001a      	movs	r2, r3
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	695b      	ldr	r3, [r3, #20]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	689a      	ldr	r2, [r3, #8]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a0c      	ldr	r2, [pc, #48]	; (8005404 <TIM_Base_SetConfig+0xd0>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d00b      	beq.n	80053ee <TIM_Base_SetConfig+0xba>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a0d      	ldr	r2, [pc, #52]	; (8005410 <TIM_Base_SetConfig+0xdc>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d007      	beq.n	80053ee <TIM_Base_SetConfig+0xba>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a0c      	ldr	r2, [pc, #48]	; (8005414 <TIM_Base_SetConfig+0xe0>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d003      	beq.n	80053ee <TIM_Base_SetConfig+0xba>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a0b      	ldr	r2, [pc, #44]	; (8005418 <TIM_Base_SetConfig+0xe4>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d103      	bne.n	80053f6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	691a      	ldr	r2, [r3, #16]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	615a      	str	r2, [r3, #20]
}
 80053fc:	46c0      	nop			; (mov r8, r8)
 80053fe:	46bd      	mov	sp, r7
 8005400:	b004      	add	sp, #16
 8005402:	bd80      	pop	{r7, pc}
 8005404:	40012c00 	.word	0x40012c00
 8005408:	40000400 	.word	0x40000400
 800540c:	40002000 	.word	0x40002000
 8005410:	40014000 	.word	0x40014000
 8005414:	40014400 	.word	0x40014400
 8005418:	40014800 	.word	0x40014800
 800541c:	fffffcff 	.word	0xfffffcff

08005420 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	2201      	movs	r2, #1
 8005430:	4393      	bics	r3, r2
 8005432:	001a      	movs	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4a32      	ldr	r2, [pc, #200]	; (8005518 <TIM_OC1_SetConfig+0xf8>)
 800544e:	4013      	ands	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2203      	movs	r2, #3
 8005456:	4393      	bics	r3, r2
 8005458:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	4313      	orrs	r3, r2
 8005462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	2202      	movs	r2, #2
 8005468:	4393      	bics	r3, r2
 800546a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	4313      	orrs	r3, r2
 8005474:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a28      	ldr	r2, [pc, #160]	; (800551c <TIM_OC1_SetConfig+0xfc>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00b      	beq.n	8005496 <TIM_OC1_SetConfig+0x76>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a27      	ldr	r2, [pc, #156]	; (8005520 <TIM_OC1_SetConfig+0x100>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d007      	beq.n	8005496 <TIM_OC1_SetConfig+0x76>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a26      	ldr	r2, [pc, #152]	; (8005524 <TIM_OC1_SetConfig+0x104>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d003      	beq.n	8005496 <TIM_OC1_SetConfig+0x76>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a25      	ldr	r2, [pc, #148]	; (8005528 <TIM_OC1_SetConfig+0x108>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d10c      	bne.n	80054b0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	2208      	movs	r2, #8
 800549a:	4393      	bics	r3, r2
 800549c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	2204      	movs	r2, #4
 80054ac:	4393      	bics	r3, r2
 80054ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a1a      	ldr	r2, [pc, #104]	; (800551c <TIM_OC1_SetConfig+0xfc>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d00b      	beq.n	80054d0 <TIM_OC1_SetConfig+0xb0>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a19      	ldr	r2, [pc, #100]	; (8005520 <TIM_OC1_SetConfig+0x100>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d007      	beq.n	80054d0 <TIM_OC1_SetConfig+0xb0>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a18      	ldr	r2, [pc, #96]	; (8005524 <TIM_OC1_SetConfig+0x104>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d003      	beq.n	80054d0 <TIM_OC1_SetConfig+0xb0>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a17      	ldr	r2, [pc, #92]	; (8005528 <TIM_OC1_SetConfig+0x108>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d111      	bne.n	80054f4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	4a16      	ldr	r2, [pc, #88]	; (800552c <TIM_OC1_SetConfig+0x10c>)
 80054d4:	4013      	ands	r3, r2
 80054d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	4a15      	ldr	r2, [pc, #84]	; (8005530 <TIM_OC1_SetConfig+0x110>)
 80054dc:	4013      	ands	r3, r2
 80054de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	621a      	str	r2, [r3, #32]
}
 800550e:	46c0      	nop			; (mov r8, r8)
 8005510:	46bd      	mov	sp, r7
 8005512:	b006      	add	sp, #24
 8005514:	bd80      	pop	{r7, pc}
 8005516:	46c0      	nop			; (mov r8, r8)
 8005518:	fffeff8f 	.word	0xfffeff8f
 800551c:	40012c00 	.word	0x40012c00
 8005520:	40014000 	.word	0x40014000
 8005524:	40014400 	.word	0x40014400
 8005528:	40014800 	.word	0x40014800
 800552c:	fffffeff 	.word	0xfffffeff
 8005530:	fffffdff 	.word	0xfffffdff

08005534 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	2210      	movs	r2, #16
 8005544:	4393      	bics	r3, r2
 8005546:	001a      	movs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	4a2e      	ldr	r2, [pc, #184]	; (800561c <TIM_OC2_SetConfig+0xe8>)
 8005562:	4013      	ands	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	4a2d      	ldr	r2, [pc, #180]	; (8005620 <TIM_OC2_SetConfig+0xec>)
 800556a:	4013      	ands	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	021b      	lsls	r3, r3, #8
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	4313      	orrs	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2220      	movs	r2, #32
 800557e:	4393      	bics	r3, r2
 8005580:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	011b      	lsls	r3, r3, #4
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	4313      	orrs	r3, r2
 800558c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a24      	ldr	r2, [pc, #144]	; (8005624 <TIM_OC2_SetConfig+0xf0>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d10d      	bne.n	80055b2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2280      	movs	r2, #128	; 0x80
 800559a:	4393      	bics	r3, r2
 800559c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	011b      	lsls	r3, r3, #4
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2240      	movs	r2, #64	; 0x40
 80055ae:	4393      	bics	r3, r2
 80055b0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a1b      	ldr	r2, [pc, #108]	; (8005624 <TIM_OC2_SetConfig+0xf0>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d00b      	beq.n	80055d2 <TIM_OC2_SetConfig+0x9e>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a1a      	ldr	r2, [pc, #104]	; (8005628 <TIM_OC2_SetConfig+0xf4>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d007      	beq.n	80055d2 <TIM_OC2_SetConfig+0x9e>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a19      	ldr	r2, [pc, #100]	; (800562c <TIM_OC2_SetConfig+0xf8>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d003      	beq.n	80055d2 <TIM_OC2_SetConfig+0x9e>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a18      	ldr	r2, [pc, #96]	; (8005630 <TIM_OC2_SetConfig+0xfc>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d113      	bne.n	80055fa <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	4a17      	ldr	r2, [pc, #92]	; (8005634 <TIM_OC2_SetConfig+0x100>)
 80055d6:	4013      	ands	r3, r2
 80055d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	4a16      	ldr	r2, [pc, #88]	; (8005638 <TIM_OC2_SetConfig+0x104>)
 80055de:	4013      	ands	r3, r2
 80055e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	621a      	str	r2, [r3, #32]
}
 8005614:	46c0      	nop			; (mov r8, r8)
 8005616:	46bd      	mov	sp, r7
 8005618:	b006      	add	sp, #24
 800561a:	bd80      	pop	{r7, pc}
 800561c:	feff8fff 	.word	0xfeff8fff
 8005620:	fffffcff 	.word	0xfffffcff
 8005624:	40012c00 	.word	0x40012c00
 8005628:	40014000 	.word	0x40014000
 800562c:	40014400 	.word	0x40014400
 8005630:	40014800 	.word	0x40014800
 8005634:	fffffbff 	.word	0xfffffbff
 8005638:	fffff7ff 	.word	0xfffff7ff

0800563c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	4a35      	ldr	r2, [pc, #212]	; (8005720 <TIM_OC3_SetConfig+0xe4>)
 800564c:	401a      	ands	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4a2f      	ldr	r2, [pc, #188]	; (8005724 <TIM_OC3_SetConfig+0xe8>)
 8005668:	4013      	ands	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2203      	movs	r2, #3
 8005670:	4393      	bics	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	4313      	orrs	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	4a29      	ldr	r2, [pc, #164]	; (8005728 <TIM_OC3_SetConfig+0xec>)
 8005682:	4013      	ands	r3, r2
 8005684:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	021b      	lsls	r3, r3, #8
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	4313      	orrs	r3, r2
 8005690:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a25      	ldr	r2, [pc, #148]	; (800572c <TIM_OC3_SetConfig+0xf0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d10d      	bne.n	80056b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	4a24      	ldr	r2, [pc, #144]	; (8005730 <TIM_OC3_SetConfig+0xf4>)
 800569e:	4013      	ands	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	021b      	lsls	r3, r3, #8
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	4a20      	ldr	r2, [pc, #128]	; (8005734 <TIM_OC3_SetConfig+0xf8>)
 80056b2:	4013      	ands	r3, r2
 80056b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a1c      	ldr	r2, [pc, #112]	; (800572c <TIM_OC3_SetConfig+0xf0>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d00b      	beq.n	80056d6 <TIM_OC3_SetConfig+0x9a>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a1d      	ldr	r2, [pc, #116]	; (8005738 <TIM_OC3_SetConfig+0xfc>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d007      	beq.n	80056d6 <TIM_OC3_SetConfig+0x9a>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a1c      	ldr	r2, [pc, #112]	; (800573c <TIM_OC3_SetConfig+0x100>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d003      	beq.n	80056d6 <TIM_OC3_SetConfig+0x9a>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a1b      	ldr	r2, [pc, #108]	; (8005740 <TIM_OC3_SetConfig+0x104>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d113      	bne.n	80056fe <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	4a1a      	ldr	r2, [pc, #104]	; (8005744 <TIM_OC3_SetConfig+0x108>)
 80056da:	4013      	ands	r3, r2
 80056dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	4a19      	ldr	r2, [pc, #100]	; (8005748 <TIM_OC3_SetConfig+0x10c>)
 80056e2:	4013      	ands	r3, r2
 80056e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	011b      	lsls	r3, r3, #4
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	621a      	str	r2, [r3, #32]
}
 8005718:	46c0      	nop			; (mov r8, r8)
 800571a:	46bd      	mov	sp, r7
 800571c:	b006      	add	sp, #24
 800571e:	bd80      	pop	{r7, pc}
 8005720:	fffffeff 	.word	0xfffffeff
 8005724:	fffeff8f 	.word	0xfffeff8f
 8005728:	fffffdff 	.word	0xfffffdff
 800572c:	40012c00 	.word	0x40012c00
 8005730:	fffff7ff 	.word	0xfffff7ff
 8005734:	fffffbff 	.word	0xfffffbff
 8005738:	40014000 	.word	0x40014000
 800573c:	40014400 	.word	0x40014400
 8005740:	40014800 	.word	0x40014800
 8005744:	ffffefff 	.word	0xffffefff
 8005748:	ffffdfff 	.word	0xffffdfff

0800574c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	4a28      	ldr	r2, [pc, #160]	; (80057fc <TIM_OC4_SetConfig+0xb0>)
 800575c:	401a      	ands	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4a22      	ldr	r2, [pc, #136]	; (8005800 <TIM_OC4_SetConfig+0xb4>)
 8005778:	4013      	ands	r3, r2
 800577a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4a21      	ldr	r2, [pc, #132]	; (8005804 <TIM_OC4_SetConfig+0xb8>)
 8005780:	4013      	ands	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	021b      	lsls	r3, r3, #8
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	4313      	orrs	r3, r2
 800578e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	4a1d      	ldr	r2, [pc, #116]	; (8005808 <TIM_OC4_SetConfig+0xbc>)
 8005794:	4013      	ands	r3, r2
 8005796:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	031b      	lsls	r3, r3, #12
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a19      	ldr	r2, [pc, #100]	; (800580c <TIM_OC4_SetConfig+0xc0>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d00b      	beq.n	80057c4 <TIM_OC4_SetConfig+0x78>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a18      	ldr	r2, [pc, #96]	; (8005810 <TIM_OC4_SetConfig+0xc4>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d007      	beq.n	80057c4 <TIM_OC4_SetConfig+0x78>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a17      	ldr	r2, [pc, #92]	; (8005814 <TIM_OC4_SetConfig+0xc8>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d003      	beq.n	80057c4 <TIM_OC4_SetConfig+0x78>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a16      	ldr	r2, [pc, #88]	; (8005818 <TIM_OC4_SetConfig+0xcc>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d109      	bne.n	80057d8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	4a15      	ldr	r2, [pc, #84]	; (800581c <TIM_OC4_SetConfig+0xd0>)
 80057c8:	4013      	ands	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	019b      	lsls	r3, r3, #6
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	621a      	str	r2, [r3, #32]
}
 80057f2:	46c0      	nop			; (mov r8, r8)
 80057f4:	46bd      	mov	sp, r7
 80057f6:	b006      	add	sp, #24
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	46c0      	nop			; (mov r8, r8)
 80057fc:	ffffefff 	.word	0xffffefff
 8005800:	feff8fff 	.word	0xfeff8fff
 8005804:	fffffcff 	.word	0xfffffcff
 8005808:	ffffdfff 	.word	0xffffdfff
 800580c:	40012c00 	.word	0x40012c00
 8005810:	40014000 	.word	0x40014000
 8005814:	40014400 	.word	0x40014400
 8005818:	40014800 	.word	0x40014800
 800581c:	ffffbfff 	.word	0xffffbfff

08005820 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	4a25      	ldr	r2, [pc, #148]	; (80058c4 <TIM_OC5_SetConfig+0xa4>)
 8005830:	401a      	ands	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4a1f      	ldr	r2, [pc, #124]	; (80058c8 <TIM_OC5_SetConfig+0xa8>)
 800584c:	4013      	ands	r3, r2
 800584e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	4313      	orrs	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	4a1b      	ldr	r2, [pc, #108]	; (80058cc <TIM_OC5_SetConfig+0xac>)
 800585e:	4013      	ands	r3, r2
 8005860:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	041b      	lsls	r3, r3, #16
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	4313      	orrs	r3, r2
 800586c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a17      	ldr	r2, [pc, #92]	; (80058d0 <TIM_OC5_SetConfig+0xb0>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d00b      	beq.n	800588e <TIM_OC5_SetConfig+0x6e>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a16      	ldr	r2, [pc, #88]	; (80058d4 <TIM_OC5_SetConfig+0xb4>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d007      	beq.n	800588e <TIM_OC5_SetConfig+0x6e>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a15      	ldr	r2, [pc, #84]	; (80058d8 <TIM_OC5_SetConfig+0xb8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d003      	beq.n	800588e <TIM_OC5_SetConfig+0x6e>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a14      	ldr	r2, [pc, #80]	; (80058dc <TIM_OC5_SetConfig+0xbc>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d109      	bne.n	80058a2 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	4a0c      	ldr	r2, [pc, #48]	; (80058c4 <TIM_OC5_SetConfig+0xa4>)
 8005892:	4013      	ands	r3, r2
 8005894:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	021b      	lsls	r3, r3, #8
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	4313      	orrs	r3, r2
 80058a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	621a      	str	r2, [r3, #32]
}
 80058bc:	46c0      	nop			; (mov r8, r8)
 80058be:	46bd      	mov	sp, r7
 80058c0:	b006      	add	sp, #24
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	fffeffff 	.word	0xfffeffff
 80058c8:	fffeff8f 	.word	0xfffeff8f
 80058cc:	fffdffff 	.word	0xfffdffff
 80058d0:	40012c00 	.word	0x40012c00
 80058d4:	40014000 	.word	0x40014000
 80058d8:	40014400 	.word	0x40014400
 80058dc:	40014800 	.word	0x40014800

080058e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	4a26      	ldr	r2, [pc, #152]	; (8005988 <TIM_OC6_SetConfig+0xa8>)
 80058f0:	401a      	ands	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4a20      	ldr	r2, [pc, #128]	; (800598c <TIM_OC6_SetConfig+0xac>)
 800590c:	4013      	ands	r3, r2
 800590e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	021b      	lsls	r3, r3, #8
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	4313      	orrs	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	4a1c      	ldr	r2, [pc, #112]	; (8005990 <TIM_OC6_SetConfig+0xb0>)
 8005920:	4013      	ands	r3, r2
 8005922:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	051b      	lsls	r3, r3, #20
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	4313      	orrs	r3, r2
 800592e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a18      	ldr	r2, [pc, #96]	; (8005994 <TIM_OC6_SetConfig+0xb4>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d00b      	beq.n	8005950 <TIM_OC6_SetConfig+0x70>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a17      	ldr	r2, [pc, #92]	; (8005998 <TIM_OC6_SetConfig+0xb8>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d007      	beq.n	8005950 <TIM_OC6_SetConfig+0x70>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a16      	ldr	r2, [pc, #88]	; (800599c <TIM_OC6_SetConfig+0xbc>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d003      	beq.n	8005950 <TIM_OC6_SetConfig+0x70>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a15      	ldr	r2, [pc, #84]	; (80059a0 <TIM_OC6_SetConfig+0xc0>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d109      	bne.n	8005964 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	4a14      	ldr	r2, [pc, #80]	; (80059a4 <TIM_OC6_SetConfig+0xc4>)
 8005954:	4013      	ands	r3, r2
 8005956:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	029b      	lsls	r3, r3, #10
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	4313      	orrs	r3, r2
 8005962:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	621a      	str	r2, [r3, #32]
}
 800597e:	46c0      	nop			; (mov r8, r8)
 8005980:	46bd      	mov	sp, r7
 8005982:	b006      	add	sp, #24
 8005984:	bd80      	pop	{r7, pc}
 8005986:	46c0      	nop			; (mov r8, r8)
 8005988:	ffefffff 	.word	0xffefffff
 800598c:	feff8fff 	.word	0xfeff8fff
 8005990:	ffdfffff 	.word	0xffdfffff
 8005994:	40012c00 	.word	0x40012c00
 8005998:	40014000 	.word	0x40014000
 800599c:	40014400 	.word	0x40014400
 80059a0:	40014800 	.word	0x40014800
 80059a4:	fffbffff 	.word	0xfffbffff

080059a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	221f      	movs	r2, #31
 80059b8:	4013      	ands	r3, r2
 80059ba:	2201      	movs	r2, #1
 80059bc:	409a      	lsls	r2, r3
 80059be:	0013      	movs	r3, r2
 80059c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	43d2      	mvns	r2, r2
 80059ca:	401a      	ands	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6a1a      	ldr	r2, [r3, #32]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	211f      	movs	r1, #31
 80059d8:	400b      	ands	r3, r1
 80059da:	6879      	ldr	r1, [r7, #4]
 80059dc:	4099      	lsls	r1, r3
 80059de:	000b      	movs	r3, r1
 80059e0:	431a      	orrs	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	621a      	str	r2, [r3, #32]
}
 80059e6:	46c0      	nop			; (mov r8, r8)
 80059e8:	46bd      	mov	sp, r7
 80059ea:	b006      	add	sp, #24
 80059ec:	bd80      	pop	{r7, pc}
	...

080059f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	223c      	movs	r2, #60	; 0x3c
 80059fe:	5c9b      	ldrb	r3, [r3, r2]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d101      	bne.n	8005a08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a04:	2302      	movs	r3, #2
 8005a06:	e04f      	b.n	8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	223c      	movs	r2, #60	; 0x3c
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	223d      	movs	r2, #61	; 0x3d
 8005a14:	2102      	movs	r1, #2
 8005a16:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a20      	ldr	r2, [pc, #128]	; (8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d108      	bne.n	8005a44 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	4a1f      	ldr	r2, [pc, #124]	; (8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005a36:	4013      	ands	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2270      	movs	r2, #112	; 0x70
 8005a48:	4393      	bics	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a13      	ldr	r2, [pc, #76]	; (8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d009      	beq.n	8005a7c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a12      	ldr	r2, [pc, #72]	; (8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d004      	beq.n	8005a7c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a11      	ldr	r2, [pc, #68]	; (8005abc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d10c      	bne.n	8005a96 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	2280      	movs	r2, #128	; 0x80
 8005a80:	4393      	bics	r3, r2
 8005a82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	223d      	movs	r2, #61	; 0x3d
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	223c      	movs	r2, #60	; 0x3c
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	0018      	movs	r0, r3
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	b004      	add	sp, #16
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	40012c00 	.word	0x40012c00
 8005ab4:	ff0fffff 	.word	0xff0fffff
 8005ab8:	40000400 	.word	0x40000400
 8005abc:	40014000 	.word	0x40014000

08005ac0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005aca:	2300      	movs	r3, #0
 8005acc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	223c      	movs	r2, #60	; 0x3c
 8005ad2:	5c9b      	ldrb	r3, [r3, r2]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d101      	bne.n	8005adc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	e079      	b.n	8005bd0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	223c      	movs	r2, #60	; 0x3c
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	22ff      	movs	r2, #255	; 0xff
 8005ae8:	4393      	bics	r3, r2
 8005aea:	001a      	movs	r2, r3
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4a38      	ldr	r2, [pc, #224]	; (8005bd8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8005af8:	401a      	ands	r2, r3
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	4a35      	ldr	r2, [pc, #212]	; (8005bdc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005b06:	401a      	ands	r2, r3
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4a33      	ldr	r2, [pc, #204]	; (8005be0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005b14:	401a      	ands	r2, r3
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4a30      	ldr	r2, [pc, #192]	; (8005be4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005b22:	401a      	ands	r2, r3
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4a2e      	ldr	r2, [pc, #184]	; (8005be8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8005b30:	401a      	ands	r2, r3
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	4a2b      	ldr	r2, [pc, #172]	; (8005bec <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8005b3e:	401a      	ands	r2, r3
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b44:	4313      	orrs	r3, r2
 8005b46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4a29      	ldr	r2, [pc, #164]	; (8005bf0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8005b4c:	401a      	ands	r2, r3
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	041b      	lsls	r3, r3, #16
 8005b54:	4313      	orrs	r3, r2
 8005b56:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a25      	ldr	r2, [pc, #148]	; (8005bf4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d106      	bne.n	8005b70 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	4a24      	ldr	r2, [pc, #144]	; (8005bf8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005b66:	401a      	ands	r2, r3
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a1f      	ldr	r2, [pc, #124]	; (8005bf4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d121      	bne.n	8005bbe <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	4a1f      	ldr	r2, [pc, #124]	; (8005bfc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005b7e:	401a      	ands	r2, r3
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b84:	051b      	lsls	r3, r3, #20
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	4a1c      	ldr	r2, [pc, #112]	; (8005c00 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8005b8e:	401a      	ands	r2, r3
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4a1a      	ldr	r2, [pc, #104]	; (8005c04 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8005b9c:	401a      	ands	r2, r3
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a12      	ldr	r2, [pc, #72]	; (8005bf4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d106      	bne.n	8005bbe <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4a15      	ldr	r2, [pc, #84]	; (8005c08 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8005bb4:	401a      	ands	r2, r3
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	223c      	movs	r2, #60	; 0x3c
 8005bca:	2100      	movs	r1, #0
 8005bcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	0018      	movs	r0, r3
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	b004      	add	sp, #16
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	fffffcff 	.word	0xfffffcff
 8005bdc:	fffffbff 	.word	0xfffffbff
 8005be0:	fffff7ff 	.word	0xfffff7ff
 8005be4:	ffffefff 	.word	0xffffefff
 8005be8:	ffffdfff 	.word	0xffffdfff
 8005bec:	ffffbfff 	.word	0xffffbfff
 8005bf0:	fff0ffff 	.word	0xfff0ffff
 8005bf4:	40012c00 	.word	0x40012c00
 8005bf8:	efffffff 	.word	0xefffffff
 8005bfc:	ff0fffff 	.word	0xff0fffff
 8005c00:	feffffff 	.word	0xfeffffff
 8005c04:	fdffffff 	.word	0xfdffffff
 8005c08:	dfffffff 	.word	0xdfffffff

08005c0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c14:	46c0      	nop			; (mov r8, r8)
 8005c16:	46bd      	mov	sp, r7
 8005c18:	b002      	add	sp, #8
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c24:	46c0      	nop			; (mov r8, r8)
 8005c26:	46bd      	mov	sp, r7
 8005c28:	b002      	add	sp, #8
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c34:	46c0      	nop			; (mov r8, r8)
 8005c36:	46bd      	mov	sp, r7
 8005c38:	b002      	add	sp, #8
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e046      	b.n	8005cdc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2288      	movs	r2, #136	; 0x88
 8005c52:	589b      	ldr	r3, [r3, r2]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d107      	bne.n	8005c68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2284      	movs	r2, #132	; 0x84
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	0018      	movs	r0, r3
 8005c64:	f7fc fa38 	bl	80020d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2288      	movs	r2, #136	; 0x88
 8005c6c:	2124      	movs	r1, #36	; 0x24
 8005c6e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2101      	movs	r1, #1
 8005c7c:	438a      	bics	r2, r1
 8005c7e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	0018      	movs	r0, r3
 8005c84:	f000 f830 	bl	8005ce8 <UART_SetConfig>
 8005c88:	0003      	movs	r3, r0
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d101      	bne.n	8005c92 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e024      	b.n	8005cdc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	0018      	movs	r0, r3
 8005c9e:	f000 f9c7 	bl	8006030 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	490d      	ldr	r1, [pc, #52]	; (8005ce4 <HAL_UART_Init+0xa8>)
 8005cae:	400a      	ands	r2, r1
 8005cb0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	212a      	movs	r1, #42	; 0x2a
 8005cbe:	438a      	bics	r2, r1
 8005cc0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2101      	movs	r1, #1
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	0018      	movs	r0, r3
 8005cd6:	f000 fa5f 	bl	8006198 <UART_CheckIdleState>
 8005cda:	0003      	movs	r3, r0
}
 8005cdc:	0018      	movs	r0, r3
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	b002      	add	sp, #8
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	ffffb7ff 	.word	0xffffb7ff

08005ce8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b088      	sub	sp, #32
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cf0:	231a      	movs	r3, #26
 8005cf2:	18fb      	adds	r3, r7, r3
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	431a      	orrs	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	431a      	orrs	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4abc      	ldr	r2, [pc, #752]	; (8006008 <UART_SetConfig+0x320>)
 8005d18:	4013      	ands	r3, r2
 8005d1a:	0019      	movs	r1, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	69fa      	ldr	r2, [r7, #28]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	4ab7      	ldr	r2, [pc, #732]	; (800600c <UART_SetConfig+0x324>)
 8005d2e:	4013      	ands	r3, r2
 8005d30:	0019      	movs	r1, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a1b      	ldr	r3, [r3, #32]
 8005d48:	69fa      	ldr	r2, [r7, #28]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	4aae      	ldr	r2, [pc, #696]	; (8006010 <UART_SetConfig+0x328>)
 8005d56:	4013      	ands	r3, r2
 8005d58:	0019      	movs	r1, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	69fa      	ldr	r2, [r7, #28]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6a:	220f      	movs	r2, #15
 8005d6c:	4393      	bics	r3, r2
 8005d6e:	0019      	movs	r1, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4aa4      	ldr	r2, [pc, #656]	; (8006014 <UART_SetConfig+0x32c>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d127      	bne.n	8005dd6 <UART_SetConfig+0xee>
 8005d86:	4ba4      	ldr	r3, [pc, #656]	; (8006018 <UART_SetConfig+0x330>)
 8005d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d8a:	2203      	movs	r2, #3
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	d017      	beq.n	8005dc2 <UART_SetConfig+0xda>
 8005d92:	d81b      	bhi.n	8005dcc <UART_SetConfig+0xe4>
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d00a      	beq.n	8005dae <UART_SetConfig+0xc6>
 8005d98:	d818      	bhi.n	8005dcc <UART_SetConfig+0xe4>
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d002      	beq.n	8005da4 <UART_SetConfig+0xbc>
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d00a      	beq.n	8005db8 <UART_SetConfig+0xd0>
 8005da2:	e013      	b.n	8005dcc <UART_SetConfig+0xe4>
 8005da4:	231b      	movs	r3, #27
 8005da6:	18fb      	adds	r3, r7, r3
 8005da8:	2200      	movs	r2, #0
 8005daa:	701a      	strb	r2, [r3, #0]
 8005dac:	e058      	b.n	8005e60 <UART_SetConfig+0x178>
 8005dae:	231b      	movs	r3, #27
 8005db0:	18fb      	adds	r3, r7, r3
 8005db2:	2202      	movs	r2, #2
 8005db4:	701a      	strb	r2, [r3, #0]
 8005db6:	e053      	b.n	8005e60 <UART_SetConfig+0x178>
 8005db8:	231b      	movs	r3, #27
 8005dba:	18fb      	adds	r3, r7, r3
 8005dbc:	2204      	movs	r2, #4
 8005dbe:	701a      	strb	r2, [r3, #0]
 8005dc0:	e04e      	b.n	8005e60 <UART_SetConfig+0x178>
 8005dc2:	231b      	movs	r3, #27
 8005dc4:	18fb      	adds	r3, r7, r3
 8005dc6:	2208      	movs	r2, #8
 8005dc8:	701a      	strb	r2, [r3, #0]
 8005dca:	e049      	b.n	8005e60 <UART_SetConfig+0x178>
 8005dcc:	231b      	movs	r3, #27
 8005dce:	18fb      	adds	r3, r7, r3
 8005dd0:	2210      	movs	r2, #16
 8005dd2:	701a      	strb	r2, [r3, #0]
 8005dd4:	e044      	b.n	8005e60 <UART_SetConfig+0x178>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a90      	ldr	r2, [pc, #576]	; (800601c <UART_SetConfig+0x334>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d127      	bne.n	8005e30 <UART_SetConfig+0x148>
 8005de0:	4b8d      	ldr	r3, [pc, #564]	; (8006018 <UART_SetConfig+0x330>)
 8005de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de4:	220c      	movs	r2, #12
 8005de6:	4013      	ands	r3, r2
 8005de8:	2b0c      	cmp	r3, #12
 8005dea:	d017      	beq.n	8005e1c <UART_SetConfig+0x134>
 8005dec:	d81b      	bhi.n	8005e26 <UART_SetConfig+0x13e>
 8005dee:	2b08      	cmp	r3, #8
 8005df0:	d00a      	beq.n	8005e08 <UART_SetConfig+0x120>
 8005df2:	d818      	bhi.n	8005e26 <UART_SetConfig+0x13e>
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d002      	beq.n	8005dfe <UART_SetConfig+0x116>
 8005df8:	2b04      	cmp	r3, #4
 8005dfa:	d00a      	beq.n	8005e12 <UART_SetConfig+0x12a>
 8005dfc:	e013      	b.n	8005e26 <UART_SetConfig+0x13e>
 8005dfe:	231b      	movs	r3, #27
 8005e00:	18fb      	adds	r3, r7, r3
 8005e02:	2200      	movs	r2, #0
 8005e04:	701a      	strb	r2, [r3, #0]
 8005e06:	e02b      	b.n	8005e60 <UART_SetConfig+0x178>
 8005e08:	231b      	movs	r3, #27
 8005e0a:	18fb      	adds	r3, r7, r3
 8005e0c:	2202      	movs	r2, #2
 8005e0e:	701a      	strb	r2, [r3, #0]
 8005e10:	e026      	b.n	8005e60 <UART_SetConfig+0x178>
 8005e12:	231b      	movs	r3, #27
 8005e14:	18fb      	adds	r3, r7, r3
 8005e16:	2204      	movs	r2, #4
 8005e18:	701a      	strb	r2, [r3, #0]
 8005e1a:	e021      	b.n	8005e60 <UART_SetConfig+0x178>
 8005e1c:	231b      	movs	r3, #27
 8005e1e:	18fb      	adds	r3, r7, r3
 8005e20:	2208      	movs	r2, #8
 8005e22:	701a      	strb	r2, [r3, #0]
 8005e24:	e01c      	b.n	8005e60 <UART_SetConfig+0x178>
 8005e26:	231b      	movs	r3, #27
 8005e28:	18fb      	adds	r3, r7, r3
 8005e2a:	2210      	movs	r2, #16
 8005e2c:	701a      	strb	r2, [r3, #0]
 8005e2e:	e017      	b.n	8005e60 <UART_SetConfig+0x178>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a7a      	ldr	r2, [pc, #488]	; (8006020 <UART_SetConfig+0x338>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d104      	bne.n	8005e44 <UART_SetConfig+0x15c>
 8005e3a:	231b      	movs	r3, #27
 8005e3c:	18fb      	adds	r3, r7, r3
 8005e3e:	2200      	movs	r2, #0
 8005e40:	701a      	strb	r2, [r3, #0]
 8005e42:	e00d      	b.n	8005e60 <UART_SetConfig+0x178>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a76      	ldr	r2, [pc, #472]	; (8006024 <UART_SetConfig+0x33c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d104      	bne.n	8005e58 <UART_SetConfig+0x170>
 8005e4e:	231b      	movs	r3, #27
 8005e50:	18fb      	adds	r3, r7, r3
 8005e52:	2200      	movs	r2, #0
 8005e54:	701a      	strb	r2, [r3, #0]
 8005e56:	e003      	b.n	8005e60 <UART_SetConfig+0x178>
 8005e58:	231b      	movs	r3, #27
 8005e5a:	18fb      	adds	r3, r7, r3
 8005e5c:	2210      	movs	r2, #16
 8005e5e:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	69da      	ldr	r2, [r3, #28]
 8005e64:	2380      	movs	r3, #128	; 0x80
 8005e66:	021b      	lsls	r3, r3, #8
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d000      	beq.n	8005e6e <UART_SetConfig+0x186>
 8005e6c:	e065      	b.n	8005f3a <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8005e6e:	231b      	movs	r3, #27
 8005e70:	18fb      	adds	r3, r7, r3
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b08      	cmp	r3, #8
 8005e76:	d015      	beq.n	8005ea4 <UART_SetConfig+0x1bc>
 8005e78:	dc18      	bgt.n	8005eac <UART_SetConfig+0x1c4>
 8005e7a:	2b04      	cmp	r3, #4
 8005e7c:	d00d      	beq.n	8005e9a <UART_SetConfig+0x1b2>
 8005e7e:	dc15      	bgt.n	8005eac <UART_SetConfig+0x1c4>
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d002      	beq.n	8005e8a <UART_SetConfig+0x1a2>
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d005      	beq.n	8005e94 <UART_SetConfig+0x1ac>
 8005e88:	e010      	b.n	8005eac <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e8a:	f7fe f9ad 	bl	80041e8 <HAL_RCC_GetPCLK1Freq>
 8005e8e:	0003      	movs	r3, r0
 8005e90:	617b      	str	r3, [r7, #20]
        break;
 8005e92:	e012      	b.n	8005eba <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e94:	4b64      	ldr	r3, [pc, #400]	; (8006028 <UART_SetConfig+0x340>)
 8005e96:	617b      	str	r3, [r7, #20]
        break;
 8005e98:	e00f      	b.n	8005eba <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e9a:	f7fe f91b 	bl	80040d4 <HAL_RCC_GetSysClockFreq>
 8005e9e:	0003      	movs	r3, r0
 8005ea0:	617b      	str	r3, [r7, #20]
        break;
 8005ea2:	e00a      	b.n	8005eba <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ea4:	2380      	movs	r3, #128	; 0x80
 8005ea6:	021b      	lsls	r3, r3, #8
 8005ea8:	617b      	str	r3, [r7, #20]
        break;
 8005eaa:	e006      	b.n	8005eba <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005eb0:	231a      	movs	r3, #26
 8005eb2:	18fb      	adds	r3, r7, r3
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	701a      	strb	r2, [r3, #0]
        break;
 8005eb8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d100      	bne.n	8005ec2 <UART_SetConfig+0x1da>
 8005ec0:	e08d      	b.n	8005fde <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ec6:	4b59      	ldr	r3, [pc, #356]	; (800602c <UART_SetConfig+0x344>)
 8005ec8:	0052      	lsls	r2, r2, #1
 8005eca:	5ad3      	ldrh	r3, [r2, r3]
 8005ecc:	0019      	movs	r1, r3
 8005ece:	6978      	ldr	r0, [r7, #20]
 8005ed0:	f7fa f916 	bl	8000100 <__udivsi3>
 8005ed4:	0003      	movs	r3, r0
 8005ed6:	005a      	lsls	r2, r3, #1
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	085b      	lsrs	r3, r3, #1
 8005ede:	18d2      	adds	r2, r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	0019      	movs	r1, r3
 8005ee6:	0010      	movs	r0, r2
 8005ee8:	f7fa f90a 	bl	8000100 <__udivsi3>
 8005eec:	0003      	movs	r3, r0
 8005eee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	2b0f      	cmp	r3, #15
 8005ef4:	d91c      	bls.n	8005f30 <UART_SetConfig+0x248>
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	2380      	movs	r3, #128	; 0x80
 8005efa:	025b      	lsls	r3, r3, #9
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d217      	bcs.n	8005f30 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	200e      	movs	r0, #14
 8005f06:	183b      	adds	r3, r7, r0
 8005f08:	210f      	movs	r1, #15
 8005f0a:	438a      	bics	r2, r1
 8005f0c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	085b      	lsrs	r3, r3, #1
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	2207      	movs	r2, #7
 8005f16:	4013      	ands	r3, r2
 8005f18:	b299      	uxth	r1, r3
 8005f1a:	183b      	adds	r3, r7, r0
 8005f1c:	183a      	adds	r2, r7, r0
 8005f1e:	8812      	ldrh	r2, [r2, #0]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	183a      	adds	r2, r7, r0
 8005f2a:	8812      	ldrh	r2, [r2, #0]
 8005f2c:	60da      	str	r2, [r3, #12]
 8005f2e:	e056      	b.n	8005fde <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8005f30:	231a      	movs	r3, #26
 8005f32:	18fb      	adds	r3, r7, r3
 8005f34:	2201      	movs	r2, #1
 8005f36:	701a      	strb	r2, [r3, #0]
 8005f38:	e051      	b.n	8005fde <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f3a:	231b      	movs	r3, #27
 8005f3c:	18fb      	adds	r3, r7, r3
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	2b08      	cmp	r3, #8
 8005f42:	d015      	beq.n	8005f70 <UART_SetConfig+0x288>
 8005f44:	dc18      	bgt.n	8005f78 <UART_SetConfig+0x290>
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	d00d      	beq.n	8005f66 <UART_SetConfig+0x27e>
 8005f4a:	dc15      	bgt.n	8005f78 <UART_SetConfig+0x290>
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d002      	beq.n	8005f56 <UART_SetConfig+0x26e>
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d005      	beq.n	8005f60 <UART_SetConfig+0x278>
 8005f54:	e010      	b.n	8005f78 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f56:	f7fe f947 	bl	80041e8 <HAL_RCC_GetPCLK1Freq>
 8005f5a:	0003      	movs	r3, r0
 8005f5c:	617b      	str	r3, [r7, #20]
        break;
 8005f5e:	e012      	b.n	8005f86 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f60:	4b31      	ldr	r3, [pc, #196]	; (8006028 <UART_SetConfig+0x340>)
 8005f62:	617b      	str	r3, [r7, #20]
        break;
 8005f64:	e00f      	b.n	8005f86 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f66:	f7fe f8b5 	bl	80040d4 <HAL_RCC_GetSysClockFreq>
 8005f6a:	0003      	movs	r3, r0
 8005f6c:	617b      	str	r3, [r7, #20]
        break;
 8005f6e:	e00a      	b.n	8005f86 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f70:	2380      	movs	r3, #128	; 0x80
 8005f72:	021b      	lsls	r3, r3, #8
 8005f74:	617b      	str	r3, [r7, #20]
        break;
 8005f76:	e006      	b.n	8005f86 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005f7c:	231a      	movs	r3, #26
 8005f7e:	18fb      	adds	r3, r7, r3
 8005f80:	2201      	movs	r2, #1
 8005f82:	701a      	strb	r2, [r3, #0]
        break;
 8005f84:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d028      	beq.n	8005fde <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f90:	4b26      	ldr	r3, [pc, #152]	; (800602c <UART_SetConfig+0x344>)
 8005f92:	0052      	lsls	r2, r2, #1
 8005f94:	5ad3      	ldrh	r3, [r2, r3]
 8005f96:	0019      	movs	r1, r3
 8005f98:	6978      	ldr	r0, [r7, #20]
 8005f9a:	f7fa f8b1 	bl	8000100 <__udivsi3>
 8005f9e:	0003      	movs	r3, r0
 8005fa0:	001a      	movs	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	085b      	lsrs	r3, r3, #1
 8005fa8:	18d2      	adds	r2, r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	0019      	movs	r1, r3
 8005fb0:	0010      	movs	r0, r2
 8005fb2:	f7fa f8a5 	bl	8000100 <__udivsi3>
 8005fb6:	0003      	movs	r3, r0
 8005fb8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	2b0f      	cmp	r3, #15
 8005fbe:	d90a      	bls.n	8005fd6 <UART_SetConfig+0x2ee>
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	2380      	movs	r3, #128	; 0x80
 8005fc4:	025b      	lsls	r3, r3, #9
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d205      	bcs.n	8005fd6 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	60da      	str	r2, [r3, #12]
 8005fd4:	e003      	b.n	8005fde <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8005fd6:	231a      	movs	r3, #26
 8005fd8:	18fb      	adds	r3, r7, r3
 8005fda:	2201      	movs	r2, #1
 8005fdc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	226a      	movs	r2, #106	; 0x6a
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2268      	movs	r2, #104	; 0x68
 8005fea:	2101      	movs	r1, #1
 8005fec:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005ffa:	231a      	movs	r3, #26
 8005ffc:	18fb      	adds	r3, r7, r3
 8005ffe:	781b      	ldrb	r3, [r3, #0]
}
 8006000:	0018      	movs	r0, r3
 8006002:	46bd      	mov	sp, r7
 8006004:	b008      	add	sp, #32
 8006006:	bd80      	pop	{r7, pc}
 8006008:	cfff69f3 	.word	0xcfff69f3
 800600c:	ffffcfff 	.word	0xffffcfff
 8006010:	11fff4ff 	.word	0x11fff4ff
 8006014:	40013800 	.word	0x40013800
 8006018:	40021000 	.word	0x40021000
 800601c:	40004400 	.word	0x40004400
 8006020:	40004800 	.word	0x40004800
 8006024:	40004c00 	.word	0x40004c00
 8006028:	00f42400 	.word	0x00f42400
 800602c:	08006730 	.word	0x08006730

08006030 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603c:	2201      	movs	r2, #1
 800603e:	4013      	ands	r3, r2
 8006040:	d00b      	beq.n	800605a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	4a4a      	ldr	r2, [pc, #296]	; (8006174 <UART_AdvFeatureConfig+0x144>)
 800604a:	4013      	ands	r3, r2
 800604c:	0019      	movs	r1, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605e:	2202      	movs	r2, #2
 8006060:	4013      	ands	r3, r2
 8006062:	d00b      	beq.n	800607c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	4a43      	ldr	r2, [pc, #268]	; (8006178 <UART_AdvFeatureConfig+0x148>)
 800606c:	4013      	ands	r3, r2
 800606e:	0019      	movs	r1, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	430a      	orrs	r2, r1
 800607a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006080:	2204      	movs	r2, #4
 8006082:	4013      	ands	r3, r2
 8006084:	d00b      	beq.n	800609e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	4a3b      	ldr	r2, [pc, #236]	; (800617c <UART_AdvFeatureConfig+0x14c>)
 800608e:	4013      	ands	r3, r2
 8006090:	0019      	movs	r1, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	430a      	orrs	r2, r1
 800609c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a2:	2208      	movs	r2, #8
 80060a4:	4013      	ands	r3, r2
 80060a6:	d00b      	beq.n	80060c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	4a34      	ldr	r2, [pc, #208]	; (8006180 <UART_AdvFeatureConfig+0x150>)
 80060b0:	4013      	ands	r3, r2
 80060b2:	0019      	movs	r1, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	430a      	orrs	r2, r1
 80060be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c4:	2210      	movs	r2, #16
 80060c6:	4013      	ands	r3, r2
 80060c8:	d00b      	beq.n	80060e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	4a2c      	ldr	r2, [pc, #176]	; (8006184 <UART_AdvFeatureConfig+0x154>)
 80060d2:	4013      	ands	r3, r2
 80060d4:	0019      	movs	r1, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	430a      	orrs	r2, r1
 80060e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e6:	2220      	movs	r2, #32
 80060e8:	4013      	ands	r3, r2
 80060ea:	d00b      	beq.n	8006104 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	4a25      	ldr	r2, [pc, #148]	; (8006188 <UART_AdvFeatureConfig+0x158>)
 80060f4:	4013      	ands	r3, r2
 80060f6:	0019      	movs	r1, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	430a      	orrs	r2, r1
 8006102:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006108:	2240      	movs	r2, #64	; 0x40
 800610a:	4013      	ands	r3, r2
 800610c:	d01d      	beq.n	800614a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	4a1d      	ldr	r2, [pc, #116]	; (800618c <UART_AdvFeatureConfig+0x15c>)
 8006116:	4013      	ands	r3, r2
 8006118:	0019      	movs	r1, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	430a      	orrs	r2, r1
 8006124:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800612a:	2380      	movs	r3, #128	; 0x80
 800612c:	035b      	lsls	r3, r3, #13
 800612e:	429a      	cmp	r2, r3
 8006130:	d10b      	bne.n	800614a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	4a15      	ldr	r2, [pc, #84]	; (8006190 <UART_AdvFeatureConfig+0x160>)
 800613a:	4013      	ands	r3, r2
 800613c:	0019      	movs	r1, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614e:	2280      	movs	r2, #128	; 0x80
 8006150:	4013      	ands	r3, r2
 8006152:	d00b      	beq.n	800616c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	4a0e      	ldr	r2, [pc, #56]	; (8006194 <UART_AdvFeatureConfig+0x164>)
 800615c:	4013      	ands	r3, r2
 800615e:	0019      	movs	r1, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	430a      	orrs	r2, r1
 800616a:	605a      	str	r2, [r3, #4]
  }
}
 800616c:	46c0      	nop			; (mov r8, r8)
 800616e:	46bd      	mov	sp, r7
 8006170:	b002      	add	sp, #8
 8006172:	bd80      	pop	{r7, pc}
 8006174:	fffdffff 	.word	0xfffdffff
 8006178:	fffeffff 	.word	0xfffeffff
 800617c:	fffbffff 	.word	0xfffbffff
 8006180:	ffff7fff 	.word	0xffff7fff
 8006184:	ffffefff 	.word	0xffffefff
 8006188:	ffffdfff 	.word	0xffffdfff
 800618c:	ffefffff 	.word	0xffefffff
 8006190:	ff9fffff 	.word	0xff9fffff
 8006194:	fff7ffff 	.word	0xfff7ffff

08006198 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af02      	add	r7, sp, #8
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2290      	movs	r2, #144	; 0x90
 80061a4:	2100      	movs	r1, #0
 80061a6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061a8:	f7fc f88c 	bl	80022c4 <HAL_GetTick>
 80061ac:	0003      	movs	r3, r0
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2208      	movs	r2, #8
 80061b8:	4013      	ands	r3, r2
 80061ba:	2b08      	cmp	r3, #8
 80061bc:	d10c      	bne.n	80061d8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2280      	movs	r2, #128	; 0x80
 80061c2:	0391      	lsls	r1, r2, #14
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	4a1a      	ldr	r2, [pc, #104]	; (8006230 <UART_CheckIdleState+0x98>)
 80061c8:	9200      	str	r2, [sp, #0]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f000 f832 	bl	8006234 <UART_WaitOnFlagUntilTimeout>
 80061d0:	1e03      	subs	r3, r0, #0
 80061d2:	d001      	beq.n	80061d8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e026      	b.n	8006226 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2204      	movs	r2, #4
 80061e0:	4013      	ands	r3, r2
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	d10c      	bne.n	8006200 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2280      	movs	r2, #128	; 0x80
 80061ea:	03d1      	lsls	r1, r2, #15
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	4a10      	ldr	r2, [pc, #64]	; (8006230 <UART_CheckIdleState+0x98>)
 80061f0:	9200      	str	r2, [sp, #0]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f000 f81e 	bl	8006234 <UART_WaitOnFlagUntilTimeout>
 80061f8:	1e03      	subs	r3, r0, #0
 80061fa:	d001      	beq.n	8006200 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e012      	b.n	8006226 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2288      	movs	r2, #136	; 0x88
 8006204:	2120      	movs	r1, #32
 8006206:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	228c      	movs	r2, #140	; 0x8c
 800620c:	2120      	movs	r1, #32
 800620e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2284      	movs	r2, #132	; 0x84
 8006220:	2100      	movs	r1, #0
 8006222:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	0018      	movs	r0, r3
 8006228:	46bd      	mov	sp, r7
 800622a:	b004      	add	sp, #16
 800622c:	bd80      	pop	{r7, pc}
 800622e:	46c0      	nop			; (mov r8, r8)
 8006230:	01ffffff 	.word	0x01ffffff

08006234 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b094      	sub	sp, #80	; 0x50
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	603b      	str	r3, [r7, #0]
 8006240:	1dfb      	adds	r3, r7, #7
 8006242:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006244:	e0a7      	b.n	8006396 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006246:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006248:	3301      	adds	r3, #1
 800624a:	d100      	bne.n	800624e <UART_WaitOnFlagUntilTimeout+0x1a>
 800624c:	e0a3      	b.n	8006396 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800624e:	f7fc f839 	bl	80022c4 <HAL_GetTick>
 8006252:	0002      	movs	r2, r0
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800625a:	429a      	cmp	r2, r3
 800625c:	d302      	bcc.n	8006264 <UART_WaitOnFlagUntilTimeout+0x30>
 800625e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006260:	2b00      	cmp	r3, #0
 8006262:	d13f      	bne.n	80062e4 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006264:	f3ef 8310 	mrs	r3, PRIMASK
 8006268:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800626a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800626c:	647b      	str	r3, [r7, #68]	; 0x44
 800626e:	2301      	movs	r3, #1
 8006270:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006274:	f383 8810 	msr	PRIMASK, r3
}
 8006278:	46c0      	nop			; (mov r8, r8)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	494e      	ldr	r1, [pc, #312]	; (80063c0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006286:	400a      	ands	r2, r1
 8006288:	601a      	str	r2, [r3, #0]
 800628a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800628c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800628e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006290:	f383 8810 	msr	PRIMASK, r3
}
 8006294:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006296:	f3ef 8310 	mrs	r3, PRIMASK
 800629a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800629c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800629e:	643b      	str	r3, [r7, #64]	; 0x40
 80062a0:	2301      	movs	r3, #1
 80062a2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a6:	f383 8810 	msr	PRIMASK, r3
}
 80062aa:	46c0      	nop			; (mov r8, r8)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689a      	ldr	r2, [r3, #8]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2101      	movs	r1, #1
 80062b8:	438a      	bics	r2, r1
 80062ba:	609a      	str	r2, [r3, #8]
 80062bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062be:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062c2:	f383 8810 	msr	PRIMASK, r3
}
 80062c6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2288      	movs	r2, #136	; 0x88
 80062cc:	2120      	movs	r1, #32
 80062ce:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	228c      	movs	r2, #140	; 0x8c
 80062d4:	2120      	movs	r1, #32
 80062d6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2284      	movs	r2, #132	; 0x84
 80062dc:	2100      	movs	r1, #0
 80062de:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e069      	b.n	80063b8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2204      	movs	r2, #4
 80062ec:	4013      	ands	r3, r2
 80062ee:	d052      	beq.n	8006396 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	69da      	ldr	r2, [r3, #28]
 80062f6:	2380      	movs	r3, #128	; 0x80
 80062f8:	011b      	lsls	r3, r3, #4
 80062fa:	401a      	ands	r2, r3
 80062fc:	2380      	movs	r3, #128	; 0x80
 80062fe:	011b      	lsls	r3, r3, #4
 8006300:	429a      	cmp	r2, r3
 8006302:	d148      	bne.n	8006396 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2280      	movs	r2, #128	; 0x80
 800630a:	0112      	lsls	r2, r2, #4
 800630c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800630e:	f3ef 8310 	mrs	r3, PRIMASK
 8006312:	613b      	str	r3, [r7, #16]
  return(result);
 8006314:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006316:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006318:	2301      	movs	r3, #1
 800631a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	f383 8810 	msr	PRIMASK, r3
}
 8006322:	46c0      	nop			; (mov r8, r8)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4924      	ldr	r1, [pc, #144]	; (80063c0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006330:	400a      	ands	r2, r1
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006336:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	f383 8810 	msr	PRIMASK, r3
}
 800633e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006340:	f3ef 8310 	mrs	r3, PRIMASK
 8006344:	61fb      	str	r3, [r7, #28]
  return(result);
 8006346:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006348:	64bb      	str	r3, [r7, #72]	; 0x48
 800634a:	2301      	movs	r3, #1
 800634c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	f383 8810 	msr	PRIMASK, r3
}
 8006354:	46c0      	nop			; (mov r8, r8)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2101      	movs	r1, #1
 8006362:	438a      	bics	r2, r1
 8006364:	609a      	str	r2, [r3, #8]
 8006366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006368:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800636a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636c:	f383 8810 	msr	PRIMASK, r3
}
 8006370:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2288      	movs	r2, #136	; 0x88
 8006376:	2120      	movs	r1, #32
 8006378:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	228c      	movs	r2, #140	; 0x8c
 800637e:	2120      	movs	r1, #32
 8006380:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2290      	movs	r2, #144	; 0x90
 8006386:	2120      	movs	r1, #32
 8006388:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2284      	movs	r2, #132	; 0x84
 800638e:	2100      	movs	r1, #0
 8006390:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e010      	b.n	80063b8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	69db      	ldr	r3, [r3, #28]
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	4013      	ands	r3, r2
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	425a      	negs	r2, r3
 80063a6:	4153      	adcs	r3, r2
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	001a      	movs	r2, r3
 80063ac:	1dfb      	adds	r3, r7, #7
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d100      	bne.n	80063b6 <UART_WaitOnFlagUntilTimeout+0x182>
 80063b4:	e747      	b.n	8006246 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	0018      	movs	r0, r3
 80063ba:	46bd      	mov	sp, r7
 80063bc:	b014      	add	sp, #80	; 0x50
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	fffffe5f 	.word	0xfffffe5f

080063c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2284      	movs	r2, #132	; 0x84
 80063d0:	5c9b      	ldrb	r3, [r3, r2]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d101      	bne.n	80063da <HAL_UARTEx_DisableFifoMode+0x16>
 80063d6:	2302      	movs	r3, #2
 80063d8:	e027      	b.n	800642a <HAL_UARTEx_DisableFifoMode+0x66>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2284      	movs	r2, #132	; 0x84
 80063de:	2101      	movs	r1, #1
 80063e0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2288      	movs	r2, #136	; 0x88
 80063e6:	2124      	movs	r1, #36	; 0x24
 80063e8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2101      	movs	r1, #1
 80063fe:	438a      	bics	r2, r1
 8006400:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4a0b      	ldr	r2, [pc, #44]	; (8006434 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006406:	4013      	ands	r3, r2
 8006408:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2288      	movs	r2, #136	; 0x88
 800641c:	2120      	movs	r1, #32
 800641e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2284      	movs	r2, #132	; 0x84
 8006424:	2100      	movs	r1, #0
 8006426:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	0018      	movs	r0, r3
 800642c:	46bd      	mov	sp, r7
 800642e:	b004      	add	sp, #16
 8006430:	bd80      	pop	{r7, pc}
 8006432:	46c0      	nop			; (mov r8, r8)
 8006434:	dfffffff 	.word	0xdfffffff

08006438 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2284      	movs	r2, #132	; 0x84
 8006446:	5c9b      	ldrb	r3, [r3, r2]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d101      	bne.n	8006450 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800644c:	2302      	movs	r3, #2
 800644e:	e02e      	b.n	80064ae <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2284      	movs	r2, #132	; 0x84
 8006454:	2101      	movs	r1, #1
 8006456:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2288      	movs	r2, #136	; 0x88
 800645c:	2124      	movs	r1, #36	; 0x24
 800645e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2101      	movs	r1, #1
 8006474:	438a      	bics	r2, r1
 8006476:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	00db      	lsls	r3, r3, #3
 8006480:	08d9      	lsrs	r1, r3, #3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	430a      	orrs	r2, r1
 800648a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	0018      	movs	r0, r3
 8006490:	f000 f854 	bl	800653c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2288      	movs	r2, #136	; 0x88
 80064a0:	2120      	movs	r1, #32
 80064a2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2284      	movs	r2, #132	; 0x84
 80064a8:	2100      	movs	r1, #0
 80064aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	0018      	movs	r0, r3
 80064b0:	46bd      	mov	sp, r7
 80064b2:	b004      	add	sp, #16
 80064b4:	bd80      	pop	{r7, pc}
	...

080064b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2284      	movs	r2, #132	; 0x84
 80064c6:	5c9b      	ldrb	r3, [r3, r2]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d101      	bne.n	80064d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80064cc:	2302      	movs	r3, #2
 80064ce:	e02f      	b.n	8006530 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2284      	movs	r2, #132	; 0x84
 80064d4:	2101      	movs	r1, #1
 80064d6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2288      	movs	r2, #136	; 0x88
 80064dc:	2124      	movs	r1, #36	; 0x24
 80064de:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2101      	movs	r1, #1
 80064f4:	438a      	bics	r2, r1
 80064f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	4a0e      	ldr	r2, [pc, #56]	; (8006538 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006500:	4013      	ands	r3, r2
 8006502:	0019      	movs	r1, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	683a      	ldr	r2, [r7, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	0018      	movs	r0, r3
 8006512:	f000 f813 	bl	800653c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2288      	movs	r2, #136	; 0x88
 8006522:	2120      	movs	r1, #32
 8006524:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2284      	movs	r2, #132	; 0x84
 800652a:	2100      	movs	r1, #0
 800652c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	0018      	movs	r0, r3
 8006532:	46bd      	mov	sp, r7
 8006534:	b004      	add	sp, #16
 8006536:	bd80      	pop	{r7, pc}
 8006538:	f1ffffff 	.word	0xf1ffffff

0800653c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800653c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006548:	2b00      	cmp	r3, #0
 800654a:	d108      	bne.n	800655e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	226a      	movs	r2, #106	; 0x6a
 8006550:	2101      	movs	r1, #1
 8006552:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2268      	movs	r2, #104	; 0x68
 8006558:	2101      	movs	r1, #1
 800655a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800655c:	e043      	b.n	80065e6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800655e:	260f      	movs	r6, #15
 8006560:	19bb      	adds	r3, r7, r6
 8006562:	2208      	movs	r2, #8
 8006564:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006566:	200e      	movs	r0, #14
 8006568:	183b      	adds	r3, r7, r0
 800656a:	2208      	movs	r2, #8
 800656c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	0e5b      	lsrs	r3, r3, #25
 8006576:	b2da      	uxtb	r2, r3
 8006578:	240d      	movs	r4, #13
 800657a:	193b      	adds	r3, r7, r4
 800657c:	2107      	movs	r1, #7
 800657e:	400a      	ands	r2, r1
 8006580:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	0f5b      	lsrs	r3, r3, #29
 800658a:	b2da      	uxtb	r2, r3
 800658c:	250c      	movs	r5, #12
 800658e:	197b      	adds	r3, r7, r5
 8006590:	2107      	movs	r1, #7
 8006592:	400a      	ands	r2, r1
 8006594:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006596:	183b      	adds	r3, r7, r0
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	197a      	adds	r2, r7, r5
 800659c:	7812      	ldrb	r2, [r2, #0]
 800659e:	4914      	ldr	r1, [pc, #80]	; (80065f0 <UARTEx_SetNbDataToProcess+0xb4>)
 80065a0:	5c8a      	ldrb	r2, [r1, r2]
 80065a2:	435a      	muls	r2, r3
 80065a4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80065a6:	197b      	adds	r3, r7, r5
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	4a12      	ldr	r2, [pc, #72]	; (80065f4 <UARTEx_SetNbDataToProcess+0xb8>)
 80065ac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065ae:	0019      	movs	r1, r3
 80065b0:	f7f9 fe30 	bl	8000214 <__divsi3>
 80065b4:	0003      	movs	r3, r0
 80065b6:	b299      	uxth	r1, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	226a      	movs	r2, #106	; 0x6a
 80065bc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065be:	19bb      	adds	r3, r7, r6
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	193a      	adds	r2, r7, r4
 80065c4:	7812      	ldrb	r2, [r2, #0]
 80065c6:	490a      	ldr	r1, [pc, #40]	; (80065f0 <UARTEx_SetNbDataToProcess+0xb4>)
 80065c8:	5c8a      	ldrb	r2, [r1, r2]
 80065ca:	435a      	muls	r2, r3
 80065cc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80065ce:	193b      	adds	r3, r7, r4
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	4a08      	ldr	r2, [pc, #32]	; (80065f4 <UARTEx_SetNbDataToProcess+0xb8>)
 80065d4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065d6:	0019      	movs	r1, r3
 80065d8:	f7f9 fe1c 	bl	8000214 <__divsi3>
 80065dc:	0003      	movs	r3, r0
 80065de:	b299      	uxth	r1, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2268      	movs	r2, #104	; 0x68
 80065e4:	5299      	strh	r1, [r3, r2]
}
 80065e6:	46c0      	nop			; (mov r8, r8)
 80065e8:	46bd      	mov	sp, r7
 80065ea:	b005      	add	sp, #20
 80065ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065ee:	46c0      	nop			; (mov r8, r8)
 80065f0:	08006748 	.word	0x08006748
 80065f4:	08006750 	.word	0x08006750

080065f8 <memset>:
 80065f8:	0003      	movs	r3, r0
 80065fa:	1882      	adds	r2, r0, r2
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d100      	bne.n	8006602 <memset+0xa>
 8006600:	4770      	bx	lr
 8006602:	7019      	strb	r1, [r3, #0]
 8006604:	3301      	adds	r3, #1
 8006606:	e7f9      	b.n	80065fc <memset+0x4>

08006608 <__libc_init_array>:
 8006608:	b570      	push	{r4, r5, r6, lr}
 800660a:	2600      	movs	r6, #0
 800660c:	4c0c      	ldr	r4, [pc, #48]	; (8006640 <__libc_init_array+0x38>)
 800660e:	4d0d      	ldr	r5, [pc, #52]	; (8006644 <__libc_init_array+0x3c>)
 8006610:	1b64      	subs	r4, r4, r5
 8006612:	10a4      	asrs	r4, r4, #2
 8006614:	42a6      	cmp	r6, r4
 8006616:	d109      	bne.n	800662c <__libc_init_array+0x24>
 8006618:	2600      	movs	r6, #0
 800661a:	f000 f823 	bl	8006664 <_init>
 800661e:	4c0a      	ldr	r4, [pc, #40]	; (8006648 <__libc_init_array+0x40>)
 8006620:	4d0a      	ldr	r5, [pc, #40]	; (800664c <__libc_init_array+0x44>)
 8006622:	1b64      	subs	r4, r4, r5
 8006624:	10a4      	asrs	r4, r4, #2
 8006626:	42a6      	cmp	r6, r4
 8006628:	d105      	bne.n	8006636 <__libc_init_array+0x2e>
 800662a:	bd70      	pop	{r4, r5, r6, pc}
 800662c:	00b3      	lsls	r3, r6, #2
 800662e:	58eb      	ldr	r3, [r5, r3]
 8006630:	4798      	blx	r3
 8006632:	3601      	adds	r6, #1
 8006634:	e7ee      	b.n	8006614 <__libc_init_array+0xc>
 8006636:	00b3      	lsls	r3, r6, #2
 8006638:	58eb      	ldr	r3, [r5, r3]
 800663a:	4798      	blx	r3
 800663c:	3601      	adds	r6, #1
 800663e:	e7f2      	b.n	8006626 <__libc_init_array+0x1e>
 8006640:	08006758 	.word	0x08006758
 8006644:	08006758 	.word	0x08006758
 8006648:	0800675c 	.word	0x0800675c
 800664c:	08006758 	.word	0x08006758

08006650 <memcpy>:
 8006650:	2300      	movs	r3, #0
 8006652:	b510      	push	{r4, lr}
 8006654:	429a      	cmp	r2, r3
 8006656:	d100      	bne.n	800665a <memcpy+0xa>
 8006658:	bd10      	pop	{r4, pc}
 800665a:	5ccc      	ldrb	r4, [r1, r3]
 800665c:	54c4      	strb	r4, [r0, r3]
 800665e:	3301      	adds	r3, #1
 8006660:	e7f8      	b.n	8006654 <memcpy+0x4>
	...

08006664 <_init>:
 8006664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006666:	46c0      	nop			; (mov r8, r8)
 8006668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800666a:	bc08      	pop	{r3}
 800666c:	469e      	mov	lr, r3
 800666e:	4770      	bx	lr

08006670 <_fini>:
 8006670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006672:	46c0      	nop			; (mov r8, r8)
 8006674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006676:	bc08      	pop	{r3}
 8006678:	469e      	mov	lr, r3
 800667a:	4770      	bx	lr
